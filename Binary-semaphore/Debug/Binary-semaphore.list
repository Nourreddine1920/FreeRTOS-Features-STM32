
Binary-semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005918  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08005ae8  08005ae8  00015ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c9c  08005c9c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005c9c  08005c9c  00015c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ca4  08005ca4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ca4  08005ca4  00015ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ca8  08005ca8  00015ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040a0  20000010  08005cbc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040b0  08005cbc  000240b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001890c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f19  00000000  00000000  0003894c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  0003b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  0003ca50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027930  00000000  00000000  0003db20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015165  00000000  00000000  00065450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f89b7  00000000  00000000  0007a5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172f6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004acc  00000000  00000000  00172fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005ad0 	.word	0x08005ad0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08005ad0 	.word	0x08005ad0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	4a07      	ldr	r2, [pc, #28]	; (8000544 <vApplicationGetIdleTaskMemory+0x2c>)
 8000528:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	4a06      	ldr	r2, [pc, #24]	; (8000548 <vApplicationGetIdleTaskMemory+0x30>)
 800052e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2280      	movs	r2, #128	; 0x80
 8000534:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	2000002c 	.word	0x2000002c
 8000548:	20000080 	.word	0x20000080

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b5b0      	push	{r4, r5, r7, lr}
 800054e:	b098      	sub	sp, #96	; 0x60
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000552:	f000 fb56 	bl	8000c02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000556:	f000 f859 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055a:	f000 f8ef 	bl	800073c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055e:	f000 f8bd 	bl	80006dc <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 8000562:	2300      	movs	r3, #0
 8000564:	65bb      	str	r3, [r7, #88]	; 0x58
 8000566:	2300      	movs	r3, #0
 8000568:	65fb      	str	r3, [r7, #92]	; 0x5c
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 800056a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800056e:	2101      	movs	r1, #1
 8000570:	4618      	mov	r0, r3
 8000572:	f002 ff1d 	bl	80033b0 <osSemaphoreCreate>
 8000576:	4603      	mov	r3, r0
 8000578:	4a1d      	ldr	r2, [pc, #116]	; (80005f0 <main+0xa4>)
 800057a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of NormalTask */
  osThreadDef(NormalTask, Startnormaltask, osPriorityNormal, 0, 128);
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <main+0xa8>)
 800057e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000582:	461d      	mov	r5, r3
 8000584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000588:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  NormalTaskHandle = osThreadCreate(osThread(NormalTask), NULL);
 8000590:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 feaa 	bl	80032f0 <osThreadCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a16      	ldr	r2, [pc, #88]	; (80005f8 <main+0xac>)
 80005a0:	6013      	str	r3, [r2, #0]

  /* definition and creation of LowTask */
  osThreadDef(LowTask, Startlowtask, osPriorityBelowNormal, 0, 128);
 80005a2:	4b16      	ldr	r3, [pc, #88]	; (80005fc <main+0xb0>)
 80005a4:	f107 0420 	add.w	r4, r7, #32
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LowTaskHandle = osThreadCreate(osThread(LowTask), NULL);
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fe97 	bl	80032f0 <osThreadCreate>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <main+0xb4>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of HighTask */
  osThreadDef(HighTask, Starthightask, osPriorityAboveNormal, 0, 128);
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <main+0xb8>)
 80005ca:	1d3c      	adds	r4, r7, #4
 80005cc:	461d      	mov	r5, r3
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HighTaskHandle = osThreadCreate(osThread(HighTask), NULL);
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fe86 	bl	80032f0 <osThreadCreate>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a08      	ldr	r2, [pc, #32]	; (8000608 <main+0xbc>)
 80005e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ea:	f002 fe7a 	bl	80032e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <main+0xa2>
 80005f0:	2000405c 	.word	0x2000405c
 80005f4:	08005b08 	.word	0x08005b08
 80005f8:	20003fd4 	.word	0x20003fd4
 80005fc:	08005b24 	.word	0x08005b24
 8000600:	20003fd0 	.word	0x20003fd0
 8000604:	08005b40 	.word	0x08005b40
 8000608:	20003fcc 	.word	0x20003fcc

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f005 fa50 	bl	8005ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xc8>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <SystemClock_Config+0xc8>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xc8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemClock_Config+0xcc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xcc>)
 8000652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xcc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000678:	230a      	movs	r3, #10
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 800067c:	23d2      	movs	r3, #210	; 0xd2
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000684:	2302      	movs	r3, #2
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fda5 	bl	80011dc <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000698:	f000 f974 	bl	8000984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2105      	movs	r1, #5
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f832 	bl	8001724 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006c6:	f000 f95d 	bl	8000984 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006e2:	4a15      	ldr	r2, [pc, #84]	; (8000738 <MX_USART2_UART_Init+0x5c>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USART2_UART_Init+0x58>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USART2_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_USART2_UART_Init+0x58>)
 8000720:	f002 f8d8 	bl	80028d4 <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800072a:	f000 f92b 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20003fd8 	.word	0x20003fd8
 8000738:	40004400 	.word	0x40004400

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <MX_GPIO_Init+0xa8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <MX_GPIO_Init+0xa8>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_GPIO_Init+0xa8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_GPIO_Init+0xa8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a1d      	ldr	r2, [pc, #116]	; (80007e4 <MX_GPIO_Init+0xa8>)
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_GPIO_Init+0xa8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0308 	and.w	r3, r3, #8
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_GPIO_Init+0xa8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a17      	ldr	r2, [pc, #92]	; (80007e4 <MX_GPIO_Init+0xa8>)
 8000788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_GPIO_Init+0xa8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2102      	movs	r1, #2
 800079e:	4812      	ldr	r0, [pc, #72]	; (80007e8 <MX_GPIO_Init+0xac>)
 80007a0:	f000 fd02 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007a4:	2302      	movs	r3, #2
 80007a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	480b      	ldr	r0, [pc, #44]	; (80007e8 <MX_GPIO_Init+0xac>)
 80007bc:	f000 fb30 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	4619      	mov	r1, r3
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_GPIO_Init+0xac>)
 80007d6:	f000 fb23 	bl	8000e20 <HAL_GPIO_Init>

}
 80007da:	bf00      	nop
 80007dc:	3720      	adds	r7, #32
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40022000 	.word	0x40022000

080007ec <Startnormaltask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startnormaltask */
void Startnormaltask(void const * argument)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		char *str1 = "Entered MediumTask\n";
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <Startnormaltask+0x44>)
 80007f6:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen (str1), 100);
 80007f8:	68f8      	ldr	r0, [r7, #12]
 80007fa:	f7ff fd09 	bl	8000210 <strlen>
 80007fe:	4603      	mov	r3, r0
 8000800:	b29a      	uxth	r2, r3
 8000802:	2364      	movs	r3, #100	; 0x64
 8000804:	68f9      	ldr	r1, [r7, #12]
 8000806:	480b      	ldr	r0, [pc, #44]	; (8000834 <Startnormaltask+0x48>)
 8000808:	f002 f8b2 	bl	8002970 <HAL_UART_Transmit>


			char *str2 = "Leaving MediumTask\n\n";
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <Startnormaltask+0x4c>)
 800080e:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart2, (uint8_t *) str2, strlen (str2), 100);
 8000810:	68b8      	ldr	r0, [r7, #8]
 8000812:	f7ff fcfd 	bl	8000210 <strlen>
 8000816:	4603      	mov	r3, r0
 8000818:	b29a      	uxth	r2, r3
 800081a:	2364      	movs	r3, #100	; 0x64
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <Startnormaltask+0x48>)
 8000820:	f002 f8a6 	bl	8002970 <HAL_UART_Transmit>
			osDelay(500);
 8000824:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000828:	f002 fdae 	bl	8003388 <osDelay>
  {
 800082c:	e7e2      	b.n	80007f4 <Startnormaltask+0x8>
 800082e:	bf00      	nop
 8000830:	08005b5c 	.word	0x08005b5c
 8000834:	20003fd8 	.word	0x20003fd8
 8000838:	08005b70 	.word	0x08005b70

0800083c <Startlowtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startlowtask */
void Startlowtask(void const * argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startlowtask */
  /* Infinite loop */
  for(;;)
  {
	  char *str1 = "Entered LOWTask and waiting for semaphore\n";
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <Startlowtask+0x84>)
 8000846:	617b      	str	r3, [r7, #20]
	  		HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen (str1), 100);
 8000848:	6978      	ldr	r0, [r7, #20]
 800084a:	f7ff fce1 	bl	8000210 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	b29a      	uxth	r2, r3
 8000852:	2364      	movs	r3, #100	; 0x64
 8000854:	6979      	ldr	r1, [r7, #20]
 8000856:	481b      	ldr	r0, [pc, #108]	; (80008c4 <Startlowtask+0x88>)
 8000858:	f002 f88a 	bl	8002970 <HAL_UART_Transmit>

	  		osSemaphoreWait(BinSemHandle, osWaitForever);
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <Startlowtask+0x8c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f04f 31ff 	mov.w	r1, #4294967295
 8000864:	4618      	mov	r0, r3
 8000866:	f002 fdd5 	bl	8003414 <osSemaphoreWait>

	  		char *str3 = "Semaphore acquired by LOW Task\n";
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <Startlowtask+0x90>)
 800086c:	613b      	str	r3, [r7, #16]
	  		HAL_UART_Transmit(&huart2, (uint8_t *) str3, strlen (str3), 100);
 800086e:	6938      	ldr	r0, [r7, #16]
 8000870:	f7ff fcce 	bl	8000210 <strlen>
 8000874:	4603      	mov	r3, r0
 8000876:	b29a      	uxth	r2, r3
 8000878:	2364      	movs	r3, #100	; 0x64
 800087a:	6939      	ldr	r1, [r7, #16]
 800087c:	4811      	ldr	r0, [pc, #68]	; (80008c4 <Startlowtask+0x88>)
 800087e:	f002 f877 	bl	8002970 <HAL_UART_Transmit>

	  		while (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11));  // wait till the pin go low
 8000882:	bf00      	nop
 8000884:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000888:	4811      	ldr	r0, [pc, #68]	; (80008d0 <Startlowtask+0x94>)
 800088a:	f000 fc75 	bl	8001178 <HAL_GPIO_ReadPin>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1f7      	bne.n	8000884 <Startlowtask+0x48>

	  		char *str2 = "Leaving LOWTask and releasing Semaphore\n\n";
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <Startlowtask+0x98>)
 8000896:	60fb      	str	r3, [r7, #12]
	  		HAL_UART_Transmit(&huart2, (uint8_t *) str2, strlen (str2), 100);
 8000898:	68f8      	ldr	r0, [r7, #12]
 800089a:	f7ff fcb9 	bl	8000210 <strlen>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	68f9      	ldr	r1, [r7, #12]
 80008a6:	4807      	ldr	r0, [pc, #28]	; (80008c4 <Startlowtask+0x88>)
 80008a8:	f002 f862 	bl	8002970 <HAL_UART_Transmit>

	  		osSemaphoreRelease(BinSemHandle);
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <Startlowtask+0x8c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 fdfd 	bl	80034b0 <osSemaphoreRelease>
	  		osDelay(500);  }
 80008b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ba:	f002 fd65 	bl	8003388 <osDelay>
  {
 80008be:	e7c1      	b.n	8000844 <Startlowtask+0x8>
 80008c0:	08005b88 	.word	0x08005b88
 80008c4:	20003fd8 	.word	0x20003fd8
 80008c8:	2000405c 	.word	0x2000405c
 80008cc:	08005bb4 	.word	0x08005bb4
 80008d0:	40022000 	.word	0x40022000
 80008d4:	08005bd4 	.word	0x08005bd4

080008d8 <Starthightask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Starthightask */
void Starthightask(void const * argument)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Starthightask */
  /* Infinite loop */
  for(;;)
  {
	  char *str1 = "Entered HighTask and waiting for Semaphore\n";
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <Starthightask+0x74>)
 80008e2:	617b      	str	r3, [r7, #20]
	  	HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen (str1), 100);
 80008e4:	6978      	ldr	r0, [r7, #20]
 80008e6:	f7ff fc93 	bl	8000210 <strlen>
 80008ea:	4603      	mov	r3, r0
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	2364      	movs	r3, #100	; 0x64
 80008f0:	6979      	ldr	r1, [r7, #20]
 80008f2:	4817      	ldr	r0, [pc, #92]	; (8000950 <Starthightask+0x78>)
 80008f4:	f002 f83c 	bl	8002970 <HAL_UART_Transmit>

	  	osSemaphoreWait(BinSemHandle, osWaitForever);
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <Starthightask+0x7c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000900:	4618      	mov	r0, r3
 8000902:	f002 fd87 	bl	8003414 <osSemaphoreWait>

	  	char *str3 = "Semaphore acquired by HIGH Task\n";
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <Starthightask+0x80>)
 8000908:	613b      	str	r3, [r7, #16]
	  	HAL_UART_Transmit(&huart2, (uint8_t *) str3, strlen (str3), 100);
 800090a:	6938      	ldr	r0, [r7, #16]
 800090c:	f7ff fc80 	bl	8000210 <strlen>
 8000910:	4603      	mov	r3, r0
 8000912:	b29a      	uxth	r2, r3
 8000914:	2364      	movs	r3, #100	; 0x64
 8000916:	6939      	ldr	r1, [r7, #16]
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <Starthightask+0x78>)
 800091a:	f002 f829 	bl	8002970 <HAL_UART_Transmit>

	  	char *str2 = "Leaving HighTask and releasing Semaphore\n\n";
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <Starthightask+0x84>)
 8000920:	60fb      	str	r3, [r7, #12]
	  	HAL_UART_Transmit(&huart2, (uint8_t *) str2, strlen (str2), 100);
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f7ff fc74 	bl	8000210 <strlen>
 8000928:	4603      	mov	r3, r0
 800092a:	b29a      	uxth	r2, r3
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	68f9      	ldr	r1, [r7, #12]
 8000930:	4807      	ldr	r0, [pc, #28]	; (8000950 <Starthightask+0x78>)
 8000932:	f002 f81d 	bl	8002970 <HAL_UART_Transmit>

	  	osSemaphoreRelease(BinSemHandle);
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <Starthightask+0x7c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f002 fdb8 	bl	80034b0 <osSemaphoreRelease>
	      osDelay(500);
 8000940:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000944:	f002 fd20 	bl	8003388 <osDelay>
  {
 8000948:	e7ca      	b.n	80008e0 <Starthightask+0x8>
 800094a:	bf00      	nop
 800094c:	08005c00 	.word	0x08005c00
 8000950:	20003fd8 	.word	0x20003fd8
 8000954:	2000405c 	.word	0x2000405c
 8000958:	08005c2c 	.word	0x08005c2c
 800095c:	08005c50 	.word	0x08005c50

08000960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d101      	bne.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000972:	f000 f953 	bl	8000c1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40010000 	.word	0x40010000

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a10      	ldr	r2, [pc, #64]	; (80009dc <HAL_MspInit+0x4c>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <HAL_MspInit+0x4c>)
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	210f      	movs	r1, #15
 80009ca:	f06f 0001 	mvn.w	r0, #1
 80009ce:	f000 f9fd 	bl	8000dcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0aa      	sub	sp, #168	; 0xa8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	2284      	movs	r2, #132	; 0x84
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f005 f85d 	bl	8005ac0 <memset>
  if(huart->Instance==USART2)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <HAL_UART_MspInit+0xb0>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d13a      	bne.n	8000a86 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 f889 	bl	8001b34 <HAL_RCCEx_PeriphCLKConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a28:	f7ff ffac 	bl	8000984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2c:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a18      	ldr	r2, [pc, #96]	; (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
 8000a38:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a48:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a4a:	f043 0308 	orr.w	r3, r3, #8
 8000a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8000a5c:	2360      	movs	r3, #96	; 0x60
 8000a5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a74:	2307      	movs	r3, #7
 8000a76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <HAL_UART_MspInit+0xb8>)
 8000a82:	f000 f9cd 	bl	8000e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	37a8      	adds	r7, #168	; 0xa8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020c00 	.word	0x40020c00

08000a9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	2019      	movs	r0, #25
 8000ab2:	f000 f98b 	bl	8000dcc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ab6:	2019      	movs	r0, #25
 8000ab8:	f000 f9a4 	bl	8000e04 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <HAL_InitTick+0xa0>)
 8000abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac0:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <HAL_InitTick+0xa0>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_InitTick+0xa0>)
 8000aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad4:	f107 0210 	add.w	r2, r7, #16
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4611      	mov	r1, r2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fff6 	bl	8001ad0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ae4:	f000 ffe0 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af0:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <HAL_InitTick+0xa4>)
 8000af2:	fba2 2303 	umull	r2, r3, r2, r3
 8000af6:	0c9b      	lsrs	r3, r3, #18
 8000af8:	3b01      	subs	r3, #1
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_InitTick+0xa8>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <HAL_InitTick+0xac>)
 8000b00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_InitTick+0xa8>)
 8000b04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_InitTick+0xa8>)
 8000b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_InitTick+0xa8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_InitTick+0xa8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <HAL_InitTick+0xa8>)
 8000b1e:	f001 fbf9 	bl	8002314 <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d104      	bne.n	8000b32 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b28:	4806      	ldr	r0, [pc, #24]	; (8000b44 <HAL_InitTick+0xa8>)
 8000b2a:	f001 fc55 	bl	80023d8 <HAL_TIM_Base_Start_IT>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3730      	adds	r7, #48	; 0x30
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	431bde83 	.word	0x431bde83
 8000b44:	20004060 	.word	0x20004060
 8000b48:	40010000 	.word	0x40010000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b7e:	f001 fca3 	bl	80024c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20004060 	.word	0x20004060

08000b8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bb6:	490e      	ldr	r1, [pc, #56]	; (8000bf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bcc:	4c0b      	ldr	r4, [pc, #44]	; (8000bfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bda:	f7ff ffd7 	bl	8000b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bde:	f004 ff3d 	bl	8005a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be2:	f7ff fcb3 	bl	800054c <main>
  bx  lr    
 8000be6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bf4:	08005cac 	.word	0x08005cac
  ldr r2, =_sbss
 8000bf8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bfc:	200040b0 	.word	0x200040b0

08000c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC_IRQHandler>

08000c02 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c06:	2003      	movs	r0, #3
 8000c08:	f000 f8d5 	bl	8000db6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0c:	200f      	movs	r0, #15
 8000c0e:	f7ff ff45 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c12:	f7ff febd 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x24>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_IncTick+0x24>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	200040ac 	.word	0x200040ac

08000c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	200040ac 	.word	0x200040ac

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <__NVIC_SetPriorityGrouping+0x40>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	4313      	orrs	r3, r2
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x40>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00
 8000ca0:	05fa0000 	.word	0x05fa0000

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4907      	ldr	r1, [pc, #28]	; (8000cf8 <__NVIC_EnableIRQ+0x38>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ff4c 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dde:	f7ff ff61 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000de2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	68b9      	ldr	r1, [r7, #8]
 8000de8:	6978      	ldr	r0, [r7, #20]
 8000dea:	f7ff ffb1 	bl	8000d50 <NVIC_EncodePriority>
 8000dee:	4602      	mov	r2, r0
 8000df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff80 	bl	8000cfc <__NVIC_SetPriority>
}
 8000dfc:	bf00      	nop
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff54 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	e175      	b.n	800112c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f040 8164 	bne.w	8001126 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d005      	beq.n	8000e76 <HAL_GPIO_Init+0x56>
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d130      	bne.n	8000ed8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eac:	2201      	movs	r2, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	091b      	lsrs	r3, r3, #4
 8000ec2:	f003 0201 	and.w	r2, r3, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d017      	beq.n	8000f14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d123      	bne.n	8000f68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	69b9      	ldr	r1, [r7, #24]
 8000f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0203 	and.w	r2, r3, #3
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80be 	beq.w	8001126 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	4b66      	ldr	r3, [pc, #408]	; (8001144 <HAL_GPIO_Init+0x324>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a65      	ldr	r2, [pc, #404]	; (8001144 <HAL_GPIO_Init+0x324>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b63      	ldr	r3, [pc, #396]	; (8001144 <HAL_GPIO_Init+0x324>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fc2:	4a61      	ldr	r2, [pc, #388]	; (8001148 <HAL_GPIO_Init+0x328>)
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a58      	ldr	r2, [pc, #352]	; (800114c <HAL_GPIO_Init+0x32c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d037      	beq.n	800105e <HAL_GPIO_Init+0x23e>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a57      	ldr	r2, [pc, #348]	; (8001150 <HAL_GPIO_Init+0x330>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d031      	beq.n	800105a <HAL_GPIO_Init+0x23a>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a56      	ldr	r2, [pc, #344]	; (8001154 <HAL_GPIO_Init+0x334>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d02b      	beq.n	8001056 <HAL_GPIO_Init+0x236>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a55      	ldr	r2, [pc, #340]	; (8001158 <HAL_GPIO_Init+0x338>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d025      	beq.n	8001052 <HAL_GPIO_Init+0x232>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a54      	ldr	r2, [pc, #336]	; (800115c <HAL_GPIO_Init+0x33c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d01f      	beq.n	800104e <HAL_GPIO_Init+0x22e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a53      	ldr	r2, [pc, #332]	; (8001160 <HAL_GPIO_Init+0x340>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x22a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a52      	ldr	r2, [pc, #328]	; (8001164 <HAL_GPIO_Init+0x344>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x226>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a51      	ldr	r2, [pc, #324]	; (8001168 <HAL_GPIO_Init+0x348>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x222>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a50      	ldr	r2, [pc, #320]	; (800116c <HAL_GPIO_Init+0x34c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x21e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4f      	ldr	r2, [pc, #316]	; (8001170 <HAL_GPIO_Init+0x350>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x21a>
 8001036:	2309      	movs	r3, #9
 8001038:	e012      	b.n	8001060 <HAL_GPIO_Init+0x240>
 800103a:	230a      	movs	r3, #10
 800103c:	e010      	b.n	8001060 <HAL_GPIO_Init+0x240>
 800103e:	2308      	movs	r3, #8
 8001040:	e00e      	b.n	8001060 <HAL_GPIO_Init+0x240>
 8001042:	2307      	movs	r3, #7
 8001044:	e00c      	b.n	8001060 <HAL_GPIO_Init+0x240>
 8001046:	2306      	movs	r3, #6
 8001048:	e00a      	b.n	8001060 <HAL_GPIO_Init+0x240>
 800104a:	2305      	movs	r3, #5
 800104c:	e008      	b.n	8001060 <HAL_GPIO_Init+0x240>
 800104e:	2304      	movs	r3, #4
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x240>
 8001052:	2303      	movs	r3, #3
 8001054:	e004      	b.n	8001060 <HAL_GPIO_Init+0x240>
 8001056:	2302      	movs	r3, #2
 8001058:	e002      	b.n	8001060 <HAL_GPIO_Init+0x240>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x240>
 800105e:	2300      	movs	r3, #0
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	f002 0203 	and.w	r2, r2, #3
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4093      	lsls	r3, r2
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001070:	4935      	ldr	r1, [pc, #212]	; (8001148 <HAL_GPIO_Init+0x328>)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107e:	4b3d      	ldr	r3, [pc, #244]	; (8001174 <HAL_GPIO_Init+0x354>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a2:	4a34      	ldr	r2, [pc, #208]	; (8001174 <HAL_GPIO_Init+0x354>)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a8:	4b32      	ldr	r3, [pc, #200]	; (8001174 <HAL_GPIO_Init+0x354>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010cc:	4a29      	ldr	r2, [pc, #164]	; (8001174 <HAL_GPIO_Init+0x354>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010d2:	4b28      	ldr	r3, [pc, #160]	; (8001174 <HAL_GPIO_Init+0x354>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f6:	4a1f      	ldr	r2, [pc, #124]	; (8001174 <HAL_GPIO_Init+0x354>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <HAL_GPIO_Init+0x354>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <HAL_GPIO_Init+0x354>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3301      	adds	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	2b0f      	cmp	r3, #15
 8001130:	f67f ae86 	bls.w	8000e40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40013800 	.word	0x40013800
 800114c:	40020000 	.word	0x40020000
 8001150:	40020400 	.word	0x40020400
 8001154:	40020800 	.word	0x40020800
 8001158:	40020c00 	.word	0x40020c00
 800115c:	40021000 	.word	0x40021000
 8001160:	40021400 	.word	0x40021400
 8001164:	40021800 	.word	0x40021800
 8001168:	40021c00 	.word	0x40021c00
 800116c:	40022000 	.word	0x40022000
 8001170:	40022400 	.word	0x40022400
 8001174:	40013c00 	.word	0x40013c00

08001178 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	887b      	ldrh	r3, [r7, #2]
 800118a:	4013      	ands	r3, r2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001190:	2301      	movs	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	e001      	b.n	800119a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800119a:	7bfb      	ldrb	r3, [r7, #15]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
 80011b4:	4613      	mov	r3, r2
 80011b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b8:	787b      	ldrb	r3, [r7, #1]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011c4:	e003      	b.n	80011ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	041a      	lsls	r2, r3, #16
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	619a      	str	r2, [r3, #24]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e291      	b.n	8001716 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 8087 	beq.w	800130e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001200:	4b96      	ldr	r3, [pc, #600]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 030c 	and.w	r3, r3, #12
 8001208:	2b04      	cmp	r3, #4
 800120a:	d00c      	beq.n	8001226 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120c:	4b93      	ldr	r3, [pc, #588]	; (800145c <HAL_RCC_OscConfig+0x280>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	2b08      	cmp	r3, #8
 8001216:	d112      	bne.n	800123e <HAL_RCC_OscConfig+0x62>
 8001218:	4b90      	ldr	r3, [pc, #576]	; (800145c <HAL_RCC_OscConfig+0x280>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001224:	d10b      	bne.n	800123e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001226:	4b8d      	ldr	r3, [pc, #564]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d06c      	beq.n	800130c <HAL_RCC_OscConfig+0x130>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d168      	bne.n	800130c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e26b      	b.n	8001716 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001246:	d106      	bne.n	8001256 <HAL_RCC_OscConfig+0x7a>
 8001248:	4b84      	ldr	r3, [pc, #528]	; (800145c <HAL_RCC_OscConfig+0x280>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a83      	ldr	r2, [pc, #524]	; (800145c <HAL_RCC_OscConfig+0x280>)
 800124e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	e02e      	b.n	80012b4 <HAL_RCC_OscConfig+0xd8>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x9c>
 800125e:	4b7f      	ldr	r3, [pc, #508]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a7e      	ldr	r2, [pc, #504]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b7c      	ldr	r3, [pc, #496]	; (800145c <HAL_RCC_OscConfig+0x280>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a7b      	ldr	r2, [pc, #492]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e01d      	b.n	80012b4 <HAL_RCC_OscConfig+0xd8>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0xc0>
 8001282:	4b76      	ldr	r3, [pc, #472]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a75      	ldr	r2, [pc, #468]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b73      	ldr	r3, [pc, #460]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a72      	ldr	r2, [pc, #456]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e00b      	b.n	80012b4 <HAL_RCC_OscConfig+0xd8>
 800129c:	4b6f      	ldr	r3, [pc, #444]	; (800145c <HAL_RCC_OscConfig+0x280>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a6e      	ldr	r2, [pc, #440]	; (800145c <HAL_RCC_OscConfig+0x280>)
 80012a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b6c      	ldr	r3, [pc, #432]	; (800145c <HAL_RCC_OscConfig+0x280>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a6b      	ldr	r2, [pc, #428]	; (800145c <HAL_RCC_OscConfig+0x280>)
 80012ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d013      	beq.n	80012e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012bc:	f7ff fcc2 	bl	8000c44 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fcbe 	bl	8000c44 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e21f      	b.n	8001716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d6:	4b61      	ldr	r3, [pc, #388]	; (800145c <HAL_RCC_OscConfig+0x280>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0xe8>
 80012e2:	e014      	b.n	800130e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fcae 	bl	8000c44 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fcaa 	bl	8000c44 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e20b      	b.n	8001716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fe:	4b57      	ldr	r3, [pc, #348]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x110>
 800130a:	e000      	b.n	800130e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d069      	beq.n	80013ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800131a:	4b50      	ldr	r3, [pc, #320]	; (800145c <HAL_RCC_OscConfig+0x280>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001326:	4b4d      	ldr	r3, [pc, #308]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b08      	cmp	r3, #8
 8001330:	d11c      	bne.n	800136c <HAL_RCC_OscConfig+0x190>
 8001332:	4b4a      	ldr	r3, [pc, #296]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d116      	bne.n	800136c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	4b47      	ldr	r3, [pc, #284]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d005      	beq.n	8001356 <HAL_RCC_OscConfig+0x17a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e1df      	b.n	8001716 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001356:	4b41      	ldr	r3, [pc, #260]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	493d      	ldr	r1, [pc, #244]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	e040      	b.n	80013ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d023      	beq.n	80013bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001374:	4b39      	ldr	r3, [pc, #228]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a38      	ldr	r2, [pc, #224]	; (800145c <HAL_RCC_OscConfig+0x280>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff fc60 	bl	8000c44 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001388:	f7ff fc5c 	bl	8000c44 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e1bd      	b.n	8001716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139a:	4b30      	ldr	r3, [pc, #192]	; (800145c <HAL_RCC_OscConfig+0x280>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a6:	4b2d      	ldr	r3, [pc, #180]	; (800145c <HAL_RCC_OscConfig+0x280>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4929      	ldr	r1, [pc, #164]	; (800145c <HAL_RCC_OscConfig+0x280>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
 80013ba:	e018      	b.n	80013ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <HAL_RCC_OscConfig+0x280>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a26      	ldr	r2, [pc, #152]	; (800145c <HAL_RCC_OscConfig+0x280>)
 80013c2:	f023 0301 	bic.w	r3, r3, #1
 80013c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c8:	f7ff fc3c 	bl	8000c44 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d0:	f7ff fc38 	bl	8000c44 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e199      	b.n	8001716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <HAL_RCC_OscConfig+0x280>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d038      	beq.n	800146c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d019      	beq.n	8001436 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001406:	4a15      	ldr	r2, [pc, #84]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140e:	f7ff fc19 	bl	8000c44 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001416:	f7ff fc15 	bl	8000c44 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e176      	b.n	8001716 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_RCC_OscConfig+0x280>)
 800142a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x23a>
 8001434:	e01a      	b.n	800146c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_RCC_OscConfig+0x280>)
 8001438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_RCC_OscConfig+0x280>)
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001442:	f7ff fbff 	bl	8000c44 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001448:	e00a      	b.n	8001460 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144a:	f7ff fbfb 	bl	8000c44 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d903      	bls.n	8001460 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e15c      	b.n	8001716 <HAL_RCC_OscConfig+0x53a>
 800145c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	4b91      	ldr	r3, [pc, #580]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 8001462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1ee      	bne.n	800144a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80a4 	beq.w	80015c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147a:	4b8b      	ldr	r3, [pc, #556]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10d      	bne.n	80014a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a87      	ldr	r2, [pc, #540]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b85      	ldr	r3, [pc, #532]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149e:	2301      	movs	r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a2:	4b82      	ldr	r3, [pc, #520]	; (80016ac <HAL_RCC_OscConfig+0x4d0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d118      	bne.n	80014e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014ae:	4b7f      	ldr	r3, [pc, #508]	; (80016ac <HAL_RCC_OscConfig+0x4d0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a7e      	ldr	r2, [pc, #504]	; (80016ac <HAL_RCC_OscConfig+0x4d0>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fbc3 	bl	8000c44 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c2:	f7ff fbbf 	bl	8000c44 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b64      	cmp	r3, #100	; 0x64
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e120      	b.n	8001716 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d4:	4b75      	ldr	r3, [pc, #468]	; (80016ac <HAL_RCC_OscConfig+0x4d0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d106      	bne.n	80014f6 <HAL_RCC_OscConfig+0x31a>
 80014e8:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	4a6e      	ldr	r2, [pc, #440]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6713      	str	r3, [r2, #112]	; 0x70
 80014f4:	e02d      	b.n	8001552 <HAL_RCC_OscConfig+0x376>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x33c>
 80014fe:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001502:	4a69      	ldr	r2, [pc, #420]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	6713      	str	r3, [r2, #112]	; 0x70
 800150a:	4b67      	ldr	r3, [pc, #412]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150e:	4a66      	ldr	r2, [pc, #408]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 8001510:	f023 0304 	bic.w	r3, r3, #4
 8001514:	6713      	str	r3, [r2, #112]	; 0x70
 8001516:	e01c      	b.n	8001552 <HAL_RCC_OscConfig+0x376>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b05      	cmp	r3, #5
 800151e:	d10c      	bne.n	800153a <HAL_RCC_OscConfig+0x35e>
 8001520:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001524:	4a60      	ldr	r2, [pc, #384]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	6713      	str	r3, [r2, #112]	; 0x70
 800152c:	4b5e      	ldr	r3, [pc, #376]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001530:	4a5d      	ldr	r2, [pc, #372]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6713      	str	r3, [r2, #112]	; 0x70
 8001538:	e00b      	b.n	8001552 <HAL_RCC_OscConfig+0x376>
 800153a:	4b5b      	ldr	r3, [pc, #364]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153e:	4a5a      	ldr	r2, [pc, #360]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	6713      	str	r3, [r2, #112]	; 0x70
 8001546:	4b58      	ldr	r3, [pc, #352]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	4a57      	ldr	r2, [pc, #348]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 800154c:	f023 0304 	bic.w	r3, r3, #4
 8001550:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d015      	beq.n	8001586 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155a:	f7ff fb73 	bl	8000c44 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001560:	e00a      	b.n	8001578 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001562:	f7ff fb6f 	bl	8000c44 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001570:	4293      	cmp	r3, r2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e0ce      	b.n	8001716 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001578:	4b4b      	ldr	r3, [pc, #300]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 800157a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0ee      	beq.n	8001562 <HAL_RCC_OscConfig+0x386>
 8001584:	e014      	b.n	80015b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001586:	f7ff fb5d 	bl	8000c44 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158e:	f7ff fb59 	bl	8000c44 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f241 3288 	movw	r2, #5000	; 0x1388
 800159c:	4293      	cmp	r3, r2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e0b8      	b.n	8001716 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a4:	4b40      	ldr	r3, [pc, #256]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ee      	bne.n	800158e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d105      	bne.n	80015c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b6:	4b3c      	ldr	r3, [pc, #240]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a3b      	ldr	r2, [pc, #236]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 80015bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 80a4 	beq.w	8001714 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015cc:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d06b      	beq.n	80016b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d149      	bne.n	8001674 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e0:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a30      	ldr	r2, [pc, #192]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 80015e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fb2a 	bl	8000c44 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fb26 	bl	8000c44 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e087      	b.n	8001716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69da      	ldr	r2, [r3, #28]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	019b      	lsls	r3, r3, #6
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	3b01      	subs	r3, #1
 800162c:	041b      	lsls	r3, r3, #16
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	061b      	lsls	r3, r3, #24
 8001636:	4313      	orrs	r3, r2
 8001638:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 800163a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800163e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 8001646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fafa 	bl	8000c44 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001654:	f7ff faf6 	bl	8000c44 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e057      	b.n	8001716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x478>
 8001672:	e04f      	b.n	8001714 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 800167a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800167e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fae0 	bl	8000c44 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fadc 	bl	8000c44 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e03d      	b.n	8001716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169a:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x4ac>
 80016a6:	e035      	b.n	8001714 <HAL_RCC_OscConfig+0x538>
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_RCC_OscConfig+0x544>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d028      	beq.n	8001710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d121      	bne.n	8001710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d11a      	bne.n	8001710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e0:	4013      	ands	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d111      	bne.n	8001710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d107      	bne.n	8001710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0d0      	b.n	80018de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b6a      	ldr	r3, [pc, #424]	; (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 030f 	and.w	r3, r3, #15
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d910      	bls.n	800176c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b67      	ldr	r3, [pc, #412]	; (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 020f 	bic.w	r2, r3, #15
 8001752:	4965      	ldr	r1, [pc, #404]	; (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0b8      	b.n	80018de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d020      	beq.n	80017ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001784:	4b59      	ldr	r3, [pc, #356]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a58      	ldr	r2, [pc, #352]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 800178a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800178e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800179c:	4b53      	ldr	r3, [pc, #332]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a52      	ldr	r2, [pc, #328]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80017a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a8:	4b50      	ldr	r3, [pc, #320]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	494d      	ldr	r1, [pc, #308]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d040      	beq.n	8001848 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b47      	ldr	r3, [pc, #284]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d115      	bne.n	8001806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e07f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b41      	ldr	r3, [pc, #260]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e073      	b.n	80018de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b3d      	ldr	r3, [pc, #244]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e06b      	b.n	80018de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001806:	4b39      	ldr	r3, [pc, #228]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4936      	ldr	r1, [pc, #216]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001818:	f7ff fa14 	bl	8000c44 <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	e00a      	b.n	8001836 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff fa10 	bl	8000c44 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e053      	b.n	80018de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 020c 	and.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d1eb      	bne.n	8001820 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d210      	bcs.n	8001878 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 020f 	bic.w	r2, r3, #15
 800185e:	4922      	ldr	r1, [pc, #136]	; (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	4313      	orrs	r3, r2
 8001864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e032      	b.n	80018de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4916      	ldr	r1, [pc, #88]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	490e      	ldr	r1, [pc, #56]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018b6:	f000 f821 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 80018ba:	4602      	mov	r2, r0
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	490a      	ldr	r1, [pc, #40]	; (80018f0 <HAL_RCC_ClockConfig+0x1cc>)
 80018c8:	5ccb      	ldrb	r3, [r1, r3]
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1d0>)
 80018d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_RCC_ClockConfig+0x1d4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f8e0 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023c00 	.word	0x40023c00
 80018ec:	40023800 	.word	0x40023800
 80018f0:	08005c84 	.word	0x08005c84
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000004 	.word	0x20000004

080018fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018fc:	b5b0      	push	{r4, r5, r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001902:	2100      	movs	r1, #0
 8001904:	6079      	str	r1, [r7, #4]
 8001906:	2100      	movs	r1, #0
 8001908:	60f9      	str	r1, [r7, #12]
 800190a:	2100      	movs	r1, #0
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800190e:	2100      	movs	r1, #0
 8001910:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001912:	4952      	ldr	r1, [pc, #328]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8001914:	6889      	ldr	r1, [r1, #8]
 8001916:	f001 010c 	and.w	r1, r1, #12
 800191a:	2908      	cmp	r1, #8
 800191c:	d00d      	beq.n	800193a <HAL_RCC_GetSysClockFreq+0x3e>
 800191e:	2908      	cmp	r1, #8
 8001920:	f200 8094 	bhi.w	8001a4c <HAL_RCC_GetSysClockFreq+0x150>
 8001924:	2900      	cmp	r1, #0
 8001926:	d002      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x32>
 8001928:	2904      	cmp	r1, #4
 800192a:	d003      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x38>
 800192c:	e08e      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800192e:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x164>)
 8001930:	60bb      	str	r3, [r7, #8]
      break;
 8001932:	e08e      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001934:	4b4b      	ldr	r3, [pc, #300]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x168>)
 8001936:	60bb      	str	r3, [r7, #8]
      break;
 8001938:	e08b      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800193a:	4948      	ldr	r1, [pc, #288]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x160>)
 800193c:	6849      	ldr	r1, [r1, #4]
 800193e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001942:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001944:	4945      	ldr	r1, [pc, #276]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8001946:	6849      	ldr	r1, [r1, #4]
 8001948:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800194c:	2900      	cmp	r1, #0
 800194e:	d024      	beq.n	800199a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001950:	4942      	ldr	r1, [pc, #264]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8001952:	6849      	ldr	r1, [r1, #4]
 8001954:	0989      	lsrs	r1, r1, #6
 8001956:	4608      	mov	r0, r1
 8001958:	f04f 0100 	mov.w	r1, #0
 800195c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001960:	f04f 0500 	mov.w	r5, #0
 8001964:	ea00 0204 	and.w	r2, r0, r4
 8001968:	ea01 0305 	and.w	r3, r1, r5
 800196c:	493d      	ldr	r1, [pc, #244]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x168>)
 800196e:	fb01 f003 	mul.w	r0, r1, r3
 8001972:	2100      	movs	r1, #0
 8001974:	fb01 f102 	mul.w	r1, r1, r2
 8001978:	1844      	adds	r4, r0, r1
 800197a:	493a      	ldr	r1, [pc, #232]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x168>)
 800197c:	fba2 0101 	umull	r0, r1, r2, r1
 8001980:	1863      	adds	r3, r4, r1
 8001982:	4619      	mov	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	461a      	mov	r2, r3
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	f7fe fc48 	bl	8000220 <__aeabi_uldivmod>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4613      	mov	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e04a      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199a:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x160>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	099b      	lsrs	r3, r3, #6
 80019a0:	461a      	mov	r2, r3
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019aa:	f04f 0100 	mov.w	r1, #0
 80019ae:	ea02 0400 	and.w	r4, r2, r0
 80019b2:	ea03 0501 	and.w	r5, r3, r1
 80019b6:	4620      	mov	r0, r4
 80019b8:	4629      	mov	r1, r5
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	014b      	lsls	r3, r1, #5
 80019c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019c8:	0142      	lsls	r2, r0, #5
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	1b00      	subs	r0, r0, r4
 80019d0:	eb61 0105 	sbc.w	r1, r1, r5
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	018b      	lsls	r3, r1, #6
 80019de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019e2:	0182      	lsls	r2, r0, #6
 80019e4:	1a12      	subs	r2, r2, r0
 80019e6:	eb63 0301 	sbc.w	r3, r3, r1
 80019ea:	f04f 0000 	mov.w	r0, #0
 80019ee:	f04f 0100 	mov.w	r1, #0
 80019f2:	00d9      	lsls	r1, r3, #3
 80019f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019f8:	00d0      	lsls	r0, r2, #3
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	1912      	adds	r2, r2, r4
 8001a00:	eb45 0303 	adc.w	r3, r5, r3
 8001a04:	f04f 0000 	mov.w	r0, #0
 8001a08:	f04f 0100 	mov.w	r1, #0
 8001a0c:	0299      	lsls	r1, r3, #10
 8001a0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a12:	0290      	lsls	r0, r2, #10
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	f7fe fbfc 	bl	8000220 <__aeabi_uldivmod>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a30:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a48:	60bb      	str	r3, [r7, #8]
      break;
 8001a4a:	e002      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x164>)
 8001a4e:	60bb      	str	r3, [r7, #8]
      break;
 8001a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a52:	68bb      	ldr	r3, [r7, #8]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	00f42400 	.word	0x00f42400
 8001a64:	017d7840 	.word	0x017d7840

08001a68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000000 	.word	0x20000000

08001a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a84:	f7ff fff0 	bl	8001a68 <HAL_RCC_GetHCLKFreq>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	0a9b      	lsrs	r3, r3, #10
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	4903      	ldr	r1, [pc, #12]	; (8001aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a96:	5ccb      	ldrb	r3, [r1, r3]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	08005c94 	.word	0x08005c94

08001aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aac:	f7ff ffdc 	bl	8001a68 <HAL_RCC_GetHCLKFreq>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	0b5b      	lsrs	r3, r3, #13
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	4903      	ldr	r1, [pc, #12]	; (8001acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001abe:	5ccb      	ldrb	r3, [r1, r3]
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	08005c94 	.word	0x08005c94

08001ad0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	220f      	movs	r2, #15
 8001ade:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_RCC_GetClockConfig+0x5c>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_RCC_GetClockConfig+0x5c>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_RCC_GetClockConfig+0x5c>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_RCC_GetClockConfig+0x5c>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	08db      	lsrs	r3, r3, #3
 8001b0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <HAL_RCC_GetClockConfig+0x60>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 020f 	and.w	r2, r3, #15
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	601a      	str	r2, [r3, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40023c00 	.word	0x40023c00

08001b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d012      	beq.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b5c:	4b69      	ldr	r3, [pc, #420]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4a68      	ldr	r2, [pc, #416]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b66:	6093      	str	r3, [r2, #8]
 8001b68:	4b66      	ldr	r3, [pc, #408]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b70:	4964      	ldr	r1, [pc, #400]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d017      	beq.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b8e:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9c:	4959      	ldr	r1, [pc, #356]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d017      	beq.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001bca:	4b4e      	ldr	r3, [pc, #312]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	494a      	ldr	r1, [pc, #296]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001be8:	d101      	bne.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001bea:	2301      	movs	r3, #1
 8001bec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001c06:	2301      	movs	r3, #1
 8001c08:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0320 	and.w	r3, r3, #32
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 808b 	beq.w	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c18:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	4a39      	ldr	r2, [pc, #228]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c22:	6413      	str	r3, [r2, #64]	; 0x40
 8001c24:	4b37      	ldr	r3, [pc, #220]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c30:	4b35      	ldr	r3, [pc, #212]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a34      	ldr	r2, [pc, #208]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c3c:	f7ff f802 	bl	8000c44 <HAL_GetTick>
 8001c40:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c44:	f7fe fffe 	bl	8000c44 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	; 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e357      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c56:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c62:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c6a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d035      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d02e      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c80:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c88:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8e:	4a1d      	ldr	r2, [pc, #116]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c96:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9a:	4a1a      	ldr	r2, [pc, #104]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001ca2:	4a18      	ldr	r2, [pc, #96]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d114      	bne.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7fe ffc6 	bl	8000c44 <HAL_GetTick>
 8001cb8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cbc:	f7fe ffc2 	bl	8000c44 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e319      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0ee      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001cea:	d111      	bne.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cfa:	400b      	ands	r3, r1
 8001cfc:	4901      	ldr	r1, [pc, #4]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
 8001d02:	e00b      	b.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40007000 	.word	0x40007000
 8001d0c:	0ffffcff 	.word	0x0ffffcff
 8001d10:	4bb1      	ldr	r3, [pc, #708]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4ab0      	ldr	r2, [pc, #704]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d1a:	6093      	str	r3, [r2, #8]
 8001d1c:	4bae      	ldr	r3, [pc, #696]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d28:	49ab      	ldr	r1, [pc, #684]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d010      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d3a:	4ba7      	ldr	r3, [pc, #668]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d40:	4aa5      	ldr	r2, [pc, #660]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d4a:	4ba3      	ldr	r3, [pc, #652]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d54:	49a0      	ldr	r1, [pc, #640]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00a      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d68:	4b9b      	ldr	r3, [pc, #620]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d76:	4998      	ldr	r1, [pc, #608]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00a      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d8a:	4b93      	ldr	r3, [pc, #588]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d98:	498f      	ldr	r1, [pc, #572]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00a      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001dac:	4b8a      	ldr	r3, [pc, #552]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dba:	4987      	ldr	r1, [pc, #540]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00a      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001dce:	4b82      	ldr	r3, [pc, #520]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	497e      	ldr	r1, [pc, #504]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00a      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001df0:	4b79      	ldr	r3, [pc, #484]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df6:	f023 0203 	bic.w	r2, r3, #3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4976      	ldr	r1, [pc, #472]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00a      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e12:	4b71      	ldr	r3, [pc, #452]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e18:	f023 020c 	bic.w	r2, r3, #12
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e20:	496d      	ldr	r1, [pc, #436]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00a      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e34:	4b68      	ldr	r3, [pc, #416]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e42:	4965      	ldr	r1, [pc, #404]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00a      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e56:	4b60      	ldr	r3, [pc, #384]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e64:	495c      	ldr	r1, [pc, #368]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00a      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e78:	4b57      	ldr	r3, [pc, #348]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e86:	4954      	ldr	r1, [pc, #336]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00a      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001e9a:	4b4f      	ldr	r3, [pc, #316]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	494b      	ldr	r1, [pc, #300]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00a      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ebc:	4b46      	ldr	r3, [pc, #280]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eca:	4943      	ldr	r1, [pc, #268]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00a      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001ede:	4b3e      	ldr	r3, [pc, #248]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eec:	493a      	ldr	r1, [pc, #232]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00a      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f00:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f0e:	4932      	ldr	r1, [pc, #200]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d011      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f22:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f28:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f30:	4929      	ldr	r1, [pc, #164]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f40:	d101      	bne.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001f42:	2301      	movs	r3, #1
 8001f44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f62:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f70:	4919      	ldr	r1, [pc, #100]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00b      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f84:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f94:	4910      	ldr	r1, [pc, #64]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d006      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80d9 	beq.w	8002162 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fbc:	f7fe fe42 	bl	8000c44 <HAL_GetTick>
 8001fc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fc2:	e00b      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001fc4:	f7fe fe3e 	bl	8000c44 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	; 0x64
 8001fd0:	d904      	bls.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e197      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fdc:	4b6c      	ldr	r3, [pc, #432]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1ed      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d021      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d11d      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ffc:	4b64      	ldr	r3, [pc, #400]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002002:	0c1b      	lsrs	r3, r3, #16
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800200a:	4b61      	ldr	r3, [pc, #388]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800200c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002010:	0e1b      	lsrs	r3, r3, #24
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	019a      	lsls	r2, r3, #6
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	041b      	lsls	r3, r3, #16
 8002022:	431a      	orrs	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	061b      	lsls	r3, r3, #24
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	071b      	lsls	r3, r3, #28
 8002030:	4957      	ldr	r1, [pc, #348]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d004      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800204c:	d00a      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002056:	2b00      	cmp	r3, #0
 8002058:	d02e      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002062:	d129      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002064:	4b4a      	ldr	r3, [pc, #296]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800206a:	0c1b      	lsrs	r3, r3, #16
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002072:	4b47      	ldr	r3, [pc, #284]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002078:	0f1b      	lsrs	r3, r3, #28
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	019a      	lsls	r2, r3, #6
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	041b      	lsls	r3, r3, #16
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	061b      	lsls	r3, r3, #24
 8002092:	431a      	orrs	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	071b      	lsls	r3, r3, #28
 8002098:	493d      	ldr	r1, [pc, #244]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80020a0:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020a6:	f023 021f 	bic.w	r2, r3, #31
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	3b01      	subs	r3, #1
 80020b0:	4937      	ldr	r1, [pc, #220]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d01d      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020c4:	4b32      	ldr	r3, [pc, #200]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ca:	0e1b      	lsrs	r3, r3, #24
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020d2:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020d8:	0f1b      	lsrs	r3, r3, #28
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	019a      	lsls	r2, r3, #6
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	041b      	lsls	r3, r3, #16
 80020ec:	431a      	orrs	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	061b      	lsls	r3, r3, #24
 80020f2:	431a      	orrs	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	071b      	lsls	r3, r3, #28
 80020f8:	4925      	ldr	r1, [pc, #148]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d011      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	019a      	lsls	r2, r3, #6
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	041b      	lsls	r3, r3, #16
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	061b      	lsls	r3, r3, #24
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	071b      	lsls	r3, r3, #28
 8002128:	4919      	ldr	r1, [pc, #100]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002130:	4b17      	ldr	r3, [pc, #92]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a16      	ldr	r2, [pc, #88]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002136:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800213a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800213c:	f7fe fd82 	bl	8000c44 <HAL_GetTick>
 8002140:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002144:	f7fe fd7e 	bl	8000c44 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e0d7      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002156:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	2b01      	cmp	r3, #1
 8002166:	f040 80cd 	bne.w	8002304 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a08      	ldr	r2, [pc, #32]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002176:	f7fe fd65 	bl	8000c44 <HAL_GetTick>
 800217a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800217c:	e00a      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800217e:	f7fe fd61 	bl	8000c44 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b64      	cmp	r3, #100	; 0x64
 800218a:	d903      	bls.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e0ba      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002190:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002194:	4b5e      	ldr	r3, [pc, #376]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800219c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021a0:	d0ed      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d02e      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d12a      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80021ca:	4b51      	ldr	r3, [pc, #324]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80021d8:	4b4d      	ldr	r3, [pc, #308]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	0f1b      	lsrs	r3, r3, #28
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	019a      	lsls	r2, r3, #6
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	041b      	lsls	r3, r3, #16
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	061b      	lsls	r3, r3, #24
 80021f8:	431a      	orrs	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	071b      	lsls	r3, r3, #28
 80021fe:	4944      	ldr	r1, [pc, #272]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002206:	4b42      	ldr	r3, [pc, #264]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800220c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	3b01      	subs	r3, #1
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	493d      	ldr	r1, [pc, #244]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d022      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002234:	d11d      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002236:	4b36      	ldr	r3, [pc, #216]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223c:	0e1b      	lsrs	r3, r3, #24
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002244:	4b32      	ldr	r3, [pc, #200]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	0f1b      	lsrs	r3, r3, #28
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	019a      	lsls	r2, r3, #6
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	041b      	lsls	r3, r3, #16
 800225e:	431a      	orrs	r2, r3
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	061b      	lsls	r3, r3, #24
 8002264:	431a      	orrs	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	071b      	lsls	r3, r3, #28
 800226a:	4929      	ldr	r1, [pc, #164]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d028      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800227e:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002284:	0e1b      	lsrs	r3, r3, #24
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800228c:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	0c1b      	lsrs	r3, r3, #16
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	019a      	lsls	r2, r3, #6
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	041b      	lsls	r3, r3, #16
 80022a4:	431a      	orrs	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	061b      	lsls	r3, r3, #24
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	071b      	lsls	r3, r3, #28
 80022b2:	4917      	ldr	r1, [pc, #92]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c8:	4911      	ldr	r1, [pc, #68]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022dc:	f7fe fcb2 	bl	8000c44 <HAL_GetTick>
 80022e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022e4:	f7fe fcae 	bl	8000c44 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	; 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e007      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002302:	d1ef      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3720      	adds	r7, #32
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800

08002314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e049      	b.n	80023ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f841 	bl	80023c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3304      	adds	r3, #4
 8002350:	4619      	mov	r1, r3
 8002352:	4610      	mov	r0, r2
 8002354:	f000 fa00 	bl	8002758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d001      	beq.n	80023f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e054      	b.n	800249a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d022      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x80>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241a:	d01d      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x80>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a22      	ldr	r2, [pc, #136]	; (80024ac <HAL_TIM_Base_Start_IT+0xd4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d018      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x80>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a21      	ldr	r2, [pc, #132]	; (80024b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d013      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x80>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1f      	ldr	r2, [pc, #124]	; (80024b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d00e      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x80>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1e      	ldr	r2, [pc, #120]	; (80024b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d009      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x80>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <HAL_TIM_Base_Start_IT+0xe4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d004      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x80>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d115      	bne.n	8002484 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_TIM_Base_Start_IT+0xec>)
 8002460:	4013      	ands	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b06      	cmp	r3, #6
 8002468:	d015      	beq.n	8002496 <HAL_TIM_Base_Start_IT+0xbe>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002470:	d011      	beq.n	8002496 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0201 	orr.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002482:	e008      	b.n	8002496 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e000      	b.n	8002498 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002496:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40010000 	.word	0x40010000
 80024ac:	40000400 	.word	0x40000400
 80024b0:	40000800 	.word	0x40000800
 80024b4:	40000c00 	.word	0x40000c00
 80024b8:	40010400 	.word	0x40010400
 80024bc:	40014000 	.word	0x40014000
 80024c0:	40001800 	.word	0x40001800
 80024c4:	00010007 	.word	0x00010007

080024c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d122      	bne.n	8002524 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d11b      	bne.n	8002524 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0202 	mvn.w	r2, #2
 80024f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f905 	bl	800271a <HAL_TIM_IC_CaptureCallback>
 8002510:	e005      	b.n	800251e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f8f7 	bl	8002706 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f908 	bl	800272e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b04      	cmp	r3, #4
 8002530:	d122      	bne.n	8002578 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b04      	cmp	r3, #4
 800253e:	d11b      	bne.n	8002578 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0204 	mvn.w	r2, #4
 8002548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2202      	movs	r2, #2
 800254e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f8db 	bl	800271a <HAL_TIM_IC_CaptureCallback>
 8002564:	e005      	b.n	8002572 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f8cd 	bl	8002706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f8de 	bl	800272e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b08      	cmp	r3, #8
 8002584:	d122      	bne.n	80025cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b08      	cmp	r3, #8
 8002592:	d11b      	bne.n	80025cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0208 	mvn.w	r2, #8
 800259c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2204      	movs	r2, #4
 80025a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f8b1 	bl	800271a <HAL_TIM_IC_CaptureCallback>
 80025b8:	e005      	b.n	80025c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f8a3 	bl	8002706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f8b4 	bl	800272e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d122      	bne.n	8002620 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b10      	cmp	r3, #16
 80025e6:	d11b      	bne.n	8002620 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0210 	mvn.w	r2, #16
 80025f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2208      	movs	r2, #8
 80025f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f887 	bl	800271a <HAL_TIM_IC_CaptureCallback>
 800260c:	e005      	b.n	800261a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f879 	bl	8002706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f88a 	bl	800272e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b01      	cmp	r3, #1
 800262c:	d10e      	bne.n	800264c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	d107      	bne.n	800264c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0201 	mvn.w	r2, #1
 8002644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe f98a 	bl	8000960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002656:	2b80      	cmp	r3, #128	; 0x80
 8002658:	d10e      	bne.n	8002678 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002664:	2b80      	cmp	r3, #128	; 0x80
 8002666:	d107      	bne.n	8002678 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f91a 	bl	80028ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002686:	d10e      	bne.n	80026a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	2b80      	cmp	r3, #128	; 0x80
 8002694:	d107      	bne.n	80026a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800269e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f90d 	bl	80028c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b0:	2b40      	cmp	r3, #64	; 0x40
 80026b2:	d10e      	bne.n	80026d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026be:	2b40      	cmp	r3, #64	; 0x40
 80026c0:	d107      	bne.n	80026d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f838 	bl	8002742 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d10e      	bne.n	80026fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d107      	bne.n	80026fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f06f 0220 	mvn.w	r2, #32
 80026f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f8cd 	bl	8002898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a40      	ldr	r2, [pc, #256]	; (800286c <TIM_Base_SetConfig+0x114>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d013      	beq.n	8002798 <TIM_Base_SetConfig+0x40>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002776:	d00f      	beq.n	8002798 <TIM_Base_SetConfig+0x40>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a3d      	ldr	r2, [pc, #244]	; (8002870 <TIM_Base_SetConfig+0x118>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00b      	beq.n	8002798 <TIM_Base_SetConfig+0x40>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a3c      	ldr	r2, [pc, #240]	; (8002874 <TIM_Base_SetConfig+0x11c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d007      	beq.n	8002798 <TIM_Base_SetConfig+0x40>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a3b      	ldr	r2, [pc, #236]	; (8002878 <TIM_Base_SetConfig+0x120>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d003      	beq.n	8002798 <TIM_Base_SetConfig+0x40>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a3a      	ldr	r2, [pc, #232]	; (800287c <TIM_Base_SetConfig+0x124>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d108      	bne.n	80027aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a2f      	ldr	r2, [pc, #188]	; (800286c <TIM_Base_SetConfig+0x114>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d02b      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b8:	d027      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a2c      	ldr	r2, [pc, #176]	; (8002870 <TIM_Base_SetConfig+0x118>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d023      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a2b      	ldr	r2, [pc, #172]	; (8002874 <TIM_Base_SetConfig+0x11c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d01f      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a2a      	ldr	r2, [pc, #168]	; (8002878 <TIM_Base_SetConfig+0x120>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01b      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a29      	ldr	r2, [pc, #164]	; (800287c <TIM_Base_SetConfig+0x124>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d017      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a28      	ldr	r2, [pc, #160]	; (8002880 <TIM_Base_SetConfig+0x128>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a27      	ldr	r2, [pc, #156]	; (8002884 <TIM_Base_SetConfig+0x12c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00f      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a26      	ldr	r2, [pc, #152]	; (8002888 <TIM_Base_SetConfig+0x130>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00b      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a25      	ldr	r2, [pc, #148]	; (800288c <TIM_Base_SetConfig+0x134>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d007      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a24      	ldr	r2, [pc, #144]	; (8002890 <TIM_Base_SetConfig+0x138>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d003      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a23      	ldr	r2, [pc, #140]	; (8002894 <TIM_Base_SetConfig+0x13c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d108      	bne.n	800281c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a0a      	ldr	r2, [pc, #40]	; (800286c <TIM_Base_SetConfig+0x114>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d003      	beq.n	8002850 <TIM_Base_SetConfig+0xf8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a0c      	ldr	r2, [pc, #48]	; (800287c <TIM_Base_SetConfig+0x124>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d103      	bne.n	8002858 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	615a      	str	r2, [r3, #20]
}
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40010000 	.word	0x40010000
 8002870:	40000400 	.word	0x40000400
 8002874:	40000800 	.word	0x40000800
 8002878:	40000c00 	.word	0x40000c00
 800287c:	40010400 	.word	0x40010400
 8002880:	40014000 	.word	0x40014000
 8002884:	40014400 	.word	0x40014400
 8002888:	40014800 	.word	0x40014800
 800288c:	40001800 	.word	0x40001800
 8002890:	40001c00 	.word	0x40001c00
 8002894:	40002000 	.word	0x40002000

08002898 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e040      	b.n	8002968 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe f872 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2224      	movs	r2, #36	; 0x24
 8002900:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0201 	bic.w	r2, r2, #1
 8002910:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f8c0 	bl	8002a98 <UART_SetConfig>
 8002918:	4603      	mov	r3, r0
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e022      	b.n	8002968 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fb16 	bl	8002f5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800293e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800294e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 fb9d 	bl	80030a0 <UART_CheckIdleState>
 8002966:	4603      	mov	r3, r0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af02      	add	r7, sp, #8
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002984:	2b20      	cmp	r3, #32
 8002986:	f040 8081 	bne.w	8002a8c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_UART_Transmit+0x26>
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e079      	b.n	8002a8e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_UART_Transmit+0x38>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e072      	b.n	8002a8e <HAL_UART_Transmit+0x11e>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2221      	movs	r2, #33	; 0x21
 80029bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029be:	f7fe f941 	bl	8000c44 <HAL_GetTick>
 80029c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	88fa      	ldrh	r2, [r7, #6]
 80029c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	88fa      	ldrh	r2, [r7, #6]
 80029d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029dc:	d108      	bne.n	80029f0 <HAL_UART_Transmit+0x80>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d104      	bne.n	80029f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	e003      	b.n	80029f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002a00:	e02c      	b.n	8002a5c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2180      	movs	r1, #128	; 0x80
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 fb7a 	bl	8003106 <UART_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e038      	b.n	8002a8e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10b      	bne.n	8002a3a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	3302      	adds	r3, #2
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	e007      	b.n	8002a4a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	781a      	ldrb	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	3301      	adds	r3, #1
 8002a48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1cc      	bne.n	8002a02 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2140      	movs	r1, #64	; 0x40
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 fb47 	bl	8003106 <UART_WaitOnFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e005      	b.n	8002a8e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
  }
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3720      	adds	r7, #32
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4ba7      	ldr	r3, [pc, #668]	; (8002d60 <UART_SetConfig+0x2c8>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	6979      	ldr	r1, [r7, #20]
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a95      	ldr	r2, [pc, #596]	; (8002d64 <UART_SetConfig+0x2cc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d120      	bne.n	8002b56 <UART_SetConfig+0xbe>
 8002b14:	4b94      	ldr	r3, [pc, #592]	; (8002d68 <UART_SetConfig+0x2d0>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d816      	bhi.n	8002b50 <UART_SetConfig+0xb8>
 8002b22:	a201      	add	r2, pc, #4	; (adr r2, 8002b28 <UART_SetConfig+0x90>)
 8002b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b28:	08002b39 	.word	0x08002b39
 8002b2c:	08002b45 	.word	0x08002b45
 8002b30:	08002b3f 	.word	0x08002b3f
 8002b34:	08002b4b 	.word	0x08002b4b
 8002b38:	2301      	movs	r3, #1
 8002b3a:	77fb      	strb	r3, [r7, #31]
 8002b3c:	e14f      	b.n	8002dde <UART_SetConfig+0x346>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	77fb      	strb	r3, [r7, #31]
 8002b42:	e14c      	b.n	8002dde <UART_SetConfig+0x346>
 8002b44:	2304      	movs	r3, #4
 8002b46:	77fb      	strb	r3, [r7, #31]
 8002b48:	e149      	b.n	8002dde <UART_SetConfig+0x346>
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	77fb      	strb	r3, [r7, #31]
 8002b4e:	e146      	b.n	8002dde <UART_SetConfig+0x346>
 8002b50:	2310      	movs	r3, #16
 8002b52:	77fb      	strb	r3, [r7, #31]
 8002b54:	e143      	b.n	8002dde <UART_SetConfig+0x346>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a84      	ldr	r2, [pc, #528]	; (8002d6c <UART_SetConfig+0x2d4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d132      	bne.n	8002bc6 <UART_SetConfig+0x12e>
 8002b60:	4b81      	ldr	r3, [pc, #516]	; (8002d68 <UART_SetConfig+0x2d0>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d828      	bhi.n	8002bc0 <UART_SetConfig+0x128>
 8002b6e:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <UART_SetConfig+0xdc>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002ba9 	.word	0x08002ba9
 8002b78:	08002bc1 	.word	0x08002bc1
 8002b7c:	08002bc1 	.word	0x08002bc1
 8002b80:	08002bc1 	.word	0x08002bc1
 8002b84:	08002bb5 	.word	0x08002bb5
 8002b88:	08002bc1 	.word	0x08002bc1
 8002b8c:	08002bc1 	.word	0x08002bc1
 8002b90:	08002bc1 	.word	0x08002bc1
 8002b94:	08002baf 	.word	0x08002baf
 8002b98:	08002bc1 	.word	0x08002bc1
 8002b9c:	08002bc1 	.word	0x08002bc1
 8002ba0:	08002bc1 	.word	0x08002bc1
 8002ba4:	08002bbb 	.word	0x08002bbb
 8002ba8:	2300      	movs	r3, #0
 8002baa:	77fb      	strb	r3, [r7, #31]
 8002bac:	e117      	b.n	8002dde <UART_SetConfig+0x346>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	77fb      	strb	r3, [r7, #31]
 8002bb2:	e114      	b.n	8002dde <UART_SetConfig+0x346>
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	77fb      	strb	r3, [r7, #31]
 8002bb8:	e111      	b.n	8002dde <UART_SetConfig+0x346>
 8002bba:	2308      	movs	r3, #8
 8002bbc:	77fb      	strb	r3, [r7, #31]
 8002bbe:	e10e      	b.n	8002dde <UART_SetConfig+0x346>
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	77fb      	strb	r3, [r7, #31]
 8002bc4:	e10b      	b.n	8002dde <UART_SetConfig+0x346>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a69      	ldr	r2, [pc, #420]	; (8002d70 <UART_SetConfig+0x2d8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d120      	bne.n	8002c12 <UART_SetConfig+0x17a>
 8002bd0:	4b65      	ldr	r3, [pc, #404]	; (8002d68 <UART_SetConfig+0x2d0>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002bda:	2b30      	cmp	r3, #48	; 0x30
 8002bdc:	d013      	beq.n	8002c06 <UART_SetConfig+0x16e>
 8002bde:	2b30      	cmp	r3, #48	; 0x30
 8002be0:	d814      	bhi.n	8002c0c <UART_SetConfig+0x174>
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d009      	beq.n	8002bfa <UART_SetConfig+0x162>
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	d810      	bhi.n	8002c0c <UART_SetConfig+0x174>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <UART_SetConfig+0x15c>
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	d006      	beq.n	8002c00 <UART_SetConfig+0x168>
 8002bf2:	e00b      	b.n	8002c0c <UART_SetConfig+0x174>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	77fb      	strb	r3, [r7, #31]
 8002bf8:	e0f1      	b.n	8002dde <UART_SetConfig+0x346>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	77fb      	strb	r3, [r7, #31]
 8002bfe:	e0ee      	b.n	8002dde <UART_SetConfig+0x346>
 8002c00:	2304      	movs	r3, #4
 8002c02:	77fb      	strb	r3, [r7, #31]
 8002c04:	e0eb      	b.n	8002dde <UART_SetConfig+0x346>
 8002c06:	2308      	movs	r3, #8
 8002c08:	77fb      	strb	r3, [r7, #31]
 8002c0a:	e0e8      	b.n	8002dde <UART_SetConfig+0x346>
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	77fb      	strb	r3, [r7, #31]
 8002c10:	e0e5      	b.n	8002dde <UART_SetConfig+0x346>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a57      	ldr	r2, [pc, #348]	; (8002d74 <UART_SetConfig+0x2dc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d120      	bne.n	8002c5e <UART_SetConfig+0x1c6>
 8002c1c:	4b52      	ldr	r3, [pc, #328]	; (8002d68 <UART_SetConfig+0x2d0>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c26:	2bc0      	cmp	r3, #192	; 0xc0
 8002c28:	d013      	beq.n	8002c52 <UART_SetConfig+0x1ba>
 8002c2a:	2bc0      	cmp	r3, #192	; 0xc0
 8002c2c:	d814      	bhi.n	8002c58 <UART_SetConfig+0x1c0>
 8002c2e:	2b80      	cmp	r3, #128	; 0x80
 8002c30:	d009      	beq.n	8002c46 <UART_SetConfig+0x1ae>
 8002c32:	2b80      	cmp	r3, #128	; 0x80
 8002c34:	d810      	bhi.n	8002c58 <UART_SetConfig+0x1c0>
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <UART_SetConfig+0x1a8>
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	d006      	beq.n	8002c4c <UART_SetConfig+0x1b4>
 8002c3e:	e00b      	b.n	8002c58 <UART_SetConfig+0x1c0>
 8002c40:	2300      	movs	r3, #0
 8002c42:	77fb      	strb	r3, [r7, #31]
 8002c44:	e0cb      	b.n	8002dde <UART_SetConfig+0x346>
 8002c46:	2302      	movs	r3, #2
 8002c48:	77fb      	strb	r3, [r7, #31]
 8002c4a:	e0c8      	b.n	8002dde <UART_SetConfig+0x346>
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	77fb      	strb	r3, [r7, #31]
 8002c50:	e0c5      	b.n	8002dde <UART_SetConfig+0x346>
 8002c52:	2308      	movs	r3, #8
 8002c54:	77fb      	strb	r3, [r7, #31]
 8002c56:	e0c2      	b.n	8002dde <UART_SetConfig+0x346>
 8002c58:	2310      	movs	r3, #16
 8002c5a:	77fb      	strb	r3, [r7, #31]
 8002c5c:	e0bf      	b.n	8002dde <UART_SetConfig+0x346>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a45      	ldr	r2, [pc, #276]	; (8002d78 <UART_SetConfig+0x2e0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d125      	bne.n	8002cb4 <UART_SetConfig+0x21c>
 8002c68:	4b3f      	ldr	r3, [pc, #252]	; (8002d68 <UART_SetConfig+0x2d0>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c76:	d017      	beq.n	8002ca8 <UART_SetConfig+0x210>
 8002c78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c7c:	d817      	bhi.n	8002cae <UART_SetConfig+0x216>
 8002c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c82:	d00b      	beq.n	8002c9c <UART_SetConfig+0x204>
 8002c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c88:	d811      	bhi.n	8002cae <UART_SetConfig+0x216>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <UART_SetConfig+0x1fe>
 8002c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c92:	d006      	beq.n	8002ca2 <UART_SetConfig+0x20a>
 8002c94:	e00b      	b.n	8002cae <UART_SetConfig+0x216>
 8002c96:	2300      	movs	r3, #0
 8002c98:	77fb      	strb	r3, [r7, #31]
 8002c9a:	e0a0      	b.n	8002dde <UART_SetConfig+0x346>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	77fb      	strb	r3, [r7, #31]
 8002ca0:	e09d      	b.n	8002dde <UART_SetConfig+0x346>
 8002ca2:	2304      	movs	r3, #4
 8002ca4:	77fb      	strb	r3, [r7, #31]
 8002ca6:	e09a      	b.n	8002dde <UART_SetConfig+0x346>
 8002ca8:	2308      	movs	r3, #8
 8002caa:	77fb      	strb	r3, [r7, #31]
 8002cac:	e097      	b.n	8002dde <UART_SetConfig+0x346>
 8002cae:	2310      	movs	r3, #16
 8002cb0:	77fb      	strb	r3, [r7, #31]
 8002cb2:	e094      	b.n	8002dde <UART_SetConfig+0x346>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a30      	ldr	r2, [pc, #192]	; (8002d7c <UART_SetConfig+0x2e4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d125      	bne.n	8002d0a <UART_SetConfig+0x272>
 8002cbe:	4b2a      	ldr	r3, [pc, #168]	; (8002d68 <UART_SetConfig+0x2d0>)
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ccc:	d017      	beq.n	8002cfe <UART_SetConfig+0x266>
 8002cce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cd2:	d817      	bhi.n	8002d04 <UART_SetConfig+0x26c>
 8002cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cd8:	d00b      	beq.n	8002cf2 <UART_SetConfig+0x25a>
 8002cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cde:	d811      	bhi.n	8002d04 <UART_SetConfig+0x26c>
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <UART_SetConfig+0x254>
 8002ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce8:	d006      	beq.n	8002cf8 <UART_SetConfig+0x260>
 8002cea:	e00b      	b.n	8002d04 <UART_SetConfig+0x26c>
 8002cec:	2301      	movs	r3, #1
 8002cee:	77fb      	strb	r3, [r7, #31]
 8002cf0:	e075      	b.n	8002dde <UART_SetConfig+0x346>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	77fb      	strb	r3, [r7, #31]
 8002cf6:	e072      	b.n	8002dde <UART_SetConfig+0x346>
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	77fb      	strb	r3, [r7, #31]
 8002cfc:	e06f      	b.n	8002dde <UART_SetConfig+0x346>
 8002cfe:	2308      	movs	r3, #8
 8002d00:	77fb      	strb	r3, [r7, #31]
 8002d02:	e06c      	b.n	8002dde <UART_SetConfig+0x346>
 8002d04:	2310      	movs	r3, #16
 8002d06:	77fb      	strb	r3, [r7, #31]
 8002d08:	e069      	b.n	8002dde <UART_SetConfig+0x346>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <UART_SetConfig+0x2e8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d137      	bne.n	8002d84 <UART_SetConfig+0x2ec>
 8002d14:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <UART_SetConfig+0x2d0>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002d1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d22:	d017      	beq.n	8002d54 <UART_SetConfig+0x2bc>
 8002d24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d28:	d817      	bhi.n	8002d5a <UART_SetConfig+0x2c2>
 8002d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2e:	d00b      	beq.n	8002d48 <UART_SetConfig+0x2b0>
 8002d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d34:	d811      	bhi.n	8002d5a <UART_SetConfig+0x2c2>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <UART_SetConfig+0x2aa>
 8002d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3e:	d006      	beq.n	8002d4e <UART_SetConfig+0x2b6>
 8002d40:	e00b      	b.n	8002d5a <UART_SetConfig+0x2c2>
 8002d42:	2300      	movs	r3, #0
 8002d44:	77fb      	strb	r3, [r7, #31]
 8002d46:	e04a      	b.n	8002dde <UART_SetConfig+0x346>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	77fb      	strb	r3, [r7, #31]
 8002d4c:	e047      	b.n	8002dde <UART_SetConfig+0x346>
 8002d4e:	2304      	movs	r3, #4
 8002d50:	77fb      	strb	r3, [r7, #31]
 8002d52:	e044      	b.n	8002dde <UART_SetConfig+0x346>
 8002d54:	2308      	movs	r3, #8
 8002d56:	77fb      	strb	r3, [r7, #31]
 8002d58:	e041      	b.n	8002dde <UART_SetConfig+0x346>
 8002d5a:	2310      	movs	r3, #16
 8002d5c:	77fb      	strb	r3, [r7, #31]
 8002d5e:	e03e      	b.n	8002dde <UART_SetConfig+0x346>
 8002d60:	efff69f3 	.word	0xefff69f3
 8002d64:	40011000 	.word	0x40011000
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40004400 	.word	0x40004400
 8002d70:	40004800 	.word	0x40004800
 8002d74:	40004c00 	.word	0x40004c00
 8002d78:	40005000 	.word	0x40005000
 8002d7c:	40011400 	.word	0x40011400
 8002d80:	40007800 	.word	0x40007800
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a71      	ldr	r2, [pc, #452]	; (8002f50 <UART_SetConfig+0x4b8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d125      	bne.n	8002dda <UART_SetConfig+0x342>
 8002d8e:	4b71      	ldr	r3, [pc, #452]	; (8002f54 <UART_SetConfig+0x4bc>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d9c:	d017      	beq.n	8002dce <UART_SetConfig+0x336>
 8002d9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002da2:	d817      	bhi.n	8002dd4 <UART_SetConfig+0x33c>
 8002da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da8:	d00b      	beq.n	8002dc2 <UART_SetConfig+0x32a>
 8002daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dae:	d811      	bhi.n	8002dd4 <UART_SetConfig+0x33c>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <UART_SetConfig+0x324>
 8002db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002db8:	d006      	beq.n	8002dc8 <UART_SetConfig+0x330>
 8002dba:	e00b      	b.n	8002dd4 <UART_SetConfig+0x33c>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	77fb      	strb	r3, [r7, #31]
 8002dc0:	e00d      	b.n	8002dde <UART_SetConfig+0x346>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	77fb      	strb	r3, [r7, #31]
 8002dc6:	e00a      	b.n	8002dde <UART_SetConfig+0x346>
 8002dc8:	2304      	movs	r3, #4
 8002dca:	77fb      	strb	r3, [r7, #31]
 8002dcc:	e007      	b.n	8002dde <UART_SetConfig+0x346>
 8002dce:	2308      	movs	r3, #8
 8002dd0:	77fb      	strb	r3, [r7, #31]
 8002dd2:	e004      	b.n	8002dde <UART_SetConfig+0x346>
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	77fb      	strb	r3, [r7, #31]
 8002dd8:	e001      	b.n	8002dde <UART_SetConfig+0x346>
 8002dda:	2310      	movs	r3, #16
 8002ddc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de6:	d15a      	bne.n	8002e9e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8002de8:	7ffb      	ldrb	r3, [r7, #31]
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d827      	bhi.n	8002e3e <UART_SetConfig+0x3a6>
 8002dee:	a201      	add	r2, pc, #4	; (adr r2, 8002df4 <UART_SetConfig+0x35c>)
 8002df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df4:	08002e19 	.word	0x08002e19
 8002df8:	08002e21 	.word	0x08002e21
 8002dfc:	08002e29 	.word	0x08002e29
 8002e00:	08002e3f 	.word	0x08002e3f
 8002e04:	08002e2f 	.word	0x08002e2f
 8002e08:	08002e3f 	.word	0x08002e3f
 8002e0c:	08002e3f 	.word	0x08002e3f
 8002e10:	08002e3f 	.word	0x08002e3f
 8002e14:	08002e37 	.word	0x08002e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e18:	f7fe fe32 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8002e1c:	61b8      	str	r0, [r7, #24]
        break;
 8002e1e:	e013      	b.n	8002e48 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e20:	f7fe fe42 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8002e24:	61b8      	str	r0, [r7, #24]
        break;
 8002e26:	e00f      	b.n	8002e48 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e28:	4b4b      	ldr	r3, [pc, #300]	; (8002f58 <UART_SetConfig+0x4c0>)
 8002e2a:	61bb      	str	r3, [r7, #24]
        break;
 8002e2c:	e00c      	b.n	8002e48 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e2e:	f7fe fd65 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 8002e32:	61b8      	str	r0, [r7, #24]
        break;
 8002e34:	e008      	b.n	8002e48 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e3a:	61bb      	str	r3, [r7, #24]
        break;
 8002e3c:	e004      	b.n	8002e48 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	77bb      	strb	r3, [r7, #30]
        break;
 8002e46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d074      	beq.n	8002f38 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	005a      	lsls	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	085b      	lsrs	r3, r3, #1
 8002e58:	441a      	add	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	2b0f      	cmp	r3, #15
 8002e68:	d916      	bls.n	8002e98 <UART_SetConfig+0x400>
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e70:	d212      	bcs.n	8002e98 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	f023 030f 	bic.w	r3, r3, #15
 8002e7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	085b      	lsrs	r3, r3, #1
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	89fb      	ldrh	r3, [r7, #14]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	89fa      	ldrh	r2, [r7, #14]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	e04f      	b.n	8002f38 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	77bb      	strb	r3, [r7, #30]
 8002e9c:	e04c      	b.n	8002f38 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d828      	bhi.n	8002ef6 <UART_SetConfig+0x45e>
 8002ea4:	a201      	add	r2, pc, #4	; (adr r2, 8002eac <UART_SetConfig+0x414>)
 8002ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eaa:	bf00      	nop
 8002eac:	08002ed1 	.word	0x08002ed1
 8002eb0:	08002ed9 	.word	0x08002ed9
 8002eb4:	08002ee1 	.word	0x08002ee1
 8002eb8:	08002ef7 	.word	0x08002ef7
 8002ebc:	08002ee7 	.word	0x08002ee7
 8002ec0:	08002ef7 	.word	0x08002ef7
 8002ec4:	08002ef7 	.word	0x08002ef7
 8002ec8:	08002ef7 	.word	0x08002ef7
 8002ecc:	08002eef 	.word	0x08002eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed0:	f7fe fdd6 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8002ed4:	61b8      	str	r0, [r7, #24]
        break;
 8002ed6:	e013      	b.n	8002f00 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ed8:	f7fe fde6 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8002edc:	61b8      	str	r0, [r7, #24]
        break;
 8002ede:	e00f      	b.n	8002f00 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <UART_SetConfig+0x4c0>)
 8002ee2:	61bb      	str	r3, [r7, #24]
        break;
 8002ee4:	e00c      	b.n	8002f00 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ee6:	f7fe fd09 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 8002eea:	61b8      	str	r0, [r7, #24]
        break;
 8002eec:	e008      	b.n	8002f00 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ef2:	61bb      	str	r3, [r7, #24]
        break;
 8002ef4:	e004      	b.n	8002f00 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	77bb      	strb	r3, [r7, #30]
        break;
 8002efe:	bf00      	nop
    }

    if (pclk != 0U)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d018      	beq.n	8002f38 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	085a      	lsrs	r2, r3, #1
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	441a      	add	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	2b0f      	cmp	r3, #15
 8002f1e:	d909      	bls.n	8002f34 <UART_SetConfig+0x49c>
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f26:	d205      	bcs.n	8002f34 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	e001      	b.n	8002f38 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f44:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3720      	adds	r7, #32
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40007c00 	.word	0x40007c00
 8002f54:	40023800 	.word	0x40023800
 8002f58:	00f42400 	.word	0x00f42400

08002f5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01a      	beq.n	8003072 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800305a:	d10a      	bne.n	8003072 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
  }
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030b0:	f7fd fdc8 	bl	8000c44 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d10e      	bne.n	80030e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f817 	bl	8003106 <UART_WaitOnFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e00d      	b.n	80030fe <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b09c      	sub	sp, #112	; 0x70
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	603b      	str	r3, [r7, #0]
 8003112:	4613      	mov	r3, r2
 8003114:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003116:	e0a5      	b.n	8003264 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	f000 80a1 	beq.w	8003264 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003122:	f7fd fd8f 	bl	8000c44 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800312e:	429a      	cmp	r2, r3
 8003130:	d302      	bcc.n	8003138 <UART_WaitOnFlagUntilTimeout+0x32>
 8003132:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003134:	2b00      	cmp	r3, #0
 8003136:	d13e      	bne.n	80031b6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003140:	e853 3f00 	ldrex	r3, [r3]
 8003144:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003148:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800314c:	667b      	str	r3, [r7, #100]	; 0x64
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003156:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003158:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800315c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800315e:	e841 2300 	strex	r3, r2, [r1]
 8003162:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1e6      	bne.n	8003138 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3308      	adds	r3, #8
 8003170:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003174:	e853 3f00 	ldrex	r3, [r3]
 8003178:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800317a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	663b      	str	r3, [r7, #96]	; 0x60
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3308      	adds	r3, #8
 8003188:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800318a:	64ba      	str	r2, [r7, #72]	; 0x48
 800318c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003192:	e841 2300 	strex	r3, r2, [r1]
 8003196:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1e5      	bne.n	800316a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e067      	b.n	8003286 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d04f      	beq.n	8003264 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031d2:	d147      	bne.n	8003264 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e6:	e853 3f00 	ldrex	r3, [r3]
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031fc:	637b      	str	r3, [r7, #52]	; 0x34
 80031fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003200:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003204:	e841 2300 	strex	r3, r2, [r1]
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e6      	bne.n	80031de <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3308      	adds	r3, #8
 8003216:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	e853 3f00 	ldrex	r3, [r3]
 800321e:	613b      	str	r3, [r7, #16]
   return(result);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	66bb      	str	r3, [r7, #104]	; 0x68
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3308      	adds	r3, #8
 800322e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003230:	623a      	str	r2, [r7, #32]
 8003232:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003234:	69f9      	ldr	r1, [r7, #28]
 8003236:	6a3a      	ldr	r2, [r7, #32]
 8003238:	e841 2300 	strex	r3, r2, [r1]
 800323c:	61bb      	str	r3, [r7, #24]
   return(result);
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1e5      	bne.n	8003210 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e010      	b.n	8003286 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4013      	ands	r3, r2
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	429a      	cmp	r2, r3
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	429a      	cmp	r2, r3
 8003280:	f43f af4a 	beq.w	8003118 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3770      	adds	r7, #112	; 0x70
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800328e:	b480      	push	{r7}
 8003290:	b085      	sub	sp, #20
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800329c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032a0:	2b84      	cmp	r3, #132	; 0x84
 80032a2:	d005      	beq.n	80032b0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80032a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	3303      	adds	r3, #3
 80032ae:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80032b0:	68fb      	ldr	r3, [r7, #12]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032c4:	f3ef 8305 	mrs	r3, IPSR
 80032c8:	607b      	str	r3, [r7, #4]
  return(result);
 80032ca:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80032e6:	f001 f94b 	bl	8004580 <vTaskStartScheduler>
  
  return osOK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80032f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f2:	b089      	sub	sp, #36	; 0x24
 80032f4:	af04      	add	r7, sp, #16
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d020      	beq.n	8003344 <osThreadCreate+0x54>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d01c      	beq.n	8003344 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685c      	ldr	r4, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681d      	ldr	r5, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691e      	ldr	r6, [r3, #16]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff ffb6 	bl	800328e <makeFreeRtosPriority>
 8003322:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800332c:	9202      	str	r2, [sp, #8]
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	9100      	str	r1, [sp, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	4632      	mov	r2, r6
 8003336:	4629      	mov	r1, r5
 8003338:	4620      	mov	r0, r4
 800333a:	f000 ff4f 	bl	80041dc <xTaskCreateStatic>
 800333e:	4603      	mov	r3, r0
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	e01c      	b.n	800337e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685c      	ldr	r4, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003350:	b29e      	uxth	r6, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff ff98 	bl	800328e <makeFreeRtosPriority>
 800335e:	4602      	mov	r2, r0
 8003360:	f107 030c 	add.w	r3, r7, #12
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	9200      	str	r2, [sp, #0]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	4632      	mov	r2, r6
 800336c:	4629      	mov	r1, r5
 800336e:	4620      	mov	r0, r4
 8003370:	f000 ff97 	bl	80042a2 <xTaskCreate>
 8003374:	4603      	mov	r3, r0
 8003376:	2b01      	cmp	r3, #1
 8003378:	d001      	beq.n	800337e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800337a:	2300      	movs	r3, #0
 800337c:	e000      	b.n	8003380 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800337e:	68fb      	ldr	r3, [r7, #12]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003388 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <osDelay+0x16>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	e000      	b.n	80033a0 <osDelay+0x18>
 800339e:	2301      	movs	r3, #1
 80033a0:	4618      	mov	r0, r3
 80033a2:	f001 f8b7 	bl	8004514 <vTaskDelay>
  
  return osOK;
 80033a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00f      	beq.n	80033e2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d10a      	bne.n	80033de <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2203      	movs	r2, #3
 80033ce:	9200      	str	r2, [sp, #0]
 80033d0:	2200      	movs	r2, #0
 80033d2:	2100      	movs	r1, #0
 80033d4:	2001      	movs	r0, #1
 80033d6:	f000 f9bf 	bl	8003758 <xQueueGenericCreateStatic>
 80033da:	4603      	mov	r3, r0
 80033dc:	e016      	b.n	800340c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	e014      	b.n	800340c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d110      	bne.n	800340a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80033e8:	2203      	movs	r2, #3
 80033ea:	2100      	movs	r1, #0
 80033ec:	2001      	movs	r0, #1
 80033ee:	f000 fa35 	bl	800385c <xQueueGenericCreate>
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d005      	beq.n	8003406 <osSemaphoreCreate+0x56>
 80033fa:	2300      	movs	r3, #0
 80033fc:	2200      	movs	r2, #0
 80033fe:	2100      	movs	r1, #0
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 fa8d 	bl	8003920 <xQueueGenericSend>
      return sema;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	e000      	b.n	800340c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800340a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800341e:	2300      	movs	r3, #0
 8003420:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	e03a      	b.n	80034a2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003436:	d103      	bne.n	8003440 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003438:	f04f 33ff 	mov.w	r3, #4294967295
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	e009      	b.n	8003454 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d006      	beq.n	8003454 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <osSemaphoreWait+0x40>
      ticks = 1;
 8003450:	2301      	movs	r3, #1
 8003452:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003454:	f7ff ff33 	bl	80032be <inHandlerMode>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d017      	beq.n	800348e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800345e:	f107 0308 	add.w	r3, r7, #8
 8003462:	461a      	mov	r2, r3
 8003464:	2100      	movs	r1, #0
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fd0a 	bl	8003e80 <xQueueReceiveFromISR>
 800346c:	4603      	mov	r3, r0
 800346e:	2b01      	cmp	r3, #1
 8003470:	d001      	beq.n	8003476 <osSemaphoreWait+0x62>
      return osErrorOS;
 8003472:	23ff      	movs	r3, #255	; 0xff
 8003474:	e015      	b.n	80034a2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d011      	beq.n	80034a0 <osSemaphoreWait+0x8c>
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <osSemaphoreWait+0x98>)
 800347e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	e008      	b.n	80034a0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800348e:	68f9      	ldr	r1, [r7, #12]
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fbe1 	bl	8003c58 <xQueueSemaphoreTake>
 8003496:	4603      	mov	r3, r0
 8003498:	2b01      	cmp	r3, #1
 800349a:	d001      	beq.n	80034a0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800349c:	23ff      	movs	r3, #255	; 0xff
 800349e:	e000      	b.n	80034a2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	e000ed04 	.word	0xe000ed04

080034b0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80034bc:	2300      	movs	r3, #0
 80034be:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80034c0:	f7ff fefd 	bl	80032be <inHandlerMode>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d016      	beq.n	80034f8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80034ca:	f107 0308 	add.w	r3, r7, #8
 80034ce:	4619      	mov	r1, r3
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 fb2b 	bl	8003b2c <xQueueGiveFromISR>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d001      	beq.n	80034e0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80034dc:	23ff      	movs	r3, #255	; 0xff
 80034de:	e017      	b.n	8003510 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d013      	beq.n	800350e <osSemaphoreRelease+0x5e>
 80034e6:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <osSemaphoreRelease+0x68>)
 80034e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	e00a      	b.n	800350e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80034f8:	2300      	movs	r3, #0
 80034fa:	2200      	movs	r2, #0
 80034fc:	2100      	movs	r1, #0
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fa0e 	bl	8003920 <xQueueGenericSend>
 8003504:	4603      	mov	r3, r0
 8003506:	2b01      	cmp	r3, #1
 8003508:	d001      	beq.n	800350e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800350a:	23ff      	movs	r3, #255	; 0xff
 800350c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800350e:	68fb      	ldr	r3, [r7, #12]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	e000ed04 	.word	0xe000ed04

0800351c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f103 0208 	add.w	r2, r3, #8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f04f 32ff 	mov.w	r2, #4294967295
 8003534:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f103 0208 	add.w	r2, r3, #8
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f103 0208 	add.w	r2, r3, #8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003576:	b480      	push	{r7}
 8003578:	b085      	sub	sp, #20
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	601a      	str	r2, [r3, #0]
}
 80035b2:	bf00      	nop
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035be:	b480      	push	{r7}
 80035c0:	b085      	sub	sp, #20
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d103      	bne.n	80035de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	e00c      	b.n	80035f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3308      	adds	r3, #8
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	e002      	b.n	80035ec <vListInsert+0x2e>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d2f6      	bcs.n	80035e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	601a      	str	r2, [r3, #0]
}
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6892      	ldr	r2, [r2, #8]
 8003646:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6852      	ldr	r2, [r2, #4]
 8003650:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	d103      	bne.n	8003664 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	1e5a      	subs	r2, r3, #1
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10c      	bne.n	80036b2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369c:	b672      	cpsid	i
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	b662      	cpsie	i
 80036ac:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036ae:	bf00      	nop
 80036b0:	e7fe      	b.n	80036b0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80036b2:	f001 fec3 	bl	800543c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	68f9      	ldr	r1, [r7, #12]
 80036c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	441a      	add	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e2:	3b01      	subs	r3, #1
 80036e4:	68f9      	ldr	r1, [r7, #12]
 80036e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	441a      	add	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	22ff      	movs	r2, #255	; 0xff
 80036f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	22ff      	movs	r2, #255	; 0xff
 80036fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d114      	bne.n	8003732 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01a      	beq.n	8003746 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3310      	adds	r3, #16
 8003714:	4618      	mov	r0, r3
 8003716:	f001 f981 	bl	8004a1c <xTaskRemoveFromEventList>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d012      	beq.n	8003746 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003720:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <xQueueGenericReset+0xd0>)
 8003722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	e009      	b.n	8003746 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3310      	adds	r3, #16
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff fef0 	bl	800351c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	3324      	adds	r3, #36	; 0x24
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff feeb 	bl	800351c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003746:	f001 fead 	bl	80054a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800374a:	2301      	movs	r3, #1
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	e000ed04 	.word	0xe000ed04

08003758 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08e      	sub	sp, #56	; 0x38
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10c      	bne.n	8003786 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	b672      	cpsid	i
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	b662      	cpsie	i
 8003780:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003782:	bf00      	nop
 8003784:	e7fe      	b.n	8003784 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10c      	bne.n	80037a6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	b672      	cpsid	i
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	b662      	cpsie	i
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037a2:	bf00      	nop
 80037a4:	e7fe      	b.n	80037a4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <xQueueGenericCreateStatic+0x5a>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <xQueueGenericCreateStatic+0x5e>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <xQueueGenericCreateStatic+0x60>
 80037b6:	2300      	movs	r3, #0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10c      	bne.n	80037d6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c0:	b672      	cpsid	i
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	b662      	cpsie	i
 80037d0:	623b      	str	r3, [r7, #32]
}
 80037d2:	bf00      	nop
 80037d4:	e7fe      	b.n	80037d4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d102      	bne.n	80037e2 <xQueueGenericCreateStatic+0x8a>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <xQueueGenericCreateStatic+0x8e>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <xQueueGenericCreateStatic+0x90>
 80037e6:	2300      	movs	r3, #0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10c      	bne.n	8003806 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	b672      	cpsid	i
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	b662      	cpsie	i
 8003800:	61fb      	str	r3, [r7, #28]
}
 8003802:	bf00      	nop
 8003804:	e7fe      	b.n	8003804 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003806:	2348      	movs	r3, #72	; 0x48
 8003808:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b48      	cmp	r3, #72	; 0x48
 800380e:	d00c      	beq.n	800382a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	b672      	cpsid	i
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	b662      	cpsie	i
 8003824:	61bb      	str	r3, [r7, #24]
}
 8003826:	bf00      	nop
 8003828:	e7fe      	b.n	8003828 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800382a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00d      	beq.n	8003852 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800383e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	4613      	mov	r3, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f847 	bl	80038e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003854:	4618      	mov	r0, r3
 8003856:	3730      	adds	r7, #48	; 0x30
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	4613      	mov	r3, r2
 8003868:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10c      	bne.n	800388a <xQueueGenericCreate+0x2e>
	__asm volatile
 8003870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003874:	b672      	cpsid	i
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	b662      	cpsie	i
 8003884:	613b      	str	r3, [r7, #16]
}
 8003886:	bf00      	nop
 8003888:	e7fe      	b.n	8003888 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d102      	bne.n	8003896 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003890:	2300      	movs	r3, #0
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	e004      	b.n	80038a0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	3348      	adds	r3, #72	; 0x48
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 fef5 	bl	8005694 <pvPortMalloc>
 80038aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d011      	beq.n	80038d6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	3348      	adds	r3, #72	; 0x48
 80038ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038c4:	79fa      	ldrb	r2, [r7, #7]
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	4613      	mov	r3, r2
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	68b9      	ldr	r1, [r7, #8]
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f805 	bl	80038e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80038d6:	69bb      	ldr	r3, [r7, #24]
	}
 80038d8:	4618      	mov	r0, r3
 80038da:	3720      	adds	r7, #32
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d103      	bne.n	80038fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	e002      	b.n	8003902 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800390e:	2101      	movs	r1, #1
 8003910:	69b8      	ldr	r0, [r7, #24]
 8003912:	f7ff feb7 	bl	8003684 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08e      	sub	sp, #56	; 0x38
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800392e:	2300      	movs	r3, #0
 8003930:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10c      	bne.n	8003956 <xQueueGenericSend+0x36>
	__asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	b672      	cpsid	i
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	b662      	cpsie	i
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003952:	bf00      	nop
 8003954:	e7fe      	b.n	8003954 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d103      	bne.n	8003964 <xQueueGenericSend+0x44>
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <xQueueGenericSend+0x48>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <xQueueGenericSend+0x4a>
 8003968:	2300      	movs	r3, #0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10c      	bne.n	8003988 <xQueueGenericSend+0x68>
	__asm volatile
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	b672      	cpsid	i
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	b662      	cpsie	i
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003984:	bf00      	nop
 8003986:	e7fe      	b.n	8003986 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d103      	bne.n	8003996 <xQueueGenericSend+0x76>
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <xQueueGenericSend+0x7a>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <xQueueGenericSend+0x7c>
 800399a:	2300      	movs	r3, #0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10c      	bne.n	80039ba <xQueueGenericSend+0x9a>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	b672      	cpsid	i
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	b662      	cpsie	i
 80039b4:	623b      	str	r3, [r7, #32]
}
 80039b6:	bf00      	nop
 80039b8:	e7fe      	b.n	80039b8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039ba:	f001 f9f3 	bl	8004da4 <xTaskGetSchedulerState>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <xQueueGenericSend+0xaa>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <xQueueGenericSend+0xae>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <xQueueGenericSend+0xb0>
 80039ce:	2300      	movs	r3, #0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10c      	bne.n	80039ee <xQueueGenericSend+0xce>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	b672      	cpsid	i
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	b662      	cpsie	i
 80039e8:	61fb      	str	r3, [r7, #28]
}
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039ee:	f001 fd25 	bl	800543c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d302      	bcc.n	8003a04 <xQueueGenericSend+0xe4>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d129      	bne.n	8003a58 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a0a:	f000 fad7 	bl	8003fbc <prvCopyDataToQueue>
 8003a0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d010      	beq.n	8003a3a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	3324      	adds	r3, #36	; 0x24
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fffd 	bl	8004a1c <xTaskRemoveFromEventList>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a28:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <xQueueGenericSend+0x208>)
 8003a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	e00a      	b.n	8003a50 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a40:	4b39      	ldr	r3, [pc, #228]	; (8003b28 <xQueueGenericSend+0x208>)
 8003a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a50:	f001 fd28 	bl	80054a4 <vPortExitCritical>
				return pdPASS;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e063      	b.n	8003b20 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a5e:	f001 fd21 	bl	80054a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e05c      	b.n	8003b20 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d106      	bne.n	8003a7a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a6c:	f107 0314 	add.w	r3, r7, #20
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 f837 	bl	8004ae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a76:	2301      	movs	r3, #1
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a7a:	f001 fd13 	bl	80054a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a7e:	f000 fde3 	bl	8004648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a82:	f001 fcdb 	bl	800543c <vPortEnterCritical>
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a8c:	b25b      	sxtb	r3, r3
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d103      	bne.n	8003a9c <xQueueGenericSend+0x17c>
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d103      	bne.n	8003ab2 <xQueueGenericSend+0x192>
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ab2:	f001 fcf7 	bl	80054a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ab6:	1d3a      	adds	r2, r7, #4
 8003ab8:	f107 0314 	add.w	r3, r7, #20
 8003abc:	4611      	mov	r1, r2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f001 f826 	bl	8004b10 <xTaskCheckForTimeOut>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d124      	bne.n	8003b14 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003aca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003acc:	f000 fb6e 	bl	80041ac <prvIsQueueFull>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d018      	beq.n	8003b08 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	3310      	adds	r3, #16
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	4611      	mov	r1, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 ff76 	bl	80049d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ae6:	f000 faf9 	bl	80040dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003aea:	f000 fdbb 	bl	8004664 <xTaskResumeAll>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f47f af7c 	bne.w	80039ee <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8003af6:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <xQueueGenericSend+0x208>)
 8003af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	e772      	b.n	80039ee <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b0a:	f000 fae7 	bl	80040dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b0e:	f000 fda9 	bl	8004664 <xTaskResumeAll>
 8003b12:	e76c      	b.n	80039ee <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b16:	f000 fae1 	bl	80040dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b1a:	f000 fda3 	bl	8004664 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3738      	adds	r7, #56	; 0x38
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	e000ed04 	.word	0xe000ed04

08003b2c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08e      	sub	sp, #56	; 0x38
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10c      	bne.n	8003b5a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	b672      	cpsid	i
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	b662      	cpsie	i
 8003b54:	623b      	str	r3, [r7, #32]
}
 8003b56:	bf00      	nop
 8003b58:	e7fe      	b.n	8003b58 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00c      	beq.n	8003b7c <xQueueGiveFromISR+0x50>
	__asm volatile
 8003b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b66:	b672      	cpsid	i
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	b662      	cpsie	i
 8003b76:	61fb      	str	r3, [r7, #28]
}
 8003b78:	bf00      	nop
 8003b7a:	e7fe      	b.n	8003b7a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d103      	bne.n	8003b8c <xQueueGiveFromISR+0x60>
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <xQueueGiveFromISR+0x64>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <xQueueGiveFromISR+0x66>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10c      	bne.n	8003bb0 <xQueueGiveFromISR+0x84>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	b672      	cpsid	i
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	b662      	cpsie	i
 8003baa:	61bb      	str	r3, [r7, #24]
}
 8003bac:	bf00      	nop
 8003bae:	e7fe      	b.n	8003bae <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bb0:	f001 fd2c 	bl	800560c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003bb4:	f3ef 8211 	mrs	r2, BASEPRI
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	b672      	cpsid	i
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	b662      	cpsie	i
 8003bcc:	617a      	str	r2, [r7, #20]
 8003bce:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003bd0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d22b      	bcs.n	8003c3c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfe:	d112      	bne.n	8003c26 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d016      	beq.n	8003c36 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	3324      	adds	r3, #36	; 0x24
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 ff05 	bl	8004a1c <xTaskRemoveFromEventList>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00e      	beq.n	8003c36 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	e007      	b.n	8003c36 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	b25a      	sxtb	r2, r3
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c36:	2301      	movs	r3, #1
 8003c38:	637b      	str	r3, [r7, #52]	; 0x34
 8003c3a:	e001      	b.n	8003c40 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c42:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3738      	adds	r7, #56	; 0x38
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08e      	sub	sp, #56	; 0x38
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10c      	bne.n	8003c8e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	b672      	cpsid	i
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	b662      	cpsie	i
 8003c88:	623b      	str	r3, [r7, #32]
}
 8003c8a:	bf00      	nop
 8003c8c:	e7fe      	b.n	8003c8c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00c      	beq.n	8003cb0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	b672      	cpsid	i
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	b662      	cpsie	i
 8003caa:	61fb      	str	r3, [r7, #28]
}
 8003cac:	bf00      	nop
 8003cae:	e7fe      	b.n	8003cae <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cb0:	f001 f878 	bl	8004da4 <xTaskGetSchedulerState>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d102      	bne.n	8003cc0 <xQueueSemaphoreTake+0x68>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <xQueueSemaphoreTake+0x6c>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <xQueueSemaphoreTake+0x6e>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10c      	bne.n	8003ce4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	b672      	cpsid	i
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	b662      	cpsie	i
 8003cde:	61bb      	str	r3, [r7, #24]
}
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ce4:	f001 fbaa 	bl	800543c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d024      	beq.n	8003d3e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf6:	1e5a      	subs	r2, r3, #1
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d104      	bne.n	8003d0e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003d04:	f001 fa14 	bl	8005130 <pvTaskIncrementMutexHeldCount>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00f      	beq.n	8003d36 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d18:	3310      	adds	r3, #16
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fe7e 	bl	8004a1c <xTaskRemoveFromEventList>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d007      	beq.n	8003d36 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d26:	4b55      	ldr	r3, [pc, #340]	; (8003e7c <xQueueSemaphoreTake+0x224>)
 8003d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d36:	f001 fbb5 	bl	80054a4 <vPortExitCritical>
				return pdPASS;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e099      	b.n	8003e72 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d113      	bne.n	8003d6c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00c      	beq.n	8003d64 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	b672      	cpsid	i
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	b662      	cpsie	i
 8003d5e:	617b      	str	r3, [r7, #20]
}
 8003d60:	bf00      	nop
 8003d62:	e7fe      	b.n	8003d62 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003d64:	f001 fb9e 	bl	80054a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e082      	b.n	8003e72 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d72:	f107 030c 	add.w	r3, r7, #12
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 feb4 	bl	8004ae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d80:	f001 fb90 	bl	80054a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d84:	f000 fc60 	bl	8004648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d88:	f001 fb58 	bl	800543c <vPortEnterCritical>
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d92:	b25b      	sxtb	r3, r3
 8003d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d98:	d103      	bne.n	8003da2 <xQueueSemaphoreTake+0x14a>
 8003d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003da8:	b25b      	sxtb	r3, r3
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d103      	bne.n	8003db8 <xQueueSemaphoreTake+0x160>
 8003db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003db8:	f001 fb74 	bl	80054a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dbc:	463a      	mov	r2, r7
 8003dbe:	f107 030c 	add.w	r3, r7, #12
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fea3 	bl	8004b10 <xTaskCheckForTimeOut>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d132      	bne.n	8003e36 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dd2:	f000 f9d5 	bl	8004180 <prvIsQueueEmpty>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d026      	beq.n	8003e2a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d109      	bne.n	8003df8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8003de4:	f001 fb2a 	bl	800543c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fff7 	bl	8004de0 <xTaskPriorityInherit>
 8003df2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003df4:	f001 fb56 	bl	80054a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfa:	3324      	adds	r3, #36	; 0x24
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fde5 	bl	80049d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e08:	f000 f968 	bl	80040dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e0c:	f000 fc2a 	bl	8004664 <xTaskResumeAll>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f47f af66 	bne.w	8003ce4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8003e18:	4b18      	ldr	r3, [pc, #96]	; (8003e7c <xQueueSemaphoreTake+0x224>)
 8003e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	e75c      	b.n	8003ce4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003e2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e2c:	f000 f956 	bl	80040dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e30:	f000 fc18 	bl	8004664 <xTaskResumeAll>
 8003e34:	e756      	b.n	8003ce4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003e36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e38:	f000 f950 	bl	80040dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e3c:	f000 fc12 	bl	8004664 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e42:	f000 f99d 	bl	8004180 <prvIsQueueEmpty>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f43f af4b 	beq.w	8003ce4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00d      	beq.n	8003e70 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8003e54:	f001 faf2 	bl	800543c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003e58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e5a:	f000 f897 	bl	8003f8c <prvGetDisinheritPriorityAfterTimeout>
 8003e5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 f8c4 	bl	8004ff4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003e6c:	f001 fb1a 	bl	80054a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3738      	adds	r7, #56	; 0x38
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	e000ed04 	.word	0xe000ed04

08003e80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08e      	sub	sp, #56	; 0x38
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10c      	bne.n	8003eb0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	b672      	cpsid	i
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	b662      	cpsie	i
 8003eaa:	623b      	str	r3, [r7, #32]
}
 8003eac:	bf00      	nop
 8003eae:	e7fe      	b.n	8003eae <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d103      	bne.n	8003ebe <xQueueReceiveFromISR+0x3e>
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <xQueueReceiveFromISR+0x42>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <xQueueReceiveFromISR+0x44>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10c      	bne.n	8003ee2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8003ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ecc:	b672      	cpsid	i
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	b662      	cpsie	i
 8003edc:	61fb      	str	r3, [r7, #28]
}
 8003ede:	bf00      	nop
 8003ee0:	e7fe      	b.n	8003ee0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ee2:	f001 fb93 	bl	800560c <vPortValidateInterruptPriority>
	__asm volatile
 8003ee6:	f3ef 8211 	mrs	r2, BASEPRI
 8003eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eee:	b672      	cpsid	i
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	b662      	cpsie	i
 8003efe:	61ba      	str	r2, [r7, #24]
 8003f00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003f02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d02f      	beq.n	8003f72 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f20:	f000 f8b6 	bl	8004090 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	1e5a      	subs	r2, r3, #1
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003f2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f34:	d112      	bne.n	8003f5c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d016      	beq.n	8003f6c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f40:	3310      	adds	r3, #16
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fd6a 	bl	8004a1c <xTaskRemoveFromEventList>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00e      	beq.n	8003f6c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00b      	beq.n	8003f6c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e007      	b.n	8003f6c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f60:	3301      	adds	r3, #1
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	b25a      	sxtb	r2, r3
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f70:	e001      	b.n	8003f76 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34
 8003f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f383 8811 	msr	BASEPRI, r3
}
 8003f80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3738      	adds	r7, #56	; 0x38
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d006      	beq.n	8003faa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f1c3 0307 	rsb	r3, r3, #7
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	e001      	b.n	8003fae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003fae:	68fb      	ldr	r3, [r7, #12]
	}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10d      	bne.n	8003ff6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d14d      	bne.n	800407e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 ff7a 	bl	8004ee0 <xTaskPriorityDisinherit>
 8003fec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	e043      	b.n	800407e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d119      	bne.n	8004030 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6858      	ldr	r0, [r3, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	461a      	mov	r2, r3
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	f001 fd4c 	bl	8005aa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	441a      	add	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	429a      	cmp	r2, r3
 8004024:	d32b      	bcc.n	800407e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	e026      	b.n	800407e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	68d8      	ldr	r0, [r3, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	461a      	mov	r2, r3
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	f001 fd32 	bl	8005aa4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	425b      	negs	r3, r3
 800404a:	441a      	add	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d207      	bcs.n	800406c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	425b      	negs	r3, r3
 8004066:	441a      	add	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d105      	bne.n	800407e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	3b01      	subs	r3, #1
 800407c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004086:	697b      	ldr	r3, [r7, #20]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d018      	beq.n	80040d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	441a      	add	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d303      	bcc.n	80040c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68d9      	ldr	r1, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	461a      	mov	r2, r3
 80040ce:	6838      	ldr	r0, [r7, #0]
 80040d0:	f001 fce8 	bl	8005aa4 <memcpy>
	}
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040e4:	f001 f9aa 	bl	800543c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040f0:	e011      	b.n	8004116 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d012      	beq.n	8004120 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3324      	adds	r3, #36	; 0x24
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fc8c 	bl	8004a1c <xTaskRemoveFromEventList>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800410a:	f000 fd67 	bl	8004bdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	3b01      	subs	r3, #1
 8004112:	b2db      	uxtb	r3, r3
 8004114:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800411a:	2b00      	cmp	r3, #0
 800411c:	dce9      	bgt.n	80040f2 <prvUnlockQueue+0x16>
 800411e:	e000      	b.n	8004122 <prvUnlockQueue+0x46>
					break;
 8004120:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	22ff      	movs	r2, #255	; 0xff
 8004126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800412a:	f001 f9bb 	bl	80054a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800412e:	f001 f985 	bl	800543c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004138:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800413a:	e011      	b.n	8004160 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d012      	beq.n	800416a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3310      	adds	r3, #16
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fc67 	bl	8004a1c <xTaskRemoveFromEventList>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004154:	f000 fd42 	bl	8004bdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004158:	7bbb      	ldrb	r3, [r7, #14]
 800415a:	3b01      	subs	r3, #1
 800415c:	b2db      	uxtb	r3, r3
 800415e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004160:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004164:	2b00      	cmp	r3, #0
 8004166:	dce9      	bgt.n	800413c <prvUnlockQueue+0x60>
 8004168:	e000      	b.n	800416c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800416a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	22ff      	movs	r2, #255	; 0xff
 8004170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004174:	f001 f996 	bl	80054a4 <vPortExitCritical>
}
 8004178:	bf00      	nop
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004188:	f001 f958 	bl	800543c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	2b00      	cmp	r3, #0
 8004192:	d102      	bne.n	800419a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004194:	2301      	movs	r3, #1
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	e001      	b.n	800419e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800419e:	f001 f981 	bl	80054a4 <vPortExitCritical>

	return xReturn;
 80041a2:	68fb      	ldr	r3, [r7, #12]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041b4:	f001 f942 	bl	800543c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d102      	bne.n	80041ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041c4:	2301      	movs	r3, #1
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	e001      	b.n	80041ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041ce:	f001 f969 	bl	80054a4 <vPortExitCritical>

	return xReturn;
 80041d2:	68fb      	ldr	r3, [r7, #12]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08e      	sub	sp, #56	; 0x38
 80041e0:	af04      	add	r7, sp, #16
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10c      	bne.n	800420a <xTaskCreateStatic+0x2e>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	b672      	cpsid	i
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	b662      	cpsie	i
 8004204:	623b      	str	r3, [r7, #32]
}
 8004206:	bf00      	nop
 8004208:	e7fe      	b.n	8004208 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800420a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10c      	bne.n	800422a <xTaskCreateStatic+0x4e>
	__asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	b672      	cpsid	i
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	b662      	cpsie	i
 8004224:	61fb      	str	r3, [r7, #28]
}
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800422a:	2354      	movs	r3, #84	; 0x54
 800422c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b54      	cmp	r3, #84	; 0x54
 8004232:	d00c      	beq.n	800424e <xTaskCreateStatic+0x72>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	b672      	cpsid	i
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	b662      	cpsie	i
 8004248:	61bb      	str	r3, [r7, #24]
}
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800424e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004252:	2b00      	cmp	r3, #0
 8004254:	d01e      	beq.n	8004294 <xTaskCreateStatic+0xb8>
 8004256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01b      	beq.n	8004294 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004264:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	2202      	movs	r2, #2
 800426a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800426e:	2300      	movs	r3, #0
 8004270:	9303      	str	r3, [sp, #12]
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	9302      	str	r3, [sp, #8]
 8004276:	f107 0314 	add.w	r3, r7, #20
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 f850 	bl	800432c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800428c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800428e:	f000 f8d7 	bl	8004440 <prvAddNewTaskToReadyList>
 8004292:	e001      	b.n	8004298 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004298:	697b      	ldr	r3, [r7, #20]
	}
 800429a:	4618      	mov	r0, r3
 800429c:	3728      	adds	r7, #40	; 0x28
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b08c      	sub	sp, #48	; 0x30
 80042a6:	af04      	add	r7, sp, #16
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	4613      	mov	r3, r2
 80042b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f001 f9ec 	bl	8005694 <pvPortMalloc>
 80042bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00e      	beq.n	80042e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042c4:	2054      	movs	r0, #84	; 0x54
 80042c6:	f001 f9e5 	bl	8005694 <pvPortMalloc>
 80042ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
 80042d8:	e005      	b.n	80042e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042da:	6978      	ldr	r0, [r7, #20]
 80042dc:	f001 faa4 	bl	8005828 <vPortFree>
 80042e0:	e001      	b.n	80042e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d017      	beq.n	800431c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042f4:	88fa      	ldrh	r2, [r7, #6]
 80042f6:	2300      	movs	r3, #0
 80042f8:	9303      	str	r3, [sp, #12]
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	9302      	str	r3, [sp, #8]
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	9301      	str	r3, [sp, #4]
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 f80e 	bl	800432c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004310:	69f8      	ldr	r0, [r7, #28]
 8004312:	f000 f895 	bl	8004440 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004316:	2301      	movs	r3, #1
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	e002      	b.n	8004322 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800431c:	f04f 33ff 	mov.w	r3, #4294967295
 8004320:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004322:	69bb      	ldr	r3, [r7, #24]
	}
 8004324:	4618      	mov	r0, r3
 8004326:	3720      	adds	r7, #32
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004344:	440b      	add	r3, r1
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	f023 0307 	bic.w	r3, r3, #7
 8004352:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00c      	beq.n	8004378 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004362:	b672      	cpsid	i
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	b662      	cpsie	i
 8004372:	617b      	str	r3, [r7, #20]
}
 8004374:	bf00      	nop
 8004376:	e7fe      	b.n	8004376 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d01f      	beq.n	80043be <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	e012      	b.n	80043aa <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	7819      	ldrb	r1, [r3, #0]
 800438c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	4413      	add	r3, r2
 8004392:	3334      	adds	r3, #52	; 0x34
 8004394:	460a      	mov	r2, r1
 8004396:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	4413      	add	r3, r2
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d006      	beq.n	80043b2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	3301      	adds	r3, #1
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	2b0f      	cmp	r3, #15
 80043ae:	d9e9      	bls.n	8004384 <prvInitialiseNewTask+0x58>
 80043b0:	e000      	b.n	80043b4 <prvInitialiseNewTask+0x88>
			{
				break;
 80043b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043bc:	e003      	b.n	80043c6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	2b06      	cmp	r3, #6
 80043ca:	d901      	bls.n	80043d0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043cc:	2306      	movs	r3, #6
 80043ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043de:	2200      	movs	r2, #0
 80043e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	3304      	adds	r3, #4
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff f8b8 	bl	800355c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ee:	3318      	adds	r3, #24
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff f8b3 	bl	800355c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	f1c3 0207 	rsb	r2, r3, #7
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800440a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	2200      	movs	r2, #0
 8004410:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	68f9      	ldr	r1, [r7, #12]
 800441e:	69b8      	ldr	r0, [r7, #24]
 8004420:	f000 ff00 	bl	8005224 <pxPortInitialiseStack>
 8004424:	4602      	mov	r2, r0
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800442a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004436:	bf00      	nop
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004448:	f000 fff8 	bl	800543c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800444c:	4b2a      	ldr	r3, [pc, #168]	; (80044f8 <prvAddNewTaskToReadyList+0xb8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3301      	adds	r3, #1
 8004452:	4a29      	ldr	r2, [pc, #164]	; (80044f8 <prvAddNewTaskToReadyList+0xb8>)
 8004454:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004456:	4b29      	ldr	r3, [pc, #164]	; (80044fc <prvAddNewTaskToReadyList+0xbc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800445e:	4a27      	ldr	r2, [pc, #156]	; (80044fc <prvAddNewTaskToReadyList+0xbc>)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004464:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <prvAddNewTaskToReadyList+0xb8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d110      	bne.n	800448e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800446c:	f000 fbda 	bl	8004c24 <prvInitialiseTaskLists>
 8004470:	e00d      	b.n	800448e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004472:	4b23      	ldr	r3, [pc, #140]	; (8004500 <prvAddNewTaskToReadyList+0xc0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800447a:	4b20      	ldr	r3, [pc, #128]	; (80044fc <prvAddNewTaskToReadyList+0xbc>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	429a      	cmp	r2, r3
 8004486:	d802      	bhi.n	800448e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004488:	4a1c      	ldr	r2, [pc, #112]	; (80044fc <prvAddNewTaskToReadyList+0xbc>)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800448e:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <prvAddNewTaskToReadyList+0xc4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3301      	adds	r3, #1
 8004494:	4a1b      	ldr	r2, [pc, #108]	; (8004504 <prvAddNewTaskToReadyList+0xc4>)
 8004496:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	2201      	movs	r2, #1
 800449e:	409a      	lsls	r2, r3
 80044a0:	4b19      	ldr	r3, [pc, #100]	; (8004508 <prvAddNewTaskToReadyList+0xc8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	4a18      	ldr	r2, [pc, #96]	; (8004508 <prvAddNewTaskToReadyList+0xc8>)
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4a15      	ldr	r2, [pc, #84]	; (800450c <prvAddNewTaskToReadyList+0xcc>)
 80044b8:	441a      	add	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3304      	adds	r3, #4
 80044be:	4619      	mov	r1, r3
 80044c0:	4610      	mov	r0, r2
 80044c2:	f7ff f858 	bl	8003576 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044c6:	f000 ffed 	bl	80054a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044ca:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <prvAddNewTaskToReadyList+0xc0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00e      	beq.n	80044f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044d2:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <prvAddNewTaskToReadyList+0xbc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	429a      	cmp	r2, r3
 80044de:	d207      	bcs.n	80044f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <prvAddNewTaskToReadyList+0xd0>)
 80044e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044f0:	bf00      	nop
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	20000380 	.word	0x20000380
 80044fc:	20000280 	.word	0x20000280
 8004500:	2000038c 	.word	0x2000038c
 8004504:	2000039c 	.word	0x2000039c
 8004508:	20000388 	.word	0x20000388
 800450c:	20000284 	.word	0x20000284
 8004510:	e000ed04 	.word	0xe000ed04

08004514 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d019      	beq.n	800455a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004526:	4b14      	ldr	r3, [pc, #80]	; (8004578 <vTaskDelay+0x64>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00c      	beq.n	8004548 <vTaskDelay+0x34>
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	b672      	cpsid	i
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	b662      	cpsie	i
 8004542:	60bb      	str	r3, [r7, #8]
}
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004548:	f000 f87e 	bl	8004648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800454c:	2100      	movs	r1, #0
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fe02 	bl	8005158 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004554:	f000 f886 	bl	8004664 <xTaskResumeAll>
 8004558:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d107      	bne.n	8004570 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004560:	4b06      	ldr	r3, [pc, #24]	; (800457c <vTaskDelay+0x68>)
 8004562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	200003a8 	.word	0x200003a8
 800457c:	e000ed04 	.word	0xe000ed04

08004580 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800458e:	463a      	mov	r2, r7
 8004590:	1d39      	adds	r1, r7, #4
 8004592:	f107 0308 	add.w	r3, r7, #8
 8004596:	4618      	mov	r0, r3
 8004598:	f7fb ffbe 	bl	8000518 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800459c:	6839      	ldr	r1, [r7, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	9202      	str	r2, [sp, #8]
 80045a4:	9301      	str	r3, [sp, #4]
 80045a6:	2300      	movs	r3, #0
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	2300      	movs	r3, #0
 80045ac:	460a      	mov	r2, r1
 80045ae:	4920      	ldr	r1, [pc, #128]	; (8004630 <vTaskStartScheduler+0xb0>)
 80045b0:	4820      	ldr	r0, [pc, #128]	; (8004634 <vTaskStartScheduler+0xb4>)
 80045b2:	f7ff fe13 	bl	80041dc <xTaskCreateStatic>
 80045b6:	4603      	mov	r3, r0
 80045b8:	4a1f      	ldr	r2, [pc, #124]	; (8004638 <vTaskStartScheduler+0xb8>)
 80045ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045bc:	4b1e      	ldr	r3, [pc, #120]	; (8004638 <vTaskStartScheduler+0xb8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045c4:	2301      	movs	r3, #1
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	e001      	b.n	80045ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d118      	bne.n	8004606 <vTaskStartScheduler+0x86>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	b672      	cpsid	i
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	b662      	cpsie	i
 80045e8:	613b      	str	r3, [r7, #16]
}
 80045ea:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045ec:	4b13      	ldr	r3, [pc, #76]	; (800463c <vTaskStartScheduler+0xbc>)
 80045ee:	f04f 32ff 	mov.w	r2, #4294967295
 80045f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045f4:	4b12      	ldr	r3, [pc, #72]	; (8004640 <vTaskStartScheduler+0xc0>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80045fa:	4b12      	ldr	r3, [pc, #72]	; (8004644 <vTaskStartScheduler+0xc4>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004600:	f000 fe9e 	bl	8005340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004604:	e010      	b.n	8004628 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460c:	d10c      	bne.n	8004628 <vTaskStartScheduler+0xa8>
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	b672      	cpsid	i
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	b662      	cpsie	i
 8004622:	60fb      	str	r3, [r7, #12]
}
 8004624:	bf00      	nop
 8004626:	e7fe      	b.n	8004626 <vTaskStartScheduler+0xa6>
}
 8004628:	bf00      	nop
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	08005c7c 	.word	0x08005c7c
 8004634:	08004bf5 	.word	0x08004bf5
 8004638:	200003a4 	.word	0x200003a4
 800463c:	200003a0 	.word	0x200003a0
 8004640:	2000038c 	.word	0x2000038c
 8004644:	20000384 	.word	0x20000384

08004648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800464c:	4b04      	ldr	r3, [pc, #16]	; (8004660 <vTaskSuspendAll+0x18>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3301      	adds	r3, #1
 8004652:	4a03      	ldr	r2, [pc, #12]	; (8004660 <vTaskSuspendAll+0x18>)
 8004654:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004656:	bf00      	nop
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	200003a8 	.word	0x200003a8

08004664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800466e:	2300      	movs	r3, #0
 8004670:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004672:	4b42      	ldr	r3, [pc, #264]	; (800477c <xTaskResumeAll+0x118>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10c      	bne.n	8004694 <xTaskResumeAll+0x30>
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	b672      	cpsid	i
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	b662      	cpsie	i
 800468e:	603b      	str	r3, [r7, #0]
}
 8004690:	bf00      	nop
 8004692:	e7fe      	b.n	8004692 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004694:	f000 fed2 	bl	800543c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004698:	4b38      	ldr	r3, [pc, #224]	; (800477c <xTaskResumeAll+0x118>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3b01      	subs	r3, #1
 800469e:	4a37      	ldr	r2, [pc, #220]	; (800477c <xTaskResumeAll+0x118>)
 80046a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046a2:	4b36      	ldr	r3, [pc, #216]	; (800477c <xTaskResumeAll+0x118>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d161      	bne.n	800476e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046aa:	4b35      	ldr	r3, [pc, #212]	; (8004780 <xTaskResumeAll+0x11c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d05d      	beq.n	800476e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046b2:	e02e      	b.n	8004712 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b4:	4b33      	ldr	r3, [pc, #204]	; (8004784 <xTaskResumeAll+0x120>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3318      	adds	r3, #24
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe ffb5 	bl	8003630 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3304      	adds	r3, #4
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe ffb0 	bl	8003630 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	2201      	movs	r2, #1
 80046d6:	409a      	lsls	r2, r3
 80046d8:	4b2b      	ldr	r3, [pc, #172]	; (8004788 <xTaskResumeAll+0x124>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4313      	orrs	r3, r2
 80046de:	4a2a      	ldr	r2, [pc, #168]	; (8004788 <xTaskResumeAll+0x124>)
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e6:	4613      	mov	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4a27      	ldr	r2, [pc, #156]	; (800478c <xTaskResumeAll+0x128>)
 80046f0:	441a      	add	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	3304      	adds	r3, #4
 80046f6:	4619      	mov	r1, r3
 80046f8:	4610      	mov	r0, r2
 80046fa:	f7fe ff3c 	bl	8003576 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004702:	4b23      	ldr	r3, [pc, #140]	; (8004790 <xTaskResumeAll+0x12c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	429a      	cmp	r2, r3
 800470a:	d302      	bcc.n	8004712 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800470c:	4b21      	ldr	r3, [pc, #132]	; (8004794 <xTaskResumeAll+0x130>)
 800470e:	2201      	movs	r2, #1
 8004710:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004712:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <xTaskResumeAll+0x120>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1cc      	bne.n	80046b4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004720:	f000 fb20 	bl	8004d64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004724:	4b1c      	ldr	r3, [pc, #112]	; (8004798 <xTaskResumeAll+0x134>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d010      	beq.n	8004752 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004730:	f000 f836 	bl	80047a0 <xTaskIncrementTick>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800473a:	4b16      	ldr	r3, [pc, #88]	; (8004794 <xTaskResumeAll+0x130>)
 800473c:	2201      	movs	r2, #1
 800473e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3b01      	subs	r3, #1
 8004744:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f1      	bne.n	8004730 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800474c:	4b12      	ldr	r3, [pc, #72]	; (8004798 <xTaskResumeAll+0x134>)
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004752:	4b10      	ldr	r3, [pc, #64]	; (8004794 <xTaskResumeAll+0x130>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d009      	beq.n	800476e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800475a:	2301      	movs	r3, #1
 800475c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800475e:	4b0f      	ldr	r3, [pc, #60]	; (800479c <xTaskResumeAll+0x138>)
 8004760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800476e:	f000 fe99 	bl	80054a4 <vPortExitCritical>

	return xAlreadyYielded;
 8004772:	68bb      	ldr	r3, [r7, #8]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	200003a8 	.word	0x200003a8
 8004780:	20000380 	.word	0x20000380
 8004784:	20000340 	.word	0x20000340
 8004788:	20000388 	.word	0x20000388
 800478c:	20000284 	.word	0x20000284
 8004790:	20000280 	.word	0x20000280
 8004794:	20000394 	.word	0x20000394
 8004798:	20000390 	.word	0x20000390
 800479c:	e000ed04 	.word	0xe000ed04

080047a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047a6:	2300      	movs	r3, #0
 80047a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047aa:	4b4f      	ldr	r3, [pc, #316]	; (80048e8 <xTaskIncrementTick+0x148>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f040 808a 	bne.w	80048c8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047b4:	4b4d      	ldr	r3, [pc, #308]	; (80048ec <xTaskIncrementTick+0x14c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3301      	adds	r3, #1
 80047ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047bc:	4a4b      	ldr	r2, [pc, #300]	; (80048ec <xTaskIncrementTick+0x14c>)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d122      	bne.n	800480e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80047c8:	4b49      	ldr	r3, [pc, #292]	; (80048f0 <xTaskIncrementTick+0x150>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00c      	beq.n	80047ec <xTaskIncrementTick+0x4c>
	__asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	b672      	cpsid	i
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	b662      	cpsie	i
 80047e6:	603b      	str	r3, [r7, #0]
}
 80047e8:	bf00      	nop
 80047ea:	e7fe      	b.n	80047ea <xTaskIncrementTick+0x4a>
 80047ec:	4b40      	ldr	r3, [pc, #256]	; (80048f0 <xTaskIncrementTick+0x150>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	4b40      	ldr	r3, [pc, #256]	; (80048f4 <xTaskIncrementTick+0x154>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a3e      	ldr	r2, [pc, #248]	; (80048f0 <xTaskIncrementTick+0x150>)
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	4a3e      	ldr	r2, [pc, #248]	; (80048f4 <xTaskIncrementTick+0x154>)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	4b3d      	ldr	r3, [pc, #244]	; (80048f8 <xTaskIncrementTick+0x158>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3301      	adds	r3, #1
 8004806:	4a3c      	ldr	r2, [pc, #240]	; (80048f8 <xTaskIncrementTick+0x158>)
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	f000 faab 	bl	8004d64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800480e:	4b3b      	ldr	r3, [pc, #236]	; (80048fc <xTaskIncrementTick+0x15c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	429a      	cmp	r2, r3
 8004816:	d348      	bcc.n	80048aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004818:	4b35      	ldr	r3, [pc, #212]	; (80048f0 <xTaskIncrementTick+0x150>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d104      	bne.n	800482c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004822:	4b36      	ldr	r3, [pc, #216]	; (80048fc <xTaskIncrementTick+0x15c>)
 8004824:	f04f 32ff 	mov.w	r2, #4294967295
 8004828:	601a      	str	r2, [r3, #0]
					break;
 800482a:	e03e      	b.n	80048aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800482c:	4b30      	ldr	r3, [pc, #192]	; (80048f0 <xTaskIncrementTick+0x150>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	d203      	bcs.n	800484c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004844:	4a2d      	ldr	r2, [pc, #180]	; (80048fc <xTaskIncrementTick+0x15c>)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800484a:	e02e      	b.n	80048aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	3304      	adds	r3, #4
 8004850:	4618      	mov	r0, r3
 8004852:	f7fe feed 	bl	8003630 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485a:	2b00      	cmp	r3, #0
 800485c:	d004      	beq.n	8004868 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	3318      	adds	r3, #24
 8004862:	4618      	mov	r0, r3
 8004864:	f7fe fee4 	bl	8003630 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	2201      	movs	r2, #1
 800486e:	409a      	lsls	r2, r3
 8004870:	4b23      	ldr	r3, [pc, #140]	; (8004900 <xTaskIncrementTick+0x160>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4313      	orrs	r3, r2
 8004876:	4a22      	ldr	r2, [pc, #136]	; (8004900 <xTaskIncrementTick+0x160>)
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4a1f      	ldr	r2, [pc, #124]	; (8004904 <xTaskIncrementTick+0x164>)
 8004888:	441a      	add	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	3304      	adds	r3, #4
 800488e:	4619      	mov	r1, r3
 8004890:	4610      	mov	r0, r2
 8004892:	f7fe fe70 	bl	8003576 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489a:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <xTaskIncrementTick+0x168>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d3b9      	bcc.n	8004818 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80048a4:	2301      	movs	r3, #1
 80048a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048a8:	e7b6      	b.n	8004818 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048aa:	4b17      	ldr	r3, [pc, #92]	; (8004908 <xTaskIncrementTick+0x168>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b0:	4914      	ldr	r1, [pc, #80]	; (8004904 <xTaskIncrementTick+0x164>)
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d907      	bls.n	80048d2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80048c2:	2301      	movs	r3, #1
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	e004      	b.n	80048d2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80048c8:	4b10      	ldr	r3, [pc, #64]	; (800490c <xTaskIncrementTick+0x16c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3301      	adds	r3, #1
 80048ce:	4a0f      	ldr	r2, [pc, #60]	; (800490c <xTaskIncrementTick+0x16c>)
 80048d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80048d2:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <xTaskIncrementTick+0x170>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80048da:	2301      	movs	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80048de:	697b      	ldr	r3, [r7, #20]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	200003a8 	.word	0x200003a8
 80048ec:	20000384 	.word	0x20000384
 80048f0:	20000338 	.word	0x20000338
 80048f4:	2000033c 	.word	0x2000033c
 80048f8:	20000398 	.word	0x20000398
 80048fc:	200003a0 	.word	0x200003a0
 8004900:	20000388 	.word	0x20000388
 8004904:	20000284 	.word	0x20000284
 8004908:	20000280 	.word	0x20000280
 800490c:	20000390 	.word	0x20000390
 8004910:	20000394 	.word	0x20000394

08004914 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800491a:	4b28      	ldr	r3, [pc, #160]	; (80049bc <vTaskSwitchContext+0xa8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004922:	4b27      	ldr	r3, [pc, #156]	; (80049c0 <vTaskSwitchContext+0xac>)
 8004924:	2201      	movs	r2, #1
 8004926:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004928:	e041      	b.n	80049ae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800492a:	4b25      	ldr	r3, [pc, #148]	; (80049c0 <vTaskSwitchContext+0xac>)
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004930:	4b24      	ldr	r3, [pc, #144]	; (80049c4 <vTaskSwitchContext+0xb0>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	fab3 f383 	clz	r3, r3
 800493c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800493e:	7afb      	ldrb	r3, [r7, #11]
 8004940:	f1c3 031f 	rsb	r3, r3, #31
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	4920      	ldr	r1, [pc, #128]	; (80049c8 <vTaskSwitchContext+0xb4>)
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	440b      	add	r3, r1
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10c      	bne.n	8004974 <vTaskSwitchContext+0x60>
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	b672      	cpsid	i
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	b662      	cpsie	i
 800496e:	607b      	str	r3, [r7, #4]
}
 8004970:	bf00      	nop
 8004972:	e7fe      	b.n	8004972 <vTaskSwitchContext+0x5e>
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4a12      	ldr	r2, [pc, #72]	; (80049c8 <vTaskSwitchContext+0xb4>)
 8004980:	4413      	add	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	605a      	str	r2, [r3, #4]
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	3308      	adds	r3, #8
 8004996:	429a      	cmp	r2, r3
 8004998:	d104      	bne.n	80049a4 <vTaskSwitchContext+0x90>
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	605a      	str	r2, [r3, #4]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	4a08      	ldr	r2, [pc, #32]	; (80049cc <vTaskSwitchContext+0xb8>)
 80049ac:	6013      	str	r3, [r2, #0]
}
 80049ae:	bf00      	nop
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	200003a8 	.word	0x200003a8
 80049c0:	20000394 	.word	0x20000394
 80049c4:	20000388 	.word	0x20000388
 80049c8:	20000284 	.word	0x20000284
 80049cc:	20000280 	.word	0x20000280

080049d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10c      	bne.n	80049fa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	b672      	cpsid	i
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	b662      	cpsie	i
 80049f4:	60fb      	str	r3, [r7, #12]
}
 80049f6:	bf00      	nop
 80049f8:	e7fe      	b.n	80049f8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049fa:	4b07      	ldr	r3, [pc, #28]	; (8004a18 <vTaskPlaceOnEventList+0x48>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3318      	adds	r3, #24
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fe fddb 	bl	80035be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a08:	2101      	movs	r1, #1
 8004a0a:	6838      	ldr	r0, [r7, #0]
 8004a0c:	f000 fba4 	bl	8005158 <prvAddCurrentTaskToDelayedList>
}
 8004a10:	bf00      	nop
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000280 	.word	0x20000280

08004a1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10c      	bne.n	8004a4c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	b672      	cpsid	i
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	b662      	cpsie	i
 8004a46:	60fb      	str	r3, [r7, #12]
}
 8004a48:	bf00      	nop
 8004a4a:	e7fe      	b.n	8004a4a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	3318      	adds	r3, #24
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fe fded 	bl	8003630 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a56:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <xTaskRemoveFromEventList+0xb0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d11c      	bne.n	8004a98 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	3304      	adds	r3, #4
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fe fde4 	bl	8003630 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <xTaskRemoveFromEventList+0xb4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	4a16      	ldr	r2, [pc, #88]	; (8004ad0 <xTaskRemoveFromEventList+0xb4>)
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4a13      	ldr	r2, [pc, #76]	; (8004ad4 <xTaskRemoveFromEventList+0xb8>)
 8004a88:	441a      	add	r2, r3
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4610      	mov	r0, r2
 8004a92:	f7fe fd70 	bl	8003576 <vListInsertEnd>
 8004a96:	e005      	b.n	8004aa4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	3318      	adds	r3, #24
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	480e      	ldr	r0, [pc, #56]	; (8004ad8 <xTaskRemoveFromEventList+0xbc>)
 8004aa0:	f7fe fd69 	bl	8003576 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <xTaskRemoveFromEventList+0xc0>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d905      	bls.n	8004abe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <xTaskRemoveFromEventList+0xc4>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e001      	b.n	8004ac2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ac2:	697b      	ldr	r3, [r7, #20]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	200003a8 	.word	0x200003a8
 8004ad0:	20000388 	.word	0x20000388
 8004ad4:	20000284 	.word	0x20000284
 8004ad8:	20000340 	.word	0x20000340
 8004adc:	20000280 	.word	0x20000280
 8004ae0:	20000394 	.word	0x20000394

08004ae4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004aec:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <vTaskInternalSetTimeOutState+0x24>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <vTaskInternalSetTimeOutState+0x28>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	605a      	str	r2, [r3, #4]
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	20000398 	.word	0x20000398
 8004b0c:	20000384 	.word	0x20000384

08004b10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10c      	bne.n	8004b3a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	b672      	cpsid	i
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	b662      	cpsie	i
 8004b34:	613b      	str	r3, [r7, #16]
}
 8004b36:	bf00      	nop
 8004b38:	e7fe      	b.n	8004b38 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10c      	bne.n	8004b5a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	b672      	cpsid	i
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	b662      	cpsie	i
 8004b54:	60fb      	str	r3, [r7, #12]
}
 8004b56:	bf00      	nop
 8004b58:	e7fe      	b.n	8004b58 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8004b5a:	f000 fc6f 	bl	800543c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b5e:	4b1d      	ldr	r3, [pc, #116]	; (8004bd4 <xTaskCheckForTimeOut+0xc4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b76:	d102      	bne.n	8004b7e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61fb      	str	r3, [r7, #28]
 8004b7c:	e023      	b.n	8004bc6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <xTaskCheckForTimeOut+0xc8>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d007      	beq.n	8004b9a <xTaskCheckForTimeOut+0x8a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d302      	bcc.n	8004b9a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b94:	2301      	movs	r3, #1
 8004b96:	61fb      	str	r3, [r7, #28]
 8004b98:	e015      	b.n	8004bc6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d20b      	bcs.n	8004bbc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	1ad2      	subs	r2, r2, r3
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff ff97 	bl	8004ae4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
 8004bba:	e004      	b.n	8004bc6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004bc6:	f000 fc6d 	bl	80054a4 <vPortExitCritical>

	return xReturn;
 8004bca:	69fb      	ldr	r3, [r7, #28]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3720      	adds	r7, #32
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20000384 	.word	0x20000384
 8004bd8:	20000398 	.word	0x20000398

08004bdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004be0:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <vTaskMissedYield+0x14>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
}
 8004be6:	bf00      	nop
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	20000394 	.word	0x20000394

08004bf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bfc:	f000 f852 	bl	8004ca4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c00:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <prvIdleTask+0x28>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d9f9      	bls.n	8004bfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <prvIdleTask+0x2c>)
 8004c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c18:	e7f0      	b.n	8004bfc <prvIdleTask+0x8>
 8004c1a:	bf00      	nop
 8004c1c:	20000284 	.word	0x20000284
 8004c20:	e000ed04 	.word	0xe000ed04

08004c24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	607b      	str	r3, [r7, #4]
 8004c2e:	e00c      	b.n	8004c4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4a12      	ldr	r2, [pc, #72]	; (8004c84 <prvInitialiseTaskLists+0x60>)
 8004c3c:	4413      	add	r3, r2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fc6c 	bl	800351c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3301      	adds	r3, #1
 8004c48:	607b      	str	r3, [r7, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b06      	cmp	r3, #6
 8004c4e:	d9ef      	bls.n	8004c30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c50:	480d      	ldr	r0, [pc, #52]	; (8004c88 <prvInitialiseTaskLists+0x64>)
 8004c52:	f7fe fc63 	bl	800351c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c56:	480d      	ldr	r0, [pc, #52]	; (8004c8c <prvInitialiseTaskLists+0x68>)
 8004c58:	f7fe fc60 	bl	800351c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c5c:	480c      	ldr	r0, [pc, #48]	; (8004c90 <prvInitialiseTaskLists+0x6c>)
 8004c5e:	f7fe fc5d 	bl	800351c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c62:	480c      	ldr	r0, [pc, #48]	; (8004c94 <prvInitialiseTaskLists+0x70>)
 8004c64:	f7fe fc5a 	bl	800351c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c68:	480b      	ldr	r0, [pc, #44]	; (8004c98 <prvInitialiseTaskLists+0x74>)
 8004c6a:	f7fe fc57 	bl	800351c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <prvInitialiseTaskLists+0x78>)
 8004c70:	4a05      	ldr	r2, [pc, #20]	; (8004c88 <prvInitialiseTaskLists+0x64>)
 8004c72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c74:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <prvInitialiseTaskLists+0x7c>)
 8004c76:	4a05      	ldr	r2, [pc, #20]	; (8004c8c <prvInitialiseTaskLists+0x68>)
 8004c78:	601a      	str	r2, [r3, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000284 	.word	0x20000284
 8004c88:	20000310 	.word	0x20000310
 8004c8c:	20000324 	.word	0x20000324
 8004c90:	20000340 	.word	0x20000340
 8004c94:	20000354 	.word	0x20000354
 8004c98:	2000036c 	.word	0x2000036c
 8004c9c:	20000338 	.word	0x20000338
 8004ca0:	2000033c 	.word	0x2000033c

08004ca4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004caa:	e019      	b.n	8004ce0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004cac:	f000 fbc6 	bl	800543c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cb0:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <prvCheckTasksWaitingTermination+0x50>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fe fcb7 	bl	8003630 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <prvCheckTasksWaitingTermination+0x54>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	4a0b      	ldr	r2, [pc, #44]	; (8004cf8 <prvCheckTasksWaitingTermination+0x54>)
 8004cca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <prvCheckTasksWaitingTermination+0x58>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <prvCheckTasksWaitingTermination+0x58>)
 8004cd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004cd6:	f000 fbe5 	bl	80054a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f810 	bl	8004d00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ce0:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <prvCheckTasksWaitingTermination+0x58>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e1      	bne.n	8004cac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20000354 	.word	0x20000354
 8004cf8:	20000380 	.word	0x20000380
 8004cfc:	20000368 	.word	0x20000368

08004d00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d108      	bne.n	8004d24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fd86 	bl	8005828 <vPortFree>
				vPortFree( pxTCB );
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fd83 	bl	8005828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d22:	e01a      	b.n	8004d5a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d103      	bne.n	8004d36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fd7a 	bl	8005828 <vPortFree>
	}
 8004d34:	e011      	b.n	8004d5a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d00c      	beq.n	8004d5a <prvDeleteTCB+0x5a>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	b672      	cpsid	i
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	b662      	cpsie	i
 8004d54:	60fb      	str	r3, [r7, #12]
}
 8004d56:	bf00      	nop
 8004d58:	e7fe      	b.n	8004d58 <prvDeleteTCB+0x58>
	}
 8004d5a:	bf00      	nop
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d6a:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <prvResetNextTaskUnblockTime+0x38>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d104      	bne.n	8004d7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d74:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <prvResetNextTaskUnblockTime+0x3c>)
 8004d76:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d7c:	e008      	b.n	8004d90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d7e:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <prvResetNextTaskUnblockTime+0x38>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	4a04      	ldr	r2, [pc, #16]	; (8004da0 <prvResetNextTaskUnblockTime+0x3c>)
 8004d8e:	6013      	str	r3, [r2, #0]
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	20000338 	.word	0x20000338
 8004da0:	200003a0 	.word	0x200003a0

08004da4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004daa:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <xTaskGetSchedulerState+0x34>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d102      	bne.n	8004db8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004db2:	2301      	movs	r3, #1
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	e008      	b.n	8004dca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004db8:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <xTaskGetSchedulerState+0x38>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d102      	bne.n	8004dc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	607b      	str	r3, [r7, #4]
 8004dc4:	e001      	b.n	8004dca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004dca:	687b      	ldr	r3, [r7, #4]
	}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	2000038c 	.word	0x2000038c
 8004ddc:	200003a8 	.word	0x200003a8

08004de0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d069      	beq.n	8004eca <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfa:	4b36      	ldr	r3, [pc, #216]	; (8004ed4 <xTaskPriorityInherit+0xf4>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d259      	bcs.n	8004eb8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	db06      	blt.n	8004e1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e0c:	4b31      	ldr	r3, [pc, #196]	; (8004ed4 <xTaskPriorityInherit+0xf4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	f1c3 0207 	rsb	r2, r3, #7
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	6959      	ldr	r1, [r3, #20]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4a2b      	ldr	r2, [pc, #172]	; (8004ed8 <xTaskPriorityInherit+0xf8>)
 8004e2c:	4413      	add	r3, r2
 8004e2e:	4299      	cmp	r1, r3
 8004e30:	d13a      	bne.n	8004ea8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	3304      	adds	r3, #4
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fe fbfa 	bl	8003630 <uxListRemove>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d115      	bne.n	8004e6e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e46:	4924      	ldr	r1, [pc, #144]	; (8004ed8 <xTaskPriorityInherit+0xf8>)
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <xTaskPriorityInherit+0x8e>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	43da      	mvns	r2, r3
 8004e64:	4b1d      	ldr	r3, [pc, #116]	; (8004edc <xTaskPriorityInherit+0xfc>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	4a1c      	ldr	r2, [pc, #112]	; (8004edc <xTaskPriorityInherit+0xfc>)
 8004e6c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e6e:	4b19      	ldr	r3, [pc, #100]	; (8004ed4 <xTaskPriorityInherit+0xf4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	4b16      	ldr	r3, [pc, #88]	; (8004edc <xTaskPriorityInherit+0xfc>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	4a15      	ldr	r2, [pc, #84]	; (8004edc <xTaskPriorityInherit+0xfc>)
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4a10      	ldr	r2, [pc, #64]	; (8004ed8 <xTaskPriorityInherit+0xf8>)
 8004e98:	441a      	add	r2, r3
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f7fe fb68 	bl	8003576 <vListInsertEnd>
 8004ea6:	e004      	b.n	8004eb2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ea8:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <xTaskPriorityInherit+0xf4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	e008      	b.n	8004eca <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <xTaskPriorityInherit+0xf4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d201      	bcs.n	8004eca <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004eca:	68fb      	ldr	r3, [r7, #12]
	}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000280 	.word	0x20000280
 8004ed8:	20000284 	.word	0x20000284
 8004edc:	20000388 	.word	0x20000388

08004ee0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d072      	beq.n	8004fdc <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ef6:	4b3c      	ldr	r3, [pc, #240]	; (8004fe8 <xTaskPriorityDisinherit+0x108>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d00c      	beq.n	8004f1a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	b672      	cpsid	i
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	b662      	cpsie	i
 8004f14:	60fb      	str	r3, [r7, #12]
}
 8004f16:	bf00      	nop
 8004f18:	e7fe      	b.n	8004f18 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10c      	bne.n	8004f3c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f26:	b672      	cpsid	i
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	b662      	cpsie	i
 8004f36:	60bb      	str	r3, [r7, #8]
}
 8004f38:	bf00      	nop
 8004f3a:	e7fe      	b.n	8004f3a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f40:	1e5a      	subs	r2, r3, #1
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d044      	beq.n	8004fdc <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d140      	bne.n	8004fdc <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fe fb66 	bl	8003630 <uxListRemove>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d115      	bne.n	8004f96 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6e:	491f      	ldr	r1, [pc, #124]	; (8004fec <xTaskPriorityDisinherit+0x10c>)
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <xTaskPriorityDisinherit+0xb6>
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	2201      	movs	r2, #1
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43da      	mvns	r2, r3
 8004f8c:	4b18      	ldr	r3, [pc, #96]	; (8004ff0 <xTaskPriorityDisinherit+0x110>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4013      	ands	r3, r2
 8004f92:	4a17      	ldr	r2, [pc, #92]	; (8004ff0 <xTaskPriorityDisinherit+0x110>)
 8004f94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	f1c3 0207 	rsb	r2, r3, #7
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	2201      	movs	r2, #1
 8004fb0:	409a      	lsls	r2, r3
 8004fb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <xTaskPriorityDisinherit+0x110>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	4a0d      	ldr	r2, [pc, #52]	; (8004ff0 <xTaskPriorityDisinherit+0x110>)
 8004fba:	6013      	str	r3, [r2, #0]
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4a08      	ldr	r2, [pc, #32]	; (8004fec <xTaskPriorityDisinherit+0x10c>)
 8004fca:	441a      	add	r2, r3
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	f7fe facf 	bl	8003576 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fdc:	697b      	ldr	r3, [r7, #20]
	}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000280 	.word	0x20000280
 8004fec:	20000284 	.word	0x20000284
 8004ff0:	20000388 	.word	0x20000388

08004ff4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005002:	2301      	movs	r3, #1
 8005004:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 8087 	beq.w	800511c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10c      	bne.n	8005030 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	b672      	cpsid	i
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	b662      	cpsie	i
 800502a:	60fb      	str	r3, [r7, #12]
}
 800502c:	bf00      	nop
 800502e:	e7fe      	b.n	800502e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d902      	bls.n	8005040 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	e002      	b.n	8005046 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005044:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	429a      	cmp	r2, r3
 800504e:	d065      	beq.n	800511c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	429a      	cmp	r2, r3
 8005058:	d160      	bne.n	800511c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800505a:	4b32      	ldr	r3, [pc, #200]	; (8005124 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	429a      	cmp	r2, r3
 8005062:	d10c      	bne.n	800507e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	b672      	cpsid	i
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	b662      	cpsie	i
 8005078:	60bb      	str	r3, [r7, #8]
}
 800507a:	bf00      	nop
 800507c:	e7fe      	b.n	800507c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	2b00      	cmp	r3, #0
 8005090:	db04      	blt.n	800509c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	f1c3 0207 	rsb	r2, r3, #7
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	6959      	ldr	r1, [r3, #20]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4a1f      	ldr	r2, [pc, #124]	; (8005128 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80050ac:	4413      	add	r3, r2
 80050ae:	4299      	cmp	r1, r3
 80050b0:	d134      	bne.n	800511c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	3304      	adds	r3, #4
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe faba 	bl	8003630 <uxListRemove>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d115      	bne.n	80050ee <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c6:	4918      	ldr	r1, [pc, #96]	; (8005128 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	2201      	movs	r2, #1
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43da      	mvns	r2, r3
 80050e4:	4b11      	ldr	r3, [pc, #68]	; (800512c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4013      	ands	r3, r2
 80050ea:	4a10      	ldr	r2, [pc, #64]	; (800512c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80050ec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	2201      	movs	r2, #1
 80050f4:	409a      	lsls	r2, r3
 80050f6:	4b0d      	ldr	r3, [pc, #52]	; (800512c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	4a0b      	ldr	r2, [pc, #44]	; (800512c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4a06      	ldr	r2, [pc, #24]	; (8005128 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800510e:	441a      	add	r2, r3
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	3304      	adds	r3, #4
 8005114:	4619      	mov	r1, r3
 8005116:	4610      	mov	r0, r2
 8005118:	f7fe fa2d 	bl	8003576 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800511c:	bf00      	nop
 800511e:	3720      	adds	r7, #32
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20000280 	.word	0x20000280
 8005128:	20000284 	.word	0x20000284
 800512c:	20000388 	.word	0x20000388

08005130 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005134:	4b07      	ldr	r3, [pc, #28]	; (8005154 <pvTaskIncrementMutexHeldCount+0x24>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d004      	beq.n	8005146 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800513c:	4b05      	ldr	r3, [pc, #20]	; (8005154 <pvTaskIncrementMutexHeldCount+0x24>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005142:	3201      	adds	r2, #1
 8005144:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005146:	4b03      	ldr	r3, [pc, #12]	; (8005154 <pvTaskIncrementMutexHeldCount+0x24>)
 8005148:	681b      	ldr	r3, [r3, #0]
	}
 800514a:	4618      	mov	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	20000280 	.word	0x20000280

08005158 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005162:	4b29      	ldr	r3, [pc, #164]	; (8005208 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005168:	4b28      	ldr	r3, [pc, #160]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3304      	adds	r3, #4
 800516e:	4618      	mov	r0, r3
 8005170:	f7fe fa5e 	bl	8003630 <uxListRemove>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10b      	bne.n	8005192 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800517a:	4b24      	ldr	r3, [pc, #144]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	2201      	movs	r2, #1
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	43da      	mvns	r2, r3
 8005188:	4b21      	ldr	r3, [pc, #132]	; (8005210 <prvAddCurrentTaskToDelayedList+0xb8>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4013      	ands	r3, r2
 800518e:	4a20      	ldr	r2, [pc, #128]	; (8005210 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005190:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d10a      	bne.n	80051b0 <prvAddCurrentTaskToDelayedList+0x58>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d007      	beq.n	80051b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051a0:	4b1a      	ldr	r3, [pc, #104]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3304      	adds	r3, #4
 80051a6:	4619      	mov	r1, r3
 80051a8:	481a      	ldr	r0, [pc, #104]	; (8005214 <prvAddCurrentTaskToDelayedList+0xbc>)
 80051aa:	f7fe f9e4 	bl	8003576 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051ae:	e026      	b.n	80051fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4413      	add	r3, r2
 80051b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051b8:	4b14      	ldr	r3, [pc, #80]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d209      	bcs.n	80051dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051c8:	4b13      	ldr	r3, [pc, #76]	; (8005218 <prvAddCurrentTaskToDelayedList+0xc0>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3304      	adds	r3, #4
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f7fe f9f2 	bl	80035be <vListInsert>
}
 80051da:	e010      	b.n	80051fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051dc:	4b0f      	ldr	r3, [pc, #60]	; (800521c <prvAddCurrentTaskToDelayedList+0xc4>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	4b0a      	ldr	r3, [pc, #40]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3304      	adds	r3, #4
 80051e6:	4619      	mov	r1, r3
 80051e8:	4610      	mov	r0, r2
 80051ea:	f7fe f9e8 	bl	80035be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051ee:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <prvAddCurrentTaskToDelayedList+0xc8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d202      	bcs.n	80051fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80051f8:	4a09      	ldr	r2, [pc, #36]	; (8005220 <prvAddCurrentTaskToDelayedList+0xc8>)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	6013      	str	r3, [r2, #0]
}
 80051fe:	bf00      	nop
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000384 	.word	0x20000384
 800520c:	20000280 	.word	0x20000280
 8005210:	20000388 	.word	0x20000388
 8005214:	2000036c 	.word	0x2000036c
 8005218:	2000033c 	.word	0x2000033c
 800521c:	20000338 	.word	0x20000338
 8005220:	200003a0 	.word	0x200003a0

08005224 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3b04      	subs	r3, #4
 8005234:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800523c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3b04      	subs	r3, #4
 8005242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f023 0201 	bic.w	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3b04      	subs	r3, #4
 8005252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005254:	4a0c      	ldr	r2, [pc, #48]	; (8005288 <pxPortInitialiseStack+0x64>)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3b14      	subs	r3, #20
 800525e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	3b04      	subs	r3, #4
 800526a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f06f 0202 	mvn.w	r2, #2
 8005272:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3b20      	subs	r3, #32
 8005278:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800527a:	68fb      	ldr	r3, [r7, #12]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	0800528d 	.word	0x0800528d

0800528c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005296:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <prvTaskExitError+0x5c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529e:	d00c      	beq.n	80052ba <prvTaskExitError+0x2e>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	b672      	cpsid	i
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	b662      	cpsie	i
 80052b4:	60fb      	str	r3, [r7, #12]
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <prvTaskExitError+0x2c>
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	b672      	cpsid	i
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	b662      	cpsie	i
 80052ce:	60bb      	str	r3, [r7, #8]
}
 80052d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052d2:	bf00      	nop
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0fc      	beq.n	80052d4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052da:	bf00      	nop
 80052dc:	bf00      	nop
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	2000000c 	.word	0x2000000c
 80052ec:	00000000 	.word	0x00000000

080052f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052f0:	4b07      	ldr	r3, [pc, #28]	; (8005310 <pxCurrentTCBConst2>)
 80052f2:	6819      	ldr	r1, [r3, #0]
 80052f4:	6808      	ldr	r0, [r1, #0]
 80052f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052fa:	f380 8809 	msr	PSP, r0
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f04f 0000 	mov.w	r0, #0
 8005306:	f380 8811 	msr	BASEPRI, r0
 800530a:	4770      	bx	lr
 800530c:	f3af 8000 	nop.w

08005310 <pxCurrentTCBConst2>:
 8005310:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005314:	bf00      	nop
 8005316:	bf00      	nop

08005318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005318:	4808      	ldr	r0, [pc, #32]	; (800533c <prvPortStartFirstTask+0x24>)
 800531a:	6800      	ldr	r0, [r0, #0]
 800531c:	6800      	ldr	r0, [r0, #0]
 800531e:	f380 8808 	msr	MSP, r0
 8005322:	f04f 0000 	mov.w	r0, #0
 8005326:	f380 8814 	msr	CONTROL, r0
 800532a:	b662      	cpsie	i
 800532c:	b661      	cpsie	f
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	df00      	svc	0
 8005338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800533a:	bf00      	nop
 800533c:	e000ed08 	.word	0xe000ed08

08005340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005346:	4b37      	ldr	r3, [pc, #220]	; (8005424 <xPortStartScheduler+0xe4>)
 8005348:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	22ff      	movs	r2, #255	; 0xff
 8005356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005368:	b2da      	uxtb	r2, r3
 800536a:	4b2f      	ldr	r3, [pc, #188]	; (8005428 <xPortStartScheduler+0xe8>)
 800536c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800536e:	4b2f      	ldr	r3, [pc, #188]	; (800542c <xPortStartScheduler+0xec>)
 8005370:	2207      	movs	r2, #7
 8005372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005374:	e009      	b.n	800538a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005376:	4b2d      	ldr	r3, [pc, #180]	; (800542c <xPortStartScheduler+0xec>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3b01      	subs	r3, #1
 800537c:	4a2b      	ldr	r2, [pc, #172]	; (800542c <xPortStartScheduler+0xec>)
 800537e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	b2db      	uxtb	r3, r3
 8005388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800538a:	78fb      	ldrb	r3, [r7, #3]
 800538c:	b2db      	uxtb	r3, r3
 800538e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005392:	2b80      	cmp	r3, #128	; 0x80
 8005394:	d0ef      	beq.n	8005376 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005396:	4b25      	ldr	r3, [pc, #148]	; (800542c <xPortStartScheduler+0xec>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f1c3 0307 	rsb	r3, r3, #7
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d00c      	beq.n	80053bc <xPortStartScheduler+0x7c>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	b672      	cpsid	i
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	b662      	cpsie	i
 80053b6:	60bb      	str	r3, [r7, #8]
}
 80053b8:	bf00      	nop
 80053ba:	e7fe      	b.n	80053ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053bc:	4b1b      	ldr	r3, [pc, #108]	; (800542c <xPortStartScheduler+0xec>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	4a1a      	ldr	r2, [pc, #104]	; (800542c <xPortStartScheduler+0xec>)
 80053c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053c6:	4b19      	ldr	r3, [pc, #100]	; (800542c <xPortStartScheduler+0xec>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053ce:	4a17      	ldr	r2, [pc, #92]	; (800542c <xPortStartScheduler+0xec>)
 80053d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053da:	4b15      	ldr	r3, [pc, #84]	; (8005430 <xPortStartScheduler+0xf0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a14      	ldr	r2, [pc, #80]	; (8005430 <xPortStartScheduler+0xf0>)
 80053e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053e6:	4b12      	ldr	r3, [pc, #72]	; (8005430 <xPortStartScheduler+0xf0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a11      	ldr	r2, [pc, #68]	; (8005430 <xPortStartScheduler+0xf0>)
 80053ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053f2:	f000 f8dd 	bl	80055b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <xPortStartScheduler+0xf4>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80053fc:	f000 f8fc 	bl	80055f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005400:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <xPortStartScheduler+0xf8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a0c      	ldr	r2, [pc, #48]	; (8005438 <xPortStartScheduler+0xf8>)
 8005406:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800540a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800540c:	f7ff ff84 	bl	8005318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005410:	f7ff fa80 	bl	8004914 <vTaskSwitchContext>
	prvTaskExitError();
 8005414:	f7ff ff3a 	bl	800528c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	e000e400 	.word	0xe000e400
 8005428:	200003ac 	.word	0x200003ac
 800542c:	200003b0 	.word	0x200003b0
 8005430:	e000ed20 	.word	0xe000ed20
 8005434:	2000000c 	.word	0x2000000c
 8005438:	e000ef34 	.word	0xe000ef34

0800543c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	b672      	cpsid	i
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	b662      	cpsie	i
 8005456:	607b      	str	r3, [r7, #4]
}
 8005458:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800545a:	4b10      	ldr	r3, [pc, #64]	; (800549c <vPortEnterCritical+0x60>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3301      	adds	r3, #1
 8005460:	4a0e      	ldr	r2, [pc, #56]	; (800549c <vPortEnterCritical+0x60>)
 8005462:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005464:	4b0d      	ldr	r3, [pc, #52]	; (800549c <vPortEnterCritical+0x60>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d111      	bne.n	8005490 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800546c:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <vPortEnterCritical+0x64>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00c      	beq.n	8005490 <vPortEnterCritical+0x54>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	b672      	cpsid	i
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	b662      	cpsie	i
 800548a:	603b      	str	r3, [r7, #0]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <vPortEnterCritical+0x52>
	}
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	2000000c 	.word	0x2000000c
 80054a0:	e000ed04 	.word	0xe000ed04

080054a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054aa:	4b13      	ldr	r3, [pc, #76]	; (80054f8 <vPortExitCritical+0x54>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10c      	bne.n	80054cc <vPortExitCritical+0x28>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	b672      	cpsid	i
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	b662      	cpsie	i
 80054c6:	607b      	str	r3, [r7, #4]
}
 80054c8:	bf00      	nop
 80054ca:	e7fe      	b.n	80054ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80054cc:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <vPortExitCritical+0x54>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	4a09      	ldr	r2, [pc, #36]	; (80054f8 <vPortExitCritical+0x54>)
 80054d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054d6:	4b08      	ldr	r3, [pc, #32]	; (80054f8 <vPortExitCritical+0x54>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d105      	bne.n	80054ea <vPortExitCritical+0x46>
 80054de:	2300      	movs	r3, #0
 80054e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	f383 8811 	msr	BASEPRI, r3
}
 80054e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	2000000c 	.word	0x2000000c
 80054fc:	00000000 	.word	0x00000000

08005500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005500:	f3ef 8009 	mrs	r0, PSP
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	4b15      	ldr	r3, [pc, #84]	; (8005560 <pxCurrentTCBConst>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	f01e 0f10 	tst.w	lr, #16
 8005510:	bf08      	it	eq
 8005512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551a:	6010      	str	r0, [r2, #0]
 800551c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005524:	b672      	cpsid	i
 8005526:	f380 8811 	msr	BASEPRI, r0
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	b662      	cpsie	i
 8005534:	f7ff f9ee 	bl	8004914 <vTaskSwitchContext>
 8005538:	f04f 0000 	mov.w	r0, #0
 800553c:	f380 8811 	msr	BASEPRI, r0
 8005540:	bc09      	pop	{r0, r3}
 8005542:	6819      	ldr	r1, [r3, #0]
 8005544:	6808      	ldr	r0, [r1, #0]
 8005546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554a:	f01e 0f10 	tst.w	lr, #16
 800554e:	bf08      	it	eq
 8005550:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005554:	f380 8809 	msr	PSP, r0
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop

08005560 <pxCurrentTCBConst>:
 8005560:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop

08005568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	b672      	cpsid	i
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	b662      	cpsie	i
 8005582:	607b      	str	r3, [r7, #4]
}
 8005584:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005586:	f7ff f90b 	bl	80047a0 <xTaskIncrementTick>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005590:	4b06      	ldr	r3, [pc, #24]	; (80055ac <SysTick_Handler+0x44>)
 8005592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	2300      	movs	r3, #0
 800559a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	f383 8811 	msr	BASEPRI, r3
}
 80055a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055a4:	bf00      	nop
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	e000ed04 	.word	0xe000ed04

080055b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055b4:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <vPortSetupTimerInterrupt+0x34>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055ba:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <vPortSetupTimerInterrupt+0x38>)
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055c0:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <vPortSetupTimerInterrupt+0x3c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <vPortSetupTimerInterrupt+0x40>)
 80055c6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ca:	099b      	lsrs	r3, r3, #6
 80055cc:	4a09      	ldr	r2, [pc, #36]	; (80055f4 <vPortSetupTimerInterrupt+0x44>)
 80055ce:	3b01      	subs	r3, #1
 80055d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055d2:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <vPortSetupTimerInterrupt+0x34>)
 80055d4:	2207      	movs	r2, #7
 80055d6:	601a      	str	r2, [r3, #0]
}
 80055d8:	bf00      	nop
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	e000e010 	.word	0xe000e010
 80055e8:	e000e018 	.word	0xe000e018
 80055ec:	20000000 	.word	0x20000000
 80055f0:	10624dd3 	.word	0x10624dd3
 80055f4:	e000e014 	.word	0xe000e014

080055f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005608 <vPortEnableVFP+0x10>
 80055fc:	6801      	ldr	r1, [r0, #0]
 80055fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005602:	6001      	str	r1, [r0, #0]
 8005604:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005606:	bf00      	nop
 8005608:	e000ed88 	.word	0xe000ed88

0800560c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005612:	f3ef 8305 	mrs	r3, IPSR
 8005616:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b0f      	cmp	r3, #15
 800561c:	d916      	bls.n	800564c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800561e:	4a19      	ldr	r2, [pc, #100]	; (8005684 <vPortValidateInterruptPriority+0x78>)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4413      	add	r3, r2
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005628:	4b17      	ldr	r3, [pc, #92]	; (8005688 <vPortValidateInterruptPriority+0x7c>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	7afa      	ldrb	r2, [r7, #11]
 800562e:	429a      	cmp	r2, r3
 8005630:	d20c      	bcs.n	800564c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	b672      	cpsid	i
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	b662      	cpsie	i
 8005646:	607b      	str	r3, [r7, #4]
}
 8005648:	bf00      	nop
 800564a:	e7fe      	b.n	800564a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800564c:	4b0f      	ldr	r3, [pc, #60]	; (800568c <vPortValidateInterruptPriority+0x80>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005654:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <vPortValidateInterruptPriority+0x84>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d90c      	bls.n	8005676 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	b672      	cpsid	i
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	b662      	cpsie	i
 8005670:	603b      	str	r3, [r7, #0]
}
 8005672:	bf00      	nop
 8005674:	e7fe      	b.n	8005674 <vPortValidateInterruptPriority+0x68>
	}
 8005676:	bf00      	nop
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	e000e3f0 	.word	0xe000e3f0
 8005688:	200003ac 	.word	0x200003ac
 800568c:	e000ed0c 	.word	0xe000ed0c
 8005690:	200003b0 	.word	0x200003b0

08005694 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08a      	sub	sp, #40	; 0x28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056a0:	f7fe ffd2 	bl	8004648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056a4:	4b5b      	ldr	r3, [pc, #364]	; (8005814 <pvPortMalloc+0x180>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056ac:	f000 f91a 	bl	80058e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056b0:	4b59      	ldr	r3, [pc, #356]	; (8005818 <pvPortMalloc+0x184>)
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4013      	ands	r3, r2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f040 8092 	bne.w	80057e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01f      	beq.n	8005704 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80056c4:	2208      	movs	r2, #8
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4413      	add	r3, r2
 80056ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d016      	beq.n	8005704 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f023 0307 	bic.w	r3, r3, #7
 80056dc:	3308      	adds	r3, #8
 80056de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00c      	beq.n	8005704 <pvPortMalloc+0x70>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	b672      	cpsid	i
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	b662      	cpsie	i
 80056fe:	617b      	str	r3, [r7, #20]
}
 8005700:	bf00      	nop
 8005702:	e7fe      	b.n	8005702 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d06b      	beq.n	80057e2 <pvPortMalloc+0x14e>
 800570a:	4b44      	ldr	r3, [pc, #272]	; (800581c <pvPortMalloc+0x188>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	429a      	cmp	r2, r3
 8005712:	d866      	bhi.n	80057e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005714:	4b42      	ldr	r3, [pc, #264]	; (8005820 <pvPortMalloc+0x18c>)
 8005716:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005718:	4b41      	ldr	r3, [pc, #260]	; (8005820 <pvPortMalloc+0x18c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800571e:	e004      	b.n	800572a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	429a      	cmp	r2, r3
 8005732:	d903      	bls.n	800573c <pvPortMalloc+0xa8>
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1f1      	bne.n	8005720 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800573c:	4b35      	ldr	r3, [pc, #212]	; (8005814 <pvPortMalloc+0x180>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005742:	429a      	cmp	r2, r3
 8005744:	d04d      	beq.n	80057e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2208      	movs	r2, #8
 800574c:	4413      	add	r3, r2
 800574e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	1ad2      	subs	r2, r2, r3
 8005760:	2308      	movs	r3, #8
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	429a      	cmp	r2, r3
 8005766:	d921      	bls.n	80057ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4413      	add	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00c      	beq.n	8005794 <pvPortMalloc+0x100>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577e:	b672      	cpsid	i
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	b662      	cpsie	i
 800578e:	613b      	str	r3, [r7, #16]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	1ad2      	subs	r2, r2, r3
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057a6:	69b8      	ldr	r0, [r7, #24]
 80057a8:	f000 f8fe 	bl	80059a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057ac:	4b1b      	ldr	r3, [pc, #108]	; (800581c <pvPortMalloc+0x188>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	4a19      	ldr	r2, [pc, #100]	; (800581c <pvPortMalloc+0x188>)
 80057b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057ba:	4b18      	ldr	r3, [pc, #96]	; (800581c <pvPortMalloc+0x188>)
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4b19      	ldr	r3, [pc, #100]	; (8005824 <pvPortMalloc+0x190>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d203      	bcs.n	80057ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057c6:	4b15      	ldr	r3, [pc, #84]	; (800581c <pvPortMalloc+0x188>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a16      	ldr	r2, [pc, #88]	; (8005824 <pvPortMalloc+0x190>)
 80057cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	4b11      	ldr	r3, [pc, #68]	; (8005818 <pvPortMalloc+0x184>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057e2:	f7fe ff3f 	bl	8004664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00c      	beq.n	800580a <pvPortMalloc+0x176>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	b672      	cpsid	i
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	b662      	cpsie	i
 8005804:	60fb      	str	r3, [r7, #12]
}
 8005806:	bf00      	nop
 8005808:	e7fe      	b.n	8005808 <pvPortMalloc+0x174>
	return pvReturn;
 800580a:	69fb      	ldr	r3, [r7, #28]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3728      	adds	r7, #40	; 0x28
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20003fbc 	.word	0x20003fbc
 8005818:	20003fc8 	.word	0x20003fc8
 800581c:	20003fc0 	.word	0x20003fc0
 8005820:	20003fb4 	.word	0x20003fb4
 8005824:	20003fc4 	.word	0x20003fc4

08005828 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d04c      	beq.n	80058d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800583a:	2308      	movs	r3, #8
 800583c:	425b      	negs	r3, r3
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4413      	add	r3, r2
 8005842:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	4b23      	ldr	r3, [pc, #140]	; (80058dc <vPortFree+0xb4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4013      	ands	r3, r2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10c      	bne.n	8005870 <vPortFree+0x48>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	b672      	cpsid	i
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	b662      	cpsie	i
 800586a:	60fb      	str	r3, [r7, #12]
}
 800586c:	bf00      	nop
 800586e:	e7fe      	b.n	800586e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00c      	beq.n	8005892 <vPortFree+0x6a>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	b672      	cpsid	i
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	b662      	cpsie	i
 800588c:	60bb      	str	r3, [r7, #8]
}
 800588e:	bf00      	nop
 8005890:	e7fe      	b.n	8005890 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	4b11      	ldr	r3, [pc, #68]	; (80058dc <vPortFree+0xb4>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4013      	ands	r3, r2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d019      	beq.n	80058d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d115      	bne.n	80058d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <vPortFree+0xb4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	43db      	mvns	r3, r3
 80058b2:	401a      	ands	r2, r3
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058b8:	f7fe fec6 	bl	8004648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	4b07      	ldr	r3, [pc, #28]	; (80058e0 <vPortFree+0xb8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4413      	add	r3, r2
 80058c6:	4a06      	ldr	r2, [pc, #24]	; (80058e0 <vPortFree+0xb8>)
 80058c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058ca:	6938      	ldr	r0, [r7, #16]
 80058cc:	f000 f86c 	bl	80059a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80058d0:	f7fe fec8 	bl	8004664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058d4:	bf00      	nop
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20003fc8 	.word	0x20003fc8
 80058e0:	20003fc0 	.word	0x20003fc0

080058e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80058ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058f0:	4b27      	ldr	r3, [pc, #156]	; (8005990 <prvHeapInit+0xac>)
 80058f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00c      	beq.n	8005918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3307      	adds	r3, #7
 8005902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0307 	bic.w	r3, r3, #7
 800590a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	4a1f      	ldr	r2, [pc, #124]	; (8005990 <prvHeapInit+0xac>)
 8005914:	4413      	add	r3, r2
 8005916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800591c:	4a1d      	ldr	r2, [pc, #116]	; (8005994 <prvHeapInit+0xb0>)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005922:	4b1c      	ldr	r3, [pc, #112]	; (8005994 <prvHeapInit+0xb0>)
 8005924:	2200      	movs	r2, #0
 8005926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	4413      	add	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005930:	2208      	movs	r2, #8
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0307 	bic.w	r3, r3, #7
 800593e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4a15      	ldr	r2, [pc, #84]	; (8005998 <prvHeapInit+0xb4>)
 8005944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005946:	4b14      	ldr	r3, [pc, #80]	; (8005998 <prvHeapInit+0xb4>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2200      	movs	r2, #0
 800594c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800594e:	4b12      	ldr	r3, [pc, #72]	; (8005998 <prvHeapInit+0xb4>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	1ad2      	subs	r2, r2, r3
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005964:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <prvHeapInit+0xb4>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	4a0a      	ldr	r2, [pc, #40]	; (800599c <prvHeapInit+0xb8>)
 8005972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	4a09      	ldr	r2, [pc, #36]	; (80059a0 <prvHeapInit+0xbc>)
 800597a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800597c:	4b09      	ldr	r3, [pc, #36]	; (80059a4 <prvHeapInit+0xc0>)
 800597e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005982:	601a      	str	r2, [r3, #0]
}
 8005984:	bf00      	nop
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	200003b4 	.word	0x200003b4
 8005994:	20003fb4 	.word	0x20003fb4
 8005998:	20003fbc 	.word	0x20003fbc
 800599c:	20003fc4 	.word	0x20003fc4
 80059a0:	20003fc0 	.word	0x20003fc0
 80059a4:	20003fc8 	.word	0x20003fc8

080059a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059b0:	4b28      	ldr	r3, [pc, #160]	; (8005a54 <prvInsertBlockIntoFreeList+0xac>)
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	e002      	b.n	80059bc <prvInsertBlockIntoFreeList+0x14>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d8f7      	bhi.n	80059b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	4413      	add	r3, r2
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d108      	bne.n	80059ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	441a      	add	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	441a      	add	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d118      	bne.n	8005a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	4b15      	ldr	r3, [pc, #84]	; (8005a58 <prvInsertBlockIntoFreeList+0xb0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d00d      	beq.n	8005a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	441a      	add	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	e008      	b.n	8005a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a26:	4b0c      	ldr	r3, [pc, #48]	; (8005a58 <prvInsertBlockIntoFreeList+0xb0>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	e003      	b.n	8005a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d002      	beq.n	8005a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	20003fb4 	.word	0x20003fb4
 8005a58:	20003fbc 	.word	0x20003fbc

08005a5c <__libc_init_array>:
 8005a5c:	b570      	push	{r4, r5, r6, lr}
 8005a5e:	4d0d      	ldr	r5, [pc, #52]	; (8005a94 <__libc_init_array+0x38>)
 8005a60:	4c0d      	ldr	r4, [pc, #52]	; (8005a98 <__libc_init_array+0x3c>)
 8005a62:	1b64      	subs	r4, r4, r5
 8005a64:	10a4      	asrs	r4, r4, #2
 8005a66:	2600      	movs	r6, #0
 8005a68:	42a6      	cmp	r6, r4
 8005a6a:	d109      	bne.n	8005a80 <__libc_init_array+0x24>
 8005a6c:	4d0b      	ldr	r5, [pc, #44]	; (8005a9c <__libc_init_array+0x40>)
 8005a6e:	4c0c      	ldr	r4, [pc, #48]	; (8005aa0 <__libc_init_array+0x44>)
 8005a70:	f000 f82e 	bl	8005ad0 <_init>
 8005a74:	1b64      	subs	r4, r4, r5
 8005a76:	10a4      	asrs	r4, r4, #2
 8005a78:	2600      	movs	r6, #0
 8005a7a:	42a6      	cmp	r6, r4
 8005a7c:	d105      	bne.n	8005a8a <__libc_init_array+0x2e>
 8005a7e:	bd70      	pop	{r4, r5, r6, pc}
 8005a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a84:	4798      	blx	r3
 8005a86:	3601      	adds	r6, #1
 8005a88:	e7ee      	b.n	8005a68 <__libc_init_array+0xc>
 8005a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a8e:	4798      	blx	r3
 8005a90:	3601      	adds	r6, #1
 8005a92:	e7f2      	b.n	8005a7a <__libc_init_array+0x1e>
 8005a94:	08005ca4 	.word	0x08005ca4
 8005a98:	08005ca4 	.word	0x08005ca4
 8005a9c:	08005ca4 	.word	0x08005ca4
 8005aa0:	08005ca8 	.word	0x08005ca8

08005aa4 <memcpy>:
 8005aa4:	440a      	add	r2, r1
 8005aa6:	4291      	cmp	r1, r2
 8005aa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005aac:	d100      	bne.n	8005ab0 <memcpy+0xc>
 8005aae:	4770      	bx	lr
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aba:	4291      	cmp	r1, r2
 8005abc:	d1f9      	bne.n	8005ab2 <memcpy+0xe>
 8005abe:	bd10      	pop	{r4, pc}

08005ac0 <memset>:
 8005ac0:	4402      	add	r2, r0
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d100      	bne.n	8005aca <memset+0xa>
 8005ac8:	4770      	bx	lr
 8005aca:	f803 1b01 	strb.w	r1, [r3], #1
 8005ace:	e7f9      	b.n	8005ac4 <memset+0x4>

08005ad0 <_init>:
 8005ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad2:	bf00      	nop
 8005ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad6:	bc08      	pop	{r3}
 8005ad8:	469e      	mov	lr, r3
 8005ada:	4770      	bx	lr

08005adc <_fini>:
 8005adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ade:	bf00      	nop
 8005ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae2:	bc08      	pop	{r3}
 8005ae4:	469e      	mov	lr, r3
 8005ae6:	4770      	bx	lr
