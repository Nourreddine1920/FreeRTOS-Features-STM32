
Simple-queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006964  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08006b34  08006b34  00016b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dc8  08006dc8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006dc8  08006dc8  00016dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dd0  08006dd0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dd0  08006dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dd4  08006dd4  00016dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040c0  20000074  08006e4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004134  08006e4c  00024134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185c5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000312c  00000000  00000000  00038669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  0003b798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  0003c8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027cc2  00000000  00000000  0003d8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c97  00000000  00000000  000655b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8103  00000000  00000000  0007b249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017334c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af8  00000000  00000000  001733a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006b1c 	.word	0x08006b1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006b1c 	.word	0x08006b1c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <vApplicationGetIdleTaskMemory+0x30>)
 80005ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000090 	.word	0x20000090
 80005e8:	200000e4 	.word	0x200000e4

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fbf8 	bl	8000de6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f86d 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f907 	bl	800080c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f8d5 	bl	80007ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /************************* Create Integer Queue ****************************/
   SimpleQueue = xQueueCreate(5, sizeof (int)); // creation of a queue which can store 5 integers
 8000602:	2200      	movs	r2, #0
 8000604:	2104      	movs	r1, #4
 8000606:	2005      	movs	r0, #5
 8000608:	f003 ff1e 	bl	8004448 <xQueueGenericCreate>
 800060c:	4603      	mov	r3, r0
 800060e:	4a23      	ldr	r2, [pc, #140]	; (800069c <main+0xb0>)
 8000610:	6013      	str	r3, [r2, #0]
   if (SimpleQueue == 0)  // Queue not created like there is an error
 8000612:	4b22      	ldr	r3, [pc, #136]	; (800069c <main+0xb0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d10d      	bne.n	8000636 <main+0x4a>
   {
 	  char *str = "Unable to create Integer Queue\n\n";
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <main+0xb4>)
 800061c:	603b      	str	r3, [r7, #0]
 	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 800061e:	6838      	ldr	r0, [r7, #0]
 8000620:	f7ff fdf6 	bl	8000210 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	b29a      	uxth	r2, r3
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	6839      	ldr	r1, [r7, #0]
 800062e:	481d      	ldr	r0, [pc, #116]	; (80006a4 <main+0xb8>)
 8000630:	f002 fb5a 	bl	8002ce8 <HAL_UART_Transmit>
 8000634:	e00c      	b.n	8000650 <main+0x64>
   }
   else
   {
 	  char *str = "Integer Queue Created successfully\n\n";
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <main+0xbc>)
 8000638:	607b      	str	r3, [r7, #4]
 	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f7ff fde8 	bl	8000210 <strlen>
 8000640:	4603      	mov	r3, r0
 8000642:	b29a      	uxth	r2, r3
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	6879      	ldr	r1, [r7, #4]
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <main+0xb8>)
 800064c:	f002 fb4c 	bl	8002ce8 <HAL_UART_Transmit>
   }


   /****************************** TASK RELATED ******************************/

    xTaskCreate(Sender_HPT_Task, "HPT_SEND", 128, NULL, 3, &Sender_HPT_Handler);
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <main+0xc0>)
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	2303      	movs	r3, #3
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2300      	movs	r3, #0
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	4914      	ldr	r1, [pc, #80]	; (80006b0 <main+0xc4>)
 800065e:	4815      	ldr	r0, [pc, #84]	; (80006b4 <main+0xc8>)
 8000660:	f004 fb53 	bl	8004d0a <xTaskCreate>
    xTaskCreate(Sender_LPT_Task, "LPT_SEND", 128, (void *)111 , 2, &Sender_LPT_Handler);
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <main+0xcc>)
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	2302      	movs	r3, #2
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	236f      	movs	r3, #111	; 0x6f
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	4912      	ldr	r1, [pc, #72]	; (80006bc <main+0xd0>)
 8000672:	4813      	ldr	r0, [pc, #76]	; (80006c0 <main+0xd4>)
 8000674:	f004 fb49 	bl	8004d0a <xTaskCreate>

    xTaskCreate(Receiver_Task, "Receive", 128, NULL, 1, &Receiver_Handler);
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <main+0xd8>)
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	2301      	movs	r3, #1
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2300      	movs	r3, #0
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	4910      	ldr	r1, [pc, #64]	; (80006c8 <main+0xdc>)
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <main+0xe0>)
 8000688:	f004 fb3f 	bl	8004d0a <xTaskCreate>


    HAL_UART_Receive_IT(&huart2, &Rx_data, 1);
 800068c:	2201      	movs	r2, #1
 800068e:	4910      	ldr	r1, [pc, #64]	; (80006d0 <main+0xe4>)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <main+0xb8>)
 8000692:	f002 fbbc 	bl	8002e0e <HAL_UART_Receive_IT>

    vTaskStartScheduler();
 8000696:	f004 fca7 	bl	8004fe8 <vTaskStartScheduler>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069a:	e7fe      	b.n	800069a <main+0xae>
 800069c:	20004048 	.word	0x20004048
 80006a0:	08006b34 	.word	0x08006b34
 80006a4:	2000404c 	.word	0x2000404c
 80006a8:	08006b58 	.word	0x08006b58
 80006ac:	2000403c 	.word	0x2000403c
 80006b0:	08006b80 	.word	0x08006b80
 80006b4:	080008a1 	.word	0x080008a1
 80006b8:	200040d0 	.word	0x200040d0
 80006bc:	08006b8c 	.word	0x08006b8c
 80006c0:	08000919 	.word	0x08000919
 80006c4:	20004040 	.word	0x20004040
 80006c8:	08006b98 	.word	0x08006b98
 80006cc:	08000989 	.word	0x08000989
 80006d0:	20004044 	.word	0x20004044

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f005 fdf2 	bl	80062cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <SystemClock_Config+0xd0>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a29      	ldr	r2, [pc, #164]	; (80007a4 <SystemClock_Config+0xd0>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <SystemClock_Config+0xd0>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <SystemClock_Config+0xd4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <SystemClock_Config+0xd4>)
 8000716:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000740:	23d8      	movs	r3, #216	; 0xd8
 8000742:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000748:	2309      	movs	r3, #9
 800074a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	4618      	mov	r0, r3
 8000752:	f000 feff 	bl	8001554 <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800075c:	f000 f9bc 	bl	8000ad8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000760:	f000 fea8 	bl	80014b4 <HAL_PWREx_EnableOverDrive>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800076a:	f000 f9b5 	bl	8000ad8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2302      	movs	r3, #2
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2107      	movs	r1, #7
 800078c:	4618      	mov	r0, r3
 800078e:	f001 f985 	bl	8001a9c <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000798:	f000 f99e 	bl	8000ad8 <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3750      	adds	r7, #80	; 0x50
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <MX_USART2_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007f0:	f002 fa2c 	bl	8002c4c <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 f96d 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000404c 	.word	0x2000404c
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a1c      	ldr	r2, [pc, #112]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_GPIO_Init+0x8c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a10      	ldr	r2, [pc, #64]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2102      	movs	r1, #2
 800086e:	480b      	ldr	r0, [pc, #44]	; (800089c <MX_GPIO_Init+0x90>)
 8000870:	f000 fe06 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000874:	2302      	movs	r3, #2
 8000876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4619      	mov	r1, r3
 800088a:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_GPIO_Init+0x90>)
 800088c:	f000 fc4c 	bl	8001128 <HAL_GPIO_Init>

}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800
 800089c:	40022000 	.word	0x40022000

080008a0 <Sender_HPT_Task>:

/* USER CODE BEGIN 4 */
void Sender_HPT_Task (void *argument)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	int i=222;
 80008a8:	23de      	movs	r3, #222	; 0xde
 80008aa:	60bb      	str	r3, [r7, #8]
	uint32_t TickDelay = pdMS_TO_TICKS(2000);
 80008ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008b0:	617b      	str	r3, [r7, #20]
	while (1)
	{
		char *str = "Entered SENDER_HPT Task\n about to SEND a number to the queue\n\n";
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <Sender_HPT_Task+0x68>)
 80008b4:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80008b6:	6938      	ldr	r0, [r7, #16]
 80008b8:	f7ff fcaa 	bl	8000210 <strlen>
 80008bc:	4603      	mov	r3, r0
 80008be:	b29a      	uxth	r2, r3
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295
 80008c4:	6939      	ldr	r1, [r7, #16]
 80008c6:	4811      	ldr	r0, [pc, #68]	; (800090c <Sender_HPT_Task+0x6c>)
 80008c8:	f002 fa0e 	bl	8002ce8 <HAL_UART_Transmit>

		if (xQueueSend(SimpleQueue, &i, portMAX_DELAY) == pdPASS)
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <Sender_HPT_Task+0x70>)
 80008ce:	6818      	ldr	r0, [r3, #0]
 80008d0:	f107 0108 	add.w	r1, r7, #8
 80008d4:	2300      	movs	r3, #0
 80008d6:	f04f 32ff 	mov.w	r2, #4294967295
 80008da:	f003 fe17 	bl	800450c <xQueueGenericSend>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d10c      	bne.n	80008fe <Sender_HPT_Task+0x5e>
		{
			char *str2 = " Successfully sent the number to the queue\nLeaving SENDER_HPT Task\n\n\n";
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <Sender_HPT_Task+0x74>)
 80008e6:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f7ff fc91 	bl	8000210 <strlen>
 80008ee:	4603      	mov	r3, r0
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	68f9      	ldr	r1, [r7, #12]
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <Sender_HPT_Task+0x6c>)
 80008fa:	f002 f9f5 	bl	8002ce8 <HAL_UART_Transmit>
		}

		vTaskDelay(TickDelay);
 80008fe:	6978      	ldr	r0, [r7, #20]
 8000900:	f004 fb3c 	bl	8004f7c <vTaskDelay>
	{
 8000904:	e7d5      	b.n	80008b2 <Sender_HPT_Task+0x12>
 8000906:	bf00      	nop
 8000908:	08006ba0 	.word	0x08006ba0
 800090c:	2000404c 	.word	0x2000404c
 8000910:	20004048 	.word	0x20004048
 8000914:	08006be0 	.word	0x08006be0

08000918 <Sender_LPT_Task>:
	}
}

void Sender_LPT_Task (void *argument)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	int ToSend;
	uint32_t TickDelay = pdMS_TO_TICKS(1000);
 8000920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000924:	617b      	str	r3, [r7, #20]
	while (1)
	{
		ToSend = (int) argument;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	60bb      	str	r3, [r7, #8]
		char *str = "Entered SENDER_LPT Task\n about to SEND a number to the queue\n\n";
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <Sender_LPT_Task+0x60>)
 800092c:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 800092e:	6938      	ldr	r0, [r7, #16]
 8000930:	f7ff fc6e 	bl	8000210 <strlen>
 8000934:	4603      	mov	r3, r0
 8000936:	b29a      	uxth	r2, r3
 8000938:	f04f 33ff 	mov.w	r3, #4294967295
 800093c:	6939      	ldr	r1, [r7, #16]
 800093e:	480f      	ldr	r0, [pc, #60]	; (800097c <Sender_LPT_Task+0x64>)
 8000940:	f002 f9d2 	bl	8002ce8 <HAL_UART_Transmit>

		xQueueSend(SimpleQueue, &ToSend, portMAX_DELAY);
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <Sender_LPT_Task+0x68>)
 8000946:	6818      	ldr	r0, [r3, #0]
 8000948:	f107 0108 	add.w	r1, r7, #8
 800094c:	2300      	movs	r3, #0
 800094e:	f04f 32ff 	mov.w	r2, #4294967295
 8000952:	f003 fddb 	bl	800450c <xQueueGenericSend>

		char *str2 = " Successfully sent the number to the queue\nLeaving SENDER_LPT Task\n\n\n";
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <Sender_LPT_Task+0x6c>)
 8000958:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 800095a:	68f8      	ldr	r0, [r7, #12]
 800095c:	f7ff fc58 	bl	8000210 <strlen>
 8000960:	4603      	mov	r3, r0
 8000962:	b29a      	uxth	r2, r3
 8000964:	f04f 33ff 	mov.w	r3, #4294967295
 8000968:	68f9      	ldr	r1, [r7, #12]
 800096a:	4804      	ldr	r0, [pc, #16]	; (800097c <Sender_LPT_Task+0x64>)
 800096c:	f002 f9bc 	bl	8002ce8 <HAL_UART_Transmit>

		vTaskDelay(TickDelay);
 8000970:	6978      	ldr	r0, [r7, #20]
 8000972:	f004 fb03 	bl	8004f7c <vTaskDelay>
	{
 8000976:	e7d6      	b.n	8000926 <Sender_LPT_Task+0xe>
 8000978:	08006c28 	.word	0x08006c28
 800097c:	2000404c 	.word	0x2000404c
 8000980:	20004048 	.word	0x20004048
 8000984:	08006c68 	.word	0x08006c68

08000988 <Receiver_Task>:
	}
}

void Receiver_Task (void *argument)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b09e      	sub	sp, #120	; 0x78
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	int received=0;
 8000990:	2300      	movs	r3, #0
 8000992:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t TickDelay = pdMS_TO_TICKS(3000);
 8000994:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000998:	677b      	str	r3, [r7, #116]	; 0x74
	while (1)
	{
		char str[100];
		strcpy (str, "Entered RECEIVER Task\n about to RECEIVE a number from the queue\n\n");
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4a21      	ldr	r2, [pc, #132]	; (8000a24 <Receiver_Task+0x9c>)
 80009a0:	4618      	mov	r0, r3
 80009a2:	4611      	mov	r1, r2
 80009a4:	2342      	movs	r3, #66	; 0x42
 80009a6:	461a      	mov	r2, r3
 80009a8:	f005 fc82 	bl	80062b0 <memcpy>
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fc2d 	bl	8000210 <strlen>
 80009b6:	4603      	mov	r3, r0
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	f107 010c 	add.w	r1, r7, #12
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	4819      	ldr	r0, [pc, #100]	; (8000a28 <Receiver_Task+0xa0>)
 80009c4:	f002 f990 	bl	8002ce8 <HAL_UART_Transmit>

		if (xQueueReceive(SimpleQueue, &received, portMAX_DELAY) != pdTRUE)
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <Receiver_Task+0xa4>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295
 80009d4:	4618      	mov	r0, r3
 80009d6:	f003 ff3f 	bl	8004858 <xQueueReceive>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d007      	beq.n	80009f0 <Receiver_Task+0x68>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)"Error in Receiving from Queue\n\n", 31, 1000);
 80009e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e4:	221f      	movs	r2, #31
 80009e6:	4912      	ldr	r1, [pc, #72]	; (8000a30 <Receiver_Task+0xa8>)
 80009e8:	480f      	ldr	r0, [pc, #60]	; (8000a28 <Receiver_Task+0xa0>)
 80009ea:	f002 f97d 	bl	8002ce8 <HAL_UART_Transmit>
 80009ee:	e014      	b.n	8000a1a <Receiver_Task+0x92>
		}
		else
		{
			sprintf(str, " Successfully RECEIVED the number %d to the queue\nLeaving RECEIVER Task\n\n\n",received);
 80009f0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	490f      	ldr	r1, [pc, #60]	; (8000a34 <Receiver_Task+0xac>)
 80009f8:	4618      	mov	r0, r3
 80009fa:	f005 fc6f 	bl	80062dc <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fc04 	bl	8000210 <strlen>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	f107 010c 	add.w	r1, r7, #12
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <Receiver_Task+0xa0>)
 8000a16:	f002 f967 	bl	8002ce8 <HAL_UART_Transmit>
		}

		vTaskDelay(TickDelay);
 8000a1a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000a1c:	f004 faae 	bl	8004f7c <vTaskDelay>
	{
 8000a20:	e7bb      	b.n	800099a <Receiver_Task+0x12>
 8000a22:	bf00      	nop
 8000a24:	08006cb0 	.word	0x08006cb0
 8000a28:	2000404c 	.word	0x2000404c
 8000a2c:	20004048 	.word	0x20004048
 8000a30:	08006cf4 	.word	0x08006cf4
 8000a34:	08006d14 	.word	0x08006d14

08000a38 <HAL_UART_RxCpltCallback>:
	}
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &Rx_data, 1);
 8000a40:	2201      	movs	r2, #1
 8000a42:	4917      	ldr	r1, [pc, #92]	; (8000aa0 <HAL_UART_RxCpltCallback+0x68>)
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f002 f9e2 	bl	8002e0e <HAL_UART_Receive_IT>
	int ToSend = 123456789;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_UART_RxCpltCallback+0x6c>)
 8000a4c:	60fb      	str	r3, [r7, #12]
	if (Rx_data == 'r')
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_UART_RxCpltCallback+0x68>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b72      	cmp	r3, #114	; 0x72
 8000a54:	d11f      	bne.n	8000a96 <HAL_UART_RxCpltCallback+0x5e>
	{
		 /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
		 it will get set to pdTRUE inside the interrupt safe API function if a
		 context switch is required. */
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]

		if (xQueueSendToFrontFromISR(SimpleQueue, &ToSend, &xHigherPriorityTaskWoken) == pdPASS)
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <HAL_UART_RxCpltCallback+0x70>)
 8000a5c:	6818      	ldr	r0, [r3, #0]
 8000a5e:	f107 0208 	add.w	r2, r7, #8
 8000a62:	f107 010c 	add.w	r1, r7, #12
 8000a66:	2301      	movs	r3, #1
 8000a68:	f003 fe56 	bl	8004718 <xQueueGenericSendFromISR>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d106      	bne.n	8000a80 <HAL_UART_RxCpltCallback+0x48>
		{
			HAL_UART_Transmit(huart, (uint8_t *)"\n\nSent from ISR\n\n", 17, 500);
 8000a72:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a76:	2211      	movs	r2, #17
 8000a78:	490c      	ldr	r1, [pc, #48]	; (8000aac <HAL_UART_RxCpltCallback+0x74>)
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f002 f934 	bl	8002ce8 <HAL_UART_Transmit>
		 xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR()
		 then calling portEND_SWITCHING_ISR() will request a context switch. If
		 xHigherPriorityTaskWoken is still pdFALSE then calling
		 portEND_SWITCHING_ISR() will have no effect */

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d007      	beq.n	8000a96 <HAL_UART_RxCpltCallback+0x5e>
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_UART_RxCpltCallback+0x78>)
 8000a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	f3bf 8f4f 	dsb	sy
 8000a92:	f3bf 8f6f 	isb	sy
	}
}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20004044 	.word	0x20004044
 8000aa4:	075bcd15 	.word	0x075bcd15
 8000aa8:	20004048 	.word	0x20004048
 8000aac:	08006d60 	.word	0x08006d60
 8000ab0:	e000ed04 	.word	0xe000ed04

08000ab4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d101      	bne.n	8000aca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ac6:	f000 f99b 	bl	8000e00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40010000 	.word	0x40010000

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <Error_Handler+0x8>
	...

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <HAL_MspInit+0x4c>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	210f      	movs	r1, #15
 8000b1e:	f06f 0001 	mvn.w	r0, #1
 8000b22:	f000 fa45 	bl	8000fb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800

08000b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0aa      	sub	sp, #168	; 0xa8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	2284      	movs	r2, #132	; 0x84
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f005 fbb9 	bl	80062cc <memset>
  if(huart->Instance==USART2)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a25      	ldr	r2, [pc, #148]	; (8000bf4 <HAL_UART_MspInit+0xc0>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d142      	bne.n	8000bea <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4618      	mov	r0, r3
 8000b72:	f001 f99b 	bl	8001eac <HAL_RCCEx_PeriphCLKConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b7c:	f7ff ffac 	bl	8000ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <HAL_UART_MspInit+0xc4>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <HAL_UART_MspInit+0xc4>)
 8000b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <HAL_UART_MspInit+0xc4>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_UART_MspInit+0xc4>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <HAL_UART_MspInit+0xc4>)
 8000b9e:	f043 0308 	orr.w	r3, r3, #8
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_UART_MspInit+0xc4>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f003 0308 	and.w	r3, r3, #8
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8000bb0:	2360      	movs	r3, #96	; 0x60
 8000bb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4809      	ldr	r0, [pc, #36]	; (8000bfc <HAL_UART_MspInit+0xc8>)
 8000bd6:	f000 faa7 	bl	8001128 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2105      	movs	r1, #5
 8000bde:	2026      	movs	r0, #38	; 0x26
 8000be0:	f000 f9e6 	bl	8000fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000be4:	2026      	movs	r0, #38	; 0x26
 8000be6:	f000 f9ff 	bl	8000fe8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bea:	bf00      	nop
 8000bec:	37a8      	adds	r7, #168	; 0xa8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40004400 	.word	0x40004400
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020c00 	.word	0x40020c00

08000c00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	; 0x30
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	2019      	movs	r0, #25
 8000c16:	f000 f9cb 	bl	8000fb0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c1a:	2019      	movs	r0, #25
 8000c1c:	f000 f9e4 	bl	8000fe8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c20:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <HAL_InitTick+0xa0>)
 8000c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c24:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <HAL_InitTick+0xa0>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <HAL_InitTick+0xa0>)
 8000c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c38:	f107 0210 	add.w	r2, r7, #16
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 f900 	bl	8001e48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c48:	f001 f8ea 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c54:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <HAL_InitTick+0xa4>)
 8000c56:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5a:	0c9b      	lsrs	r3, r3, #18
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_InitTick+0xa8>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <HAL_InitTick+0xac>)
 8000c64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <HAL_InitTick+0xa8>)
 8000c68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c6c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <HAL_InitTick+0xa8>)
 8000c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c72:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_InitTick+0xa8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_InitTick+0xa8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c80:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <HAL_InitTick+0xa8>)
 8000c82:	f001 fd03 	bl	800268c <HAL_TIM_Base_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d104      	bne.n	8000c96 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c8c:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <HAL_InitTick+0xa8>)
 8000c8e:	f001 fd5f 	bl	8002750 <HAL_TIM_Base_Start_IT>
 8000c92:	4603      	mov	r3, r0
 8000c94:	e000      	b.n	8000c98 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3730      	adds	r7, #48	; 0x30
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	431bde83 	.word	0x431bde83
 8000ca8:	200040d4 	.word	0x200040d4
 8000cac:	40010000 	.word	0x40010000

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ce2:	f001 fdad 	bl	8002840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200040d4 	.word	0x200040d4

08000cf0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <USART2_IRQHandler+0x10>)
 8000cf6:	f002 f8d9 	bl	8002eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	2000404c 	.word	0x2000404c

08000d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <_sbrk+0x5c>)
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <_sbrk+0x60>)
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <_sbrk+0x64>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <_sbrk+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d34:	f005 fa92 	bl	800625c <__errno>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	e009      	b.n	8000d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <_sbrk+0x64>)
 8000d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20050000 	.word	0x20050000
 8000d64:	00000400 	.word	0x00000400
 8000d68:	200002e4 	.word	0x200002e4
 8000d6c:	20004138 	.word	0x20004138

08000d70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9a:	490e      	ldr	r1, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db0:	4c0b      	ldr	r4, [pc, #44]	; (8000de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dbe:	f7ff ffd7 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f005 fa51 	bl	8006268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fc11 	bl	80005ec <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000dd8:	08006dd8 	.word	0x08006dd8
  ldr r2, =_sbss
 8000ddc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000de0:	20004134 	.word	0x20004134

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>

08000de6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dea:	2003      	movs	r0, #3
 8000dec:	f000 f8d5 	bl	8000f9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df0:	200f      	movs	r0, #15
 8000df2:	f7ff ff05 	bl	8000c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df6:	f7ff fe75 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20004120 	.word	0x20004120

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20004120 	.word	0x20004120

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <__NVIC_SetPriorityGrouping+0x40>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <__NVIC_SetPriorityGrouping+0x40>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00
 8000e84:	05fa0000 	.word	0x05fa0000

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4907      	ldr	r1, [pc, #28]	; (8000edc <__NVIC_EnableIRQ+0x38>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	; (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	; (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	; 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ff4c 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc2:	f7ff ff61 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 8000fc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	68b9      	ldr	r1, [r7, #8]
 8000fcc:	6978      	ldr	r0, [r7, #20]
 8000fce:	f7ff ffb1 	bl	8000f34 <NVIC_EncodePriority>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff80 	bl	8000ee0 <__NVIC_SetPriority>
}
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff54 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001010:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001012:	f7ff ff09 	bl	8000e28 <HAL_GetTick>
 8001016:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d008      	beq.n	8001036 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2280      	movs	r2, #128	; 0x80
 8001028:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e052      	b.n	80010dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0216 	bic.w	r2, r2, #22
 8001044:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	695a      	ldr	r2, [r3, #20]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001054:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	2b00      	cmp	r3, #0
 800105c:	d103      	bne.n	8001066 <HAL_DMA_Abort+0x62>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001062:	2b00      	cmp	r3, #0
 8001064:	d007      	beq.n	8001076 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0208 	bic.w	r2, r2, #8
 8001074:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0201 	bic.w	r2, r2, #1
 8001084:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001086:	e013      	b.n	80010b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001088:	f7ff fece 	bl	8000e28 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b05      	cmp	r3, #5
 8001094:	d90c      	bls.n	80010b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2220      	movs	r2, #32
 800109a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2203      	movs	r2, #3
 80010a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e015      	b.n	80010dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1e4      	bne.n	8001088 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c2:	223f      	movs	r2, #63	; 0x3f
 80010c4:	409a      	lsls	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d004      	beq.n	8001102 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2280      	movs	r2, #128	; 0x80
 80010fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00c      	b.n	800111c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2205      	movs	r2, #5
 8001106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 0201 	bic.w	r2, r2, #1
 8001118:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	e175      	b.n	8001434 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001148:	2201      	movs	r2, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	429a      	cmp	r2, r3
 8001162:	f040 8164 	bne.w	800142e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b01      	cmp	r3, #1
 8001170:	d005      	beq.n	800117e <HAL_GPIO_Init+0x56>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d130      	bne.n	80011e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b4:	2201      	movs	r2, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	091b      	lsrs	r3, r3, #4
 80011ca:	f003 0201 	and.w	r2, r3, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d017      	beq.n	800121c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d123      	bne.n	8001270 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	220f      	movs	r2, #15
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	08da      	lsrs	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3208      	adds	r2, #8
 800126a:	69b9      	ldr	r1, [r7, #24]
 800126c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0203 	and.w	r2, r3, #3
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80be 	beq.w	800142e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	4b66      	ldr	r3, [pc, #408]	; (800144c <HAL_GPIO_Init+0x324>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	4a65      	ldr	r2, [pc, #404]	; (800144c <HAL_GPIO_Init+0x324>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012bc:	6453      	str	r3, [r2, #68]	; 0x44
 80012be:	4b63      	ldr	r3, [pc, #396]	; (800144c <HAL_GPIO_Init+0x324>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012ca:	4a61      	ldr	r2, [pc, #388]	; (8001450 <HAL_GPIO_Init+0x328>)
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a58      	ldr	r2, [pc, #352]	; (8001454 <HAL_GPIO_Init+0x32c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d037      	beq.n	8001366 <HAL_GPIO_Init+0x23e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a57      	ldr	r2, [pc, #348]	; (8001458 <HAL_GPIO_Init+0x330>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d031      	beq.n	8001362 <HAL_GPIO_Init+0x23a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a56      	ldr	r2, [pc, #344]	; (800145c <HAL_GPIO_Init+0x334>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d02b      	beq.n	800135e <HAL_GPIO_Init+0x236>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a55      	ldr	r2, [pc, #340]	; (8001460 <HAL_GPIO_Init+0x338>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d025      	beq.n	800135a <HAL_GPIO_Init+0x232>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a54      	ldr	r2, [pc, #336]	; (8001464 <HAL_GPIO_Init+0x33c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d01f      	beq.n	8001356 <HAL_GPIO_Init+0x22e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a53      	ldr	r2, [pc, #332]	; (8001468 <HAL_GPIO_Init+0x340>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d019      	beq.n	8001352 <HAL_GPIO_Init+0x22a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a52      	ldr	r2, [pc, #328]	; (800146c <HAL_GPIO_Init+0x344>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0x226>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a51      	ldr	r2, [pc, #324]	; (8001470 <HAL_GPIO_Init+0x348>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00d      	beq.n	800134a <HAL_GPIO_Init+0x222>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a50      	ldr	r2, [pc, #320]	; (8001474 <HAL_GPIO_Init+0x34c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x21e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4f      	ldr	r2, [pc, #316]	; (8001478 <HAL_GPIO_Init+0x350>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_GPIO_Init+0x21a>
 800133e:	2309      	movs	r3, #9
 8001340:	e012      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001342:	230a      	movs	r3, #10
 8001344:	e010      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001346:	2308      	movs	r3, #8
 8001348:	e00e      	b.n	8001368 <HAL_GPIO_Init+0x240>
 800134a:	2307      	movs	r3, #7
 800134c:	e00c      	b.n	8001368 <HAL_GPIO_Init+0x240>
 800134e:	2306      	movs	r3, #6
 8001350:	e00a      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001352:	2305      	movs	r3, #5
 8001354:	e008      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001356:	2304      	movs	r3, #4
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x240>
 800135a:	2303      	movs	r3, #3
 800135c:	e004      	b.n	8001368 <HAL_GPIO_Init+0x240>
 800135e:	2302      	movs	r3, #2
 8001360:	e002      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001366:	2300      	movs	r3, #0
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	f002 0203 	and.w	r2, r2, #3
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	4093      	lsls	r3, r2
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001378:	4935      	ldr	r1, [pc, #212]	; (8001450 <HAL_GPIO_Init+0x328>)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001386:	4b3d      	ldr	r3, [pc, #244]	; (800147c <HAL_GPIO_Init+0x354>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013aa:	4a34      	ldr	r2, [pc, #208]	; (800147c <HAL_GPIO_Init+0x354>)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b0:	4b32      	ldr	r3, [pc, #200]	; (800147c <HAL_GPIO_Init+0x354>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d4:	4a29      	ldr	r2, [pc, #164]	; (800147c <HAL_GPIO_Init+0x354>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013da:	4b28      	ldr	r3, [pc, #160]	; (800147c <HAL_GPIO_Init+0x354>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013fe:	4a1f      	ldr	r2, [pc, #124]	; (800147c <HAL_GPIO_Init+0x354>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <HAL_GPIO_Init+0x354>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <HAL_GPIO_Init+0x354>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3301      	adds	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	2b0f      	cmp	r3, #15
 8001438:	f67f ae86 	bls.w	8001148 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3724      	adds	r7, #36	; 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40013800 	.word	0x40013800
 8001454:	40020000 	.word	0x40020000
 8001458:	40020400 	.word	0x40020400
 800145c:	40020800 	.word	0x40020800
 8001460:	40020c00 	.word	0x40020c00
 8001464:	40021000 	.word	0x40021000
 8001468:	40021400 	.word	0x40021400
 800146c:	40021800 	.word	0x40021800
 8001470:	40021c00 	.word	0x40021c00
 8001474:	40022000 	.word	0x40022000
 8001478:	40022400 	.word	0x40022400
 800147c:	40013c00 	.word	0x40013c00

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001490:	787b      	ldrb	r3, [r7, #1]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800149c:	e003      	b.n	80014a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	041a      	lsls	r2, r3, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	619a      	str	r2, [r3, #24]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <HAL_PWREx_EnableOverDrive+0x98>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a22      	ldr	r2, [pc, #136]	; (800154c <HAL_PWREx_EnableOverDrive+0x98>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_PWREx_EnableOverDrive+0x98>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e2:	f7ff fca1 	bl	8000e28 <HAL_GetTick>
 80014e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014e8:	e009      	b.n	80014fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014ea:	f7ff fc9d 	bl	8000e28 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014f8:	d901      	bls.n	80014fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e022      	b.n	8001544 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150a:	d1ee      	bne.n	80014ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_PWREx_EnableOverDrive+0x9c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001516:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001518:	f7ff fc86 	bl	8000e28 <HAL_GetTick>
 800151c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800151e:	e009      	b.n	8001534 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001520:	f7ff fc82 	bl	8000e28 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800152e:	d901      	bls.n	8001534 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e007      	b.n	8001544 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001540:	d1ee      	bne.n	8001520 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	40007000 	.word	0x40007000

08001554 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e291      	b.n	8001a8e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 8087 	beq.w	8001686 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001578:	4b96      	ldr	r3, [pc, #600]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 030c 	and.w	r3, r3, #12
 8001580:	2b04      	cmp	r3, #4
 8001582:	d00c      	beq.n	800159e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001584:	4b93      	ldr	r3, [pc, #588]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 030c 	and.w	r3, r3, #12
 800158c:	2b08      	cmp	r3, #8
 800158e:	d112      	bne.n	80015b6 <HAL_RCC_OscConfig+0x62>
 8001590:	4b90      	ldr	r3, [pc, #576]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800159c:	d10b      	bne.n	80015b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159e:	4b8d      	ldr	r3, [pc, #564]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d06c      	beq.n	8001684 <HAL_RCC_OscConfig+0x130>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d168      	bne.n	8001684 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e26b      	b.n	8001a8e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x7a>
 80015c0:	4b84      	ldr	r3, [pc, #528]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a83      	ldr	r2, [pc, #524]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80015c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	e02e      	b.n	800162c <HAL_RCC_OscConfig+0xd8>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x9c>
 80015d6:	4b7f      	ldr	r3, [pc, #508]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a7e      	ldr	r2, [pc, #504]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80015dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4b7c      	ldr	r3, [pc, #496]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a7b      	ldr	r2, [pc, #492]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80015e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e01d      	b.n	800162c <HAL_RCC_OscConfig+0xd8>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0xc0>
 80015fa:	4b76      	ldr	r3, [pc, #472]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a75      	ldr	r2, [pc, #468]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b73      	ldr	r3, [pc, #460]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a72      	ldr	r2, [pc, #456]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 800160c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0xd8>
 8001614:	4b6f      	ldr	r3, [pc, #444]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a6e      	ldr	r2, [pc, #440]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 800161a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b6c      	ldr	r3, [pc, #432]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a6b      	ldr	r2, [pc, #428]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d013      	beq.n	800165c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fbf8 	bl	8000e28 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fbf4 	bl	8000e28 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e21f      	b.n	8001a8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b61      	ldr	r3, [pc, #388]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0xe8>
 800165a:	e014      	b.n	8001686 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fbe4 	bl	8000e28 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fbe0 	bl	8000e28 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e20b      	b.n	8001a8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001676:	4b57      	ldr	r3, [pc, #348]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x110>
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d069      	beq.n	8001766 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001692:	4b50      	ldr	r3, [pc, #320]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00b      	beq.n	80016b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169e:	4b4d      	ldr	r3, [pc, #308]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d11c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x190>
 80016aa:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d116      	bne.n	80016e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b6:	4b47      	ldr	r3, [pc, #284]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d005      	beq.n	80016ce <HAL_RCC_OscConfig+0x17a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d001      	beq.n	80016ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e1df      	b.n	8001a8e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ce:	4b41      	ldr	r3, [pc, #260]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	493d      	ldr	r1, [pc, #244]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	e040      	b.n	8001766 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d023      	beq.n	8001734 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ec:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a38      	ldr	r2, [pc, #224]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff fb96 	bl	8000e28 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001700:	f7ff fb92 	bl	8000e28 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e1bd      	b.n	8001a8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001712:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171e:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4929      	ldr	r1, [pc, #164]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]
 8001732:	e018      	b.n	8001766 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001734:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a26      	ldr	r2, [pc, #152]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff fb72 	bl	8000e28 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001748:	f7ff fb6e 	bl	8000e28 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e199      	b.n	8001a8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175a:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d038      	beq.n	80017e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d019      	beq.n	80017ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 800177c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177e:	4a15      	ldr	r2, [pc, #84]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001786:	f7ff fb4f 	bl	8000e28 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178e:	f7ff fb4b 	bl	8000e28 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e176      	b.n	8001a8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80017a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x23a>
 80017ac:	e01a      	b.n	80017e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80017b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ba:	f7ff fb35 	bl	8000e28 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c2:	f7ff fb31 	bl	8000e28 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d903      	bls.n	80017d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e15c      	b.n	8001a8e <HAL_RCC_OscConfig+0x53a>
 80017d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d8:	4b91      	ldr	r3, [pc, #580]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80017da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1ee      	bne.n	80017c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80a4 	beq.w	800193a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f2:	4b8b      	ldr	r3, [pc, #556]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10d      	bne.n	800181a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b88      	ldr	r3, [pc, #544]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a87      	ldr	r2, [pc, #540]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b85      	ldr	r3, [pc, #532]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001816:	2301      	movs	r3, #1
 8001818:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800181a:	4b82      	ldr	r3, [pc, #520]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	2b00      	cmp	r3, #0
 8001824:	d118      	bne.n	8001858 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001826:	4b7f      	ldr	r3, [pc, #508]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a7e      	ldr	r2, [pc, #504]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 800182c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001832:	f7ff faf9 	bl	8000e28 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183a:	f7ff faf5 	bl	8000e28 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b64      	cmp	r3, #100	; 0x64
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e120      	b.n	8001a8e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184c:	4b75      	ldr	r3, [pc, #468]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d106      	bne.n	800186e <HAL_RCC_OscConfig+0x31a>
 8001860:	4b6f      	ldr	r3, [pc, #444]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001864:	4a6e      	ldr	r2, [pc, #440]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6713      	str	r3, [r2, #112]	; 0x70
 800186c:	e02d      	b.n	80018ca <HAL_RCC_OscConfig+0x376>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x33c>
 8001876:	4b6a      	ldr	r3, [pc, #424]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	4a69      	ldr	r2, [pc, #420]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	6713      	str	r3, [r2, #112]	; 0x70
 8001882:	4b67      	ldr	r3, [pc, #412]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	4a66      	ldr	r2, [pc, #408]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 8001888:	f023 0304 	bic.w	r3, r3, #4
 800188c:	6713      	str	r3, [r2, #112]	; 0x70
 800188e:	e01c      	b.n	80018ca <HAL_RCC_OscConfig+0x376>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b05      	cmp	r3, #5
 8001896:	d10c      	bne.n	80018b2 <HAL_RCC_OscConfig+0x35e>
 8001898:	4b61      	ldr	r3, [pc, #388]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 800189a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189c:	4a60      	ldr	r2, [pc, #384]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	6713      	str	r3, [r2, #112]	; 0x70
 80018a4:	4b5e      	ldr	r3, [pc, #376]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80018a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a8:	4a5d      	ldr	r2, [pc, #372]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6713      	str	r3, [r2, #112]	; 0x70
 80018b0:	e00b      	b.n	80018ca <HAL_RCC_OscConfig+0x376>
 80018b2:	4b5b      	ldr	r3, [pc, #364]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b6:	4a5a      	ldr	r2, [pc, #360]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6713      	str	r3, [r2, #112]	; 0x70
 80018be:	4b58      	ldr	r3, [pc, #352]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c2:	4a57      	ldr	r2, [pc, #348]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d015      	beq.n	80018fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d2:	f7ff faa9 	bl	8000e28 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018da:	f7ff faa5 	bl	8000e28 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e0ce      	b.n	8001a8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f0:	4b4b      	ldr	r3, [pc, #300]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0ee      	beq.n	80018da <HAL_RCC_OscConfig+0x386>
 80018fc:	e014      	b.n	8001928 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fe:	f7ff fa93 	bl	8000e28 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001904:	e00a      	b.n	800191c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001906:	f7ff fa8f 	bl	8000e28 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	f241 3288 	movw	r2, #5000	; 0x1388
 8001914:	4293      	cmp	r3, r2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e0b8      	b.n	8001a8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191c:	4b40      	ldr	r3, [pc, #256]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 800191e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1ee      	bne.n	8001906 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001928:	7dfb      	ldrb	r3, [r7, #23]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d105      	bne.n	800193a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192e:	4b3c      	ldr	r3, [pc, #240]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a3b      	ldr	r2, [pc, #236]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 8001934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80a4 	beq.w	8001a8c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001944:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b08      	cmp	r3, #8
 800194e:	d06b      	beq.n	8001a28 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d149      	bne.n	80019ec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001958:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a30      	ldr	r2, [pc, #192]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 800195e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff fa60 	bl	8000e28 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff fa5c 	bl	8000e28 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e087      	b.n	8001a8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197e:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69da      	ldr	r2, [r3, #28]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	019b      	lsls	r3, r3, #6
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	085b      	lsrs	r3, r3, #1
 80019a2:	3b01      	subs	r3, #1
 80019a4:	041b      	lsls	r3, r3, #16
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	4313      	orrs	r3, r2
 80019b0:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80019b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80019be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fa30 	bl	8000e28 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff fa2c 	bl	8000e28 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e057      	b.n	8001a8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x478>
 80019ea:	e04f      	b.n	8001a8c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80019f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff fa16 	bl	8000e28 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff fa12 	bl	8000e28 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e03d      	b.n	8001a8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a12:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4ac>
 8001a1e:	e035      	b.n	8001a8c <HAL_RCC_OscConfig+0x538>
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x544>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d028      	beq.n	8001a88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d121      	bne.n	8001a88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d11a      	bne.n	8001a88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a58:	4013      	ands	r3, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a5e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d111      	bne.n	8001a88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	085b      	lsrs	r3, r3, #1
 8001a70:	3b01      	subs	r3, #1
 8001a72:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800

08001a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0d0      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b6a      	ldr	r3, [pc, #424]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d910      	bls.n	8001ae4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b67      	ldr	r3, [pc, #412]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 020f 	bic.w	r2, r3, #15
 8001aca:	4965      	ldr	r1, [pc, #404]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b63      	ldr	r3, [pc, #396]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0b8      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001afc:	4b59      	ldr	r3, [pc, #356]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	4a58      	ldr	r2, [pc, #352]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b14:	4b53      	ldr	r3, [pc, #332]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4a52      	ldr	r2, [pc, #328]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b20:	4b50      	ldr	r3, [pc, #320]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	494d      	ldr	r1, [pc, #308]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d040      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d115      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e07f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e073      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e06b      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7e:	4b39      	ldr	r3, [pc, #228]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f023 0203 	bic.w	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4936      	ldr	r1, [pc, #216]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b90:	f7ff f94a 	bl	8000e28 <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b98:	f7ff f946 	bl	8000e28 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e053      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 020c 	and.w	r2, r3, #12
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d1eb      	bne.n	8001b98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d210      	bcs.n	8001bf0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 020f 	bic.w	r2, r3, #15
 8001bd6:	4922      	ldr	r1, [pc, #136]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e032      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	4916      	ldr	r1, [pc, #88]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	490e      	ldr	r1, [pc, #56]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c2e:	f000 f821 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001c32:	4602      	mov	r2, r0
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	490a      	ldr	r1, [pc, #40]	; (8001c68 <HAL_RCC_ClockConfig+0x1cc>)
 8001c40:	5ccb      	ldrb	r3, [r1, r3]
 8001c42:	fa22 f303 	lsr.w	r3, r2, r3
 8001c46:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1d0>)
 8001c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_ClockConfig+0x1d4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe ffd6 	bl	8000c00 <HAL_InitTick>

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00
 8001c64:	40023800 	.word	0x40023800
 8001c68:	08006d7c 	.word	0x08006d7c
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c74:	b5b0      	push	{r4, r5, r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	6079      	str	r1, [r7, #4]
 8001c7e:	2100      	movs	r1, #0
 8001c80:	60f9      	str	r1, [r7, #12]
 8001c82:	2100      	movs	r1, #0
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001c86:	2100      	movs	r1, #0
 8001c88:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c8a:	4952      	ldr	r1, [pc, #328]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c8c:	6889      	ldr	r1, [r1, #8]
 8001c8e:	f001 010c 	and.w	r1, r1, #12
 8001c92:	2908      	cmp	r1, #8
 8001c94:	d00d      	beq.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x3e>
 8001c96:	2908      	cmp	r1, #8
 8001c98:	f200 8094 	bhi.w	8001dc4 <HAL_RCC_GetSysClockFreq+0x150>
 8001c9c:	2900      	cmp	r1, #0
 8001c9e:	d002      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x32>
 8001ca0:	2904      	cmp	r1, #4
 8001ca2:	d003      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x38>
 8001ca4:	e08e      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca6:	4b4c      	ldr	r3, [pc, #304]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001ca8:	60bb      	str	r3, [r7, #8]
      break;
 8001caa:	e08e      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cac:	4b4b      	ldr	r3, [pc, #300]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x168>)
 8001cae:	60bb      	str	r3, [r7, #8]
      break;
 8001cb0:	e08b      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cb2:	4948      	ldr	r1, [pc, #288]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cb4:	6849      	ldr	r1, [r1, #4]
 8001cb6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001cba:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001cbc:	4945      	ldr	r1, [pc, #276]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cbe:	6849      	ldr	r1, [r1, #4]
 8001cc0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001cc4:	2900      	cmp	r1, #0
 8001cc6:	d024      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc8:	4942      	ldr	r1, [pc, #264]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cca:	6849      	ldr	r1, [r1, #4]
 8001ccc:	0989      	lsrs	r1, r1, #6
 8001cce:	4608      	mov	r0, r1
 8001cd0:	f04f 0100 	mov.w	r1, #0
 8001cd4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001cd8:	f04f 0500 	mov.w	r5, #0
 8001cdc:	ea00 0204 	and.w	r2, r0, r4
 8001ce0:	ea01 0305 	and.w	r3, r1, r5
 8001ce4:	493d      	ldr	r1, [pc, #244]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x168>)
 8001ce6:	fb01 f003 	mul.w	r0, r1, r3
 8001cea:	2100      	movs	r1, #0
 8001cec:	fb01 f102 	mul.w	r1, r1, r2
 8001cf0:	1844      	adds	r4, r0, r1
 8001cf2:	493a      	ldr	r1, [pc, #232]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x168>)
 8001cf4:	fba2 0101 	umull	r0, r1, r2, r1
 8001cf8:	1863      	adds	r3, r4, r1
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	f7fe fadc 	bl	80002c0 <__aeabi_uldivmod>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	e04a      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d12:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	099b      	lsrs	r3, r3, #6
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d22:	f04f 0100 	mov.w	r1, #0
 8001d26:	ea02 0400 	and.w	r4, r2, r0
 8001d2a:	ea03 0501 	and.w	r5, r3, r1
 8001d2e:	4620      	mov	r0, r4
 8001d30:	4629      	mov	r1, r5
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	014b      	lsls	r3, r1, #5
 8001d3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d40:	0142      	lsls	r2, r0, #5
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	1b00      	subs	r0, r0, r4
 8001d48:	eb61 0105 	sbc.w	r1, r1, r5
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	018b      	lsls	r3, r1, #6
 8001d56:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d5a:	0182      	lsls	r2, r0, #6
 8001d5c:	1a12      	subs	r2, r2, r0
 8001d5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d62:	f04f 0000 	mov.w	r0, #0
 8001d66:	f04f 0100 	mov.w	r1, #0
 8001d6a:	00d9      	lsls	r1, r3, #3
 8001d6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d70:	00d0      	lsls	r0, r2, #3
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	1912      	adds	r2, r2, r4
 8001d78:	eb45 0303 	adc.w	r3, r5, r3
 8001d7c:	f04f 0000 	mov.w	r0, #0
 8001d80:	f04f 0100 	mov.w	r1, #0
 8001d84:	0299      	lsls	r1, r3, #10
 8001d86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d8a:	0290      	lsls	r0, r2, #10
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	461a      	mov	r2, r3
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	f7fe fa90 	bl	80002c0 <__aeabi_uldivmod>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4613      	mov	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	0c1b      	lsrs	r3, r3, #16
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	3301      	adds	r3, #1
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc0:	60bb      	str	r3, [r7, #8]
      break;
 8001dc2:	e002      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001dc6:	60bb      	str	r3, [r7, #8]
      break;
 8001dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dca:	68bb      	ldr	r3, [r7, #8]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	00f42400 	.word	0x00f42400
 8001ddc:	017d7840 	.word	0x017d7840

08001de0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000000 	.word	0x20000000

08001df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dfc:	f7ff fff0 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	0a9b      	lsrs	r3, r3, #10
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	4903      	ldr	r1, [pc, #12]	; (8001e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0e:	5ccb      	ldrb	r3, [r1, r3]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	08006d8c 	.word	0x08006d8c

08001e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e24:	f7ff ffdc 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0b5b      	lsrs	r3, r3, #13
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4903      	ldr	r1, [pc, #12]	; (8001e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	08006d8c 	.word	0x08006d8c

08001e48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	220f      	movs	r2, #15
 8001e56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0203 	and.w	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	08db      	lsrs	r3, r3, #3
 8001e82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <HAL_RCC_GetClockConfig+0x60>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 020f 	and.w	r2, r3, #15
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	601a      	str	r2, [r3, #0]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d012      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ed4:	4b69      	ldr	r3, [pc, #420]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a68      	ldr	r2, [pc, #416]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ede:	6093      	str	r3, [r2, #8]
 8001ee0:	4b66      	ldr	r3, [pc, #408]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee8:	4964      	ldr	r1, [pc, #400]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d017      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f06:	4b5d      	ldr	r3, [pc, #372]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f14:	4959      	ldr	r1, [pc, #356]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f24:	d101      	bne.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d017      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f42:	4b4e      	ldr	r3, [pc, #312]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	494a      	ldr	r1, [pc, #296]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f60:	d101      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 808b 	beq.w	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f90:	4b3a      	ldr	r3, [pc, #232]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	4a39      	ldr	r2, [pc, #228]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9c:	4b37      	ldr	r3, [pc, #220]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fa8:	4b35      	ldr	r3, [pc, #212]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a34      	ldr	r2, [pc, #208]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb4:	f7fe ff38 	bl	8000e28 <HAL_GetTick>
 8001fb8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbc:	f7fe ff34 	bl	8000e28 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	; 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e357      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fce:	4b2c      	ldr	r3, [pc, #176]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fda:	4b28      	ldr	r3, [pc, #160]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d035      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d02e      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ff8:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002000:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002002:	4b1e      	ldr	r3, [pc, #120]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	4a1d      	ldr	r2, [pc, #116]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002012:	4a1a      	ldr	r2, [pc, #104]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002018:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800201a:	4a18      	ldr	r2, [pc, #96]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002020:	4b16      	ldr	r3, [pc, #88]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	d114      	bne.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7fe fefc 	bl	8000e28 <HAL_GetTick>
 8002030:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002032:	e00a      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002034:	f7fe fef8 	bl	8000e28 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e319      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0ee      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002062:	d111      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002072:	400b      	ands	r3, r1
 8002074:	4901      	ldr	r1, [pc, #4]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
 800207a:	e00b      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800207c:	40023800 	.word	0x40023800
 8002080:	40007000 	.word	0x40007000
 8002084:	0ffffcff 	.word	0x0ffffcff
 8002088:	4bb1      	ldr	r3, [pc, #708]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4ab0      	ldr	r2, [pc, #704]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800208e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002092:	6093      	str	r3, [r2, #8]
 8002094:	4bae      	ldr	r3, [pc, #696]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002096:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a0:	49ab      	ldr	r1, [pc, #684]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d010      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020b2:	4ba7      	ldr	r3, [pc, #668]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020b8:	4aa5      	ldr	r2, [pc, #660]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020c2:	4ba3      	ldr	r3, [pc, #652]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020cc:	49a0      	ldr	r1, [pc, #640]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020e0:	4b9b      	ldr	r3, [pc, #620]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020ee:	4998      	ldr	r1, [pc, #608]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002102:	4b93      	ldr	r3, [pc, #588]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002108:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002110:	498f      	ldr	r1, [pc, #572]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002124:	4b8a      	ldr	r3, [pc, #552]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002132:	4987      	ldr	r1, [pc, #540]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002146:	4b82      	ldr	r3, [pc, #520]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	497e      	ldr	r1, [pc, #504]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002168:	4b79      	ldr	r3, [pc, #484]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216e:	f023 0203 	bic.w	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	4976      	ldr	r1, [pc, #472]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800218a:	4b71      	ldr	r3, [pc, #452]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002190:	f023 020c 	bic.w	r2, r3, #12
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002198:	496d      	ldr	r1, [pc, #436]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021ac:	4b68      	ldr	r3, [pc, #416]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	4965      	ldr	r1, [pc, #404]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021ce:	4b60      	ldr	r3, [pc, #384]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021dc:	495c      	ldr	r1, [pc, #368]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021f0:	4b57      	ldr	r3, [pc, #348]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	4954      	ldr	r1, [pc, #336]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002212:	4b4f      	ldr	r3, [pc, #316]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002218:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	494b      	ldr	r1, [pc, #300]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002234:	4b46      	ldr	r3, [pc, #280]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002242:	4943      	ldr	r1, [pc, #268]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002256:	4b3e      	ldr	r3, [pc, #248]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002264:	493a      	ldr	r1, [pc, #232]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002278:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002286:	4932      	ldr	r1, [pc, #200]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d011      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800229a:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022a8:	4929      	ldr	r1, [pc, #164]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022b8:	d101      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80022ba:	2301      	movs	r3, #1
 80022bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e8:	4919      	ldr	r1, [pc, #100]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00b      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800230c:	4910      	ldr	r1, [pc, #64]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d006      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80d9 	beq.w	80024da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002328:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a08      	ldr	r2, [pc, #32]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800232e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002332:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002334:	f7fe fd78 	bl	8000e28 <HAL_GetTick>
 8002338:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800233a:	e00b      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800233c:	f7fe fd74 	bl	8000e28 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	; 0x64
 8002348:	d904      	bls.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e197      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002354:	4b6c      	ldr	r3, [pc, #432]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ed      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d021      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002370:	2b00      	cmp	r3, #0
 8002372:	d11d      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002374:	4b64      	ldr	r3, [pc, #400]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800237a:	0c1b      	lsrs	r3, r3, #16
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002382:	4b61      	ldr	r3, [pc, #388]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002388:	0e1b      	lsrs	r3, r3, #24
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	019a      	lsls	r2, r3, #6
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	041b      	lsls	r3, r3, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	061b      	lsls	r3, r3, #24
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	071b      	lsls	r3, r3, #28
 80023a8:	4957      	ldr	r1, [pc, #348]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d004      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d02e      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023da:	d129      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023dc:	4b4a      	ldr	r3, [pc, #296]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023e2:	0c1b      	lsrs	r3, r3, #16
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023ea:	4b47      	ldr	r3, [pc, #284]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f0:	0f1b      	lsrs	r3, r3, #28
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	019a      	lsls	r2, r3, #6
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	061b      	lsls	r3, r3, #24
 800240a:	431a      	orrs	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	071b      	lsls	r3, r3, #28
 8002410:	493d      	ldr	r1, [pc, #244]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002418:	4b3b      	ldr	r3, [pc, #236]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800241a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800241e:	f023 021f 	bic.w	r2, r3, #31
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	3b01      	subs	r3, #1
 8002428:	4937      	ldr	r1, [pc, #220]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01d      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800243c:	4b32      	ldr	r3, [pc, #200]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800243e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002442:	0e1b      	lsrs	r3, r3, #24
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800244a:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800244c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002450:	0f1b      	lsrs	r3, r3, #28
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	019a      	lsls	r2, r3, #6
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	041b      	lsls	r3, r3, #16
 8002464:	431a      	orrs	r2, r3
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	061b      	lsls	r3, r3, #24
 800246a:	431a      	orrs	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	071b      	lsls	r3, r3, #28
 8002470:	4925      	ldr	r1, [pc, #148]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d011      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	019a      	lsls	r2, r3, #6
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	061b      	lsls	r3, r3, #24
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	071b      	lsls	r3, r3, #28
 80024a0:	4919      	ldr	r1, [pc, #100]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a16      	ldr	r2, [pc, #88]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b4:	f7fe fcb8 	bl	8000e28 <HAL_GetTick>
 80024b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024bc:	f7fe fcb4 	bl	8000e28 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e0d7      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	f040 80cd 	bne.w	800267c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a08      	ldr	r2, [pc, #32]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ee:	f7fe fc9b 	bl	8000e28 <HAL_GetTick>
 80024f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024f6:	f7fe fc97 	bl	8000e28 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b64      	cmp	r3, #100	; 0x64
 8002502:	d903      	bls.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e0ba      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002508:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800250c:	4b5e      	ldr	r3, [pc, #376]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002518:	d0ed      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002536:	2b00      	cmp	r3, #0
 8002538:	d02e      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	d12a      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002542:	4b51      	ldr	r3, [pc, #324]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002550:	4b4d      	ldr	r3, [pc, #308]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	0f1b      	lsrs	r3, r3, #28
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	019a      	lsls	r2, r3, #6
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	041b      	lsls	r3, r3, #16
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	061b      	lsls	r3, r3, #24
 8002570:	431a      	orrs	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	071b      	lsls	r3, r3, #28
 8002576:	4944      	ldr	r1, [pc, #272]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800257e:	4b42      	ldr	r3, [pc, #264]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002584:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	3b01      	subs	r3, #1
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	493d      	ldr	r1, [pc, #244]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d022      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ac:	d11d      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025ae:	4b36      	ldr	r3, [pc, #216]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b4:	0e1b      	lsrs	r3, r3, #24
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025bc:	4b32      	ldr	r3, [pc, #200]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c2:	0f1b      	lsrs	r3, r3, #28
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	019a      	lsls	r2, r3, #6
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	041b      	lsls	r3, r3, #16
 80025d6:	431a      	orrs	r2, r3
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	061b      	lsls	r3, r3, #24
 80025dc:	431a      	orrs	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	071b      	lsls	r3, r3, #28
 80025e2:	4929      	ldr	r1, [pc, #164]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d028      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025f6:	4b24      	ldr	r3, [pc, #144]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	0e1b      	lsrs	r3, r3, #24
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002604:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	0c1b      	lsrs	r3, r3, #16
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	019a      	lsls	r2, r3, #6
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	041b      	lsls	r3, r3, #16
 800261c:	431a      	orrs	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	071b      	lsls	r3, r3, #28
 800262a:	4917      	ldr	r1, [pc, #92]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002638:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	4911      	ldr	r1, [pc, #68]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0e      	ldr	r2, [pc, #56]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800264e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002654:	f7fe fbe8 	bl	8000e28 <HAL_GetTick>
 8002658:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800265c:	f7fe fbe4 	bl	8000e28 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b64      	cmp	r3, #100	; 0x64
 8002668:	d901      	bls.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e007      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800267a:	d1ef      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3720      	adds	r7, #32
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800

0800268c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e049      	b.n	8002732 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f841 	bl	800273a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3304      	adds	r3, #4
 80026c8:	4619      	mov	r1, r3
 80026ca:	4610      	mov	r0, r2
 80026cc:	f000 fa00 	bl	8002ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b01      	cmp	r3, #1
 8002762:	d001      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e054      	b.n	8002812 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a26      	ldr	r2, [pc, #152]	; (8002820 <HAL_TIM_Base_Start_IT+0xd0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d022      	beq.n	80027d0 <HAL_TIM_Base_Start_IT+0x80>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002792:	d01d      	beq.n	80027d0 <HAL_TIM_Base_Start_IT+0x80>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a22      	ldr	r2, [pc, #136]	; (8002824 <HAL_TIM_Base_Start_IT+0xd4>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d018      	beq.n	80027d0 <HAL_TIM_Base_Start_IT+0x80>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a21      	ldr	r2, [pc, #132]	; (8002828 <HAL_TIM_Base_Start_IT+0xd8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d013      	beq.n	80027d0 <HAL_TIM_Base_Start_IT+0x80>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1f      	ldr	r2, [pc, #124]	; (800282c <HAL_TIM_Base_Start_IT+0xdc>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00e      	beq.n	80027d0 <HAL_TIM_Base_Start_IT+0x80>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <HAL_TIM_Base_Start_IT+0xe0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d009      	beq.n	80027d0 <HAL_TIM_Base_Start_IT+0x80>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <HAL_TIM_Base_Start_IT+0xe4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d004      	beq.n	80027d0 <HAL_TIM_Base_Start_IT+0x80>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <HAL_TIM_Base_Start_IT+0xe8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d115      	bne.n	80027fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_TIM_Base_Start_IT+0xec>)
 80027d8:	4013      	ands	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b06      	cmp	r3, #6
 80027e0:	d015      	beq.n	800280e <HAL_TIM_Base_Start_IT+0xbe>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e8:	d011      	beq.n	800280e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0201 	orr.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027fa:	e008      	b.n	800280e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e000      	b.n	8002810 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800280e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40010000 	.word	0x40010000
 8002824:	40000400 	.word	0x40000400
 8002828:	40000800 	.word	0x40000800
 800282c:	40000c00 	.word	0x40000c00
 8002830:	40010400 	.word	0x40010400
 8002834:	40014000 	.word	0x40014000
 8002838:	40001800 	.word	0x40001800
 800283c:	00010007 	.word	0x00010007

08002840 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b02      	cmp	r3, #2
 8002854:	d122      	bne.n	800289c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b02      	cmp	r3, #2
 8002862:	d11b      	bne.n	800289c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0202 	mvn.w	r2, #2
 800286c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f905 	bl	8002a92 <HAL_TIM_IC_CaptureCallback>
 8002888:	e005      	b.n	8002896 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f8f7 	bl	8002a7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f908 	bl	8002aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d122      	bne.n	80028f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d11b      	bne.n	80028f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f06f 0204 	mvn.w	r2, #4
 80028c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2202      	movs	r2, #2
 80028c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f8db 	bl	8002a92 <HAL_TIM_IC_CaptureCallback>
 80028dc:	e005      	b.n	80028ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f8cd 	bl	8002a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f8de 	bl	8002aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d122      	bne.n	8002944 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b08      	cmp	r3, #8
 800290a:	d11b      	bne.n	8002944 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f06f 0208 	mvn.w	r2, #8
 8002914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2204      	movs	r2, #4
 800291a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f8b1 	bl	8002a92 <HAL_TIM_IC_CaptureCallback>
 8002930:	e005      	b.n	800293e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f8a3 	bl	8002a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f8b4 	bl	8002aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b10      	cmp	r3, #16
 8002950:	d122      	bne.n	8002998 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b10      	cmp	r3, #16
 800295e:	d11b      	bne.n	8002998 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0210 	mvn.w	r2, #16
 8002968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2208      	movs	r2, #8
 800296e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f887 	bl	8002a92 <HAL_TIM_IC_CaptureCallback>
 8002984:	e005      	b.n	8002992 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f879 	bl	8002a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f88a 	bl	8002aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d10e      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d107      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f06f 0201 	mvn.w	r2, #1
 80029bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fe f878 	bl	8000ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ce:	2b80      	cmp	r3, #128	; 0x80
 80029d0:	d10e      	bne.n	80029f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029dc:	2b80      	cmp	r3, #128	; 0x80
 80029de:	d107      	bne.n	80029f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f91a 	bl	8002c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029fe:	d10e      	bne.n	8002a1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0a:	2b80      	cmp	r3, #128	; 0x80
 8002a0c:	d107      	bne.n	8002a1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f90d 	bl	8002c38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a28:	2b40      	cmp	r3, #64	; 0x40
 8002a2a:	d10e      	bne.n	8002a4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a36:	2b40      	cmp	r3, #64	; 0x40
 8002a38:	d107      	bne.n	8002a4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f838 	bl	8002aba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d10e      	bne.n	8002a76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d107      	bne.n	8002a76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f06f 0220 	mvn.w	r2, #32
 8002a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f8cd 	bl	8002c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a40      	ldr	r2, [pc, #256]	; (8002be4 <TIM_Base_SetConfig+0x114>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d013      	beq.n	8002b10 <TIM_Base_SetConfig+0x40>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aee:	d00f      	beq.n	8002b10 <TIM_Base_SetConfig+0x40>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a3d      	ldr	r2, [pc, #244]	; (8002be8 <TIM_Base_SetConfig+0x118>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d00b      	beq.n	8002b10 <TIM_Base_SetConfig+0x40>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a3c      	ldr	r2, [pc, #240]	; (8002bec <TIM_Base_SetConfig+0x11c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d007      	beq.n	8002b10 <TIM_Base_SetConfig+0x40>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a3b      	ldr	r2, [pc, #236]	; (8002bf0 <TIM_Base_SetConfig+0x120>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d003      	beq.n	8002b10 <TIM_Base_SetConfig+0x40>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a3a      	ldr	r2, [pc, #232]	; (8002bf4 <TIM_Base_SetConfig+0x124>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d108      	bne.n	8002b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a2f      	ldr	r2, [pc, #188]	; (8002be4 <TIM_Base_SetConfig+0x114>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d02b      	beq.n	8002b82 <TIM_Base_SetConfig+0xb2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b30:	d027      	beq.n	8002b82 <TIM_Base_SetConfig+0xb2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a2c      	ldr	r2, [pc, #176]	; (8002be8 <TIM_Base_SetConfig+0x118>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d023      	beq.n	8002b82 <TIM_Base_SetConfig+0xb2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a2b      	ldr	r2, [pc, #172]	; (8002bec <TIM_Base_SetConfig+0x11c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01f      	beq.n	8002b82 <TIM_Base_SetConfig+0xb2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a2a      	ldr	r2, [pc, #168]	; (8002bf0 <TIM_Base_SetConfig+0x120>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01b      	beq.n	8002b82 <TIM_Base_SetConfig+0xb2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a29      	ldr	r2, [pc, #164]	; (8002bf4 <TIM_Base_SetConfig+0x124>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d017      	beq.n	8002b82 <TIM_Base_SetConfig+0xb2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a28      	ldr	r2, [pc, #160]	; (8002bf8 <TIM_Base_SetConfig+0x128>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <TIM_Base_SetConfig+0xb2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a27      	ldr	r2, [pc, #156]	; (8002bfc <TIM_Base_SetConfig+0x12c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00f      	beq.n	8002b82 <TIM_Base_SetConfig+0xb2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a26      	ldr	r2, [pc, #152]	; (8002c00 <TIM_Base_SetConfig+0x130>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00b      	beq.n	8002b82 <TIM_Base_SetConfig+0xb2>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a25      	ldr	r2, [pc, #148]	; (8002c04 <TIM_Base_SetConfig+0x134>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d007      	beq.n	8002b82 <TIM_Base_SetConfig+0xb2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a24      	ldr	r2, [pc, #144]	; (8002c08 <TIM_Base_SetConfig+0x138>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d003      	beq.n	8002b82 <TIM_Base_SetConfig+0xb2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a23      	ldr	r2, [pc, #140]	; (8002c0c <TIM_Base_SetConfig+0x13c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d108      	bne.n	8002b94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <TIM_Base_SetConfig+0x114>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d003      	beq.n	8002bc8 <TIM_Base_SetConfig+0xf8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a0c      	ldr	r2, [pc, #48]	; (8002bf4 <TIM_Base_SetConfig+0x124>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d103      	bne.n	8002bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	615a      	str	r2, [r3, #20]
}
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40010000 	.word	0x40010000
 8002be8:	40000400 	.word	0x40000400
 8002bec:	40000800 	.word	0x40000800
 8002bf0:	40000c00 	.word	0x40000c00
 8002bf4:	40010400 	.word	0x40010400
 8002bf8:	40014000 	.word	0x40014000
 8002bfc:	40014400 	.word	0x40014400
 8002c00:	40014800 	.word	0x40014800
 8002c04:	40001800 	.word	0x40001800
 8002c08:	40001c00 	.word	0x40001c00
 8002c0c:	40002000 	.word	0x40002000

08002c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e040      	b.n	8002ce0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fd ff60 	bl	8000b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2224      	movs	r2, #36	; 0x24
 8002c78:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0201 	bic.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fbf8 	bl	8003480 <UART_SetConfig>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e022      	b.n	8002ce0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fe4e 	bl	8003944 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fed5 	bl	8003a88 <UART_CheckIdleState>
 8002cde:	4603      	mov	r3, r0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	f040 8081 	bne.w	8002e04 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HAL_UART_Transmit+0x26>
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e079      	b.n	8002e06 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_UART_Transmit+0x38>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e072      	b.n	8002e06 <HAL_UART_Transmit+0x11e>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2221      	movs	r2, #33	; 0x21
 8002d34:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d36:	f7fe f877 	bl	8000e28 <HAL_GetTick>
 8002d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	88fa      	ldrh	r2, [r7, #6]
 8002d40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	88fa      	ldrh	r2, [r7, #6]
 8002d48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d54:	d108      	bne.n	8002d68 <HAL_UART_Transmit+0x80>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d104      	bne.n	8002d68 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	e003      	b.n	8002d70 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002d78:	e02c      	b.n	8002dd4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2200      	movs	r2, #0
 8002d82:	2180      	movs	r1, #128	; 0x80
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 feb2 	bl	8003aee <UART_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e038      	b.n	8002e06 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10b      	bne.n	8002db2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002da8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	3302      	adds	r3, #2
 8002dae:	61bb      	str	r3, [r7, #24]
 8002db0:	e007      	b.n	8002dc2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	781a      	ldrb	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1cc      	bne.n	8002d7a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2200      	movs	r2, #0
 8002de8:	2140      	movs	r1, #64	; 0x40
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 fe7f 	bl	8003aee <UART_WaitOnFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e005      	b.n	8002e06 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	e000      	b.n	8002e06 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
  }
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b08a      	sub	sp, #40	; 0x28
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d13d      	bne.n	8002ea0 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_UART_Receive_IT+0x22>
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e036      	b.n	8002ea2 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_UART_Receive_IT+0x34>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e02f      	b.n	8002ea2 <HAL_UART_Receive_IT+0x94>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d018      	beq.n	8002e90 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	e853 3f00 	ldrex	r3, [r3]
 8002e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	623b      	str	r3, [r7, #32]
 8002e7e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e80:	69f9      	ldr	r1, [r7, #28]
 8002e82:	6a3a      	ldr	r2, [r7, #32]
 8002e84:	e841 2300 	strex	r3, r2, [r1]
 8002e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e6      	bne.n	8002e5e <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	461a      	mov	r2, r3
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 feee 	bl	8003c78 <UART_Start_Receive_IT>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	e000      	b.n	8002ea2 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ea0:	2302      	movs	r3, #2
  }
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3728      	adds	r7, #40	; 0x28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b0ba      	sub	sp, #232	; 0xe8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ed2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002ed6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002eda:	4013      	ands	r3, r2
 8002edc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002ee0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d115      	bne.n	8002f14 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00f      	beq.n	8002f14 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d009      	beq.n	8002f14 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 828f 	beq.w	8003428 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	4798      	blx	r3
      }
      return;
 8002f12:	e289      	b.n	8003428 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8117 	beq.w	800314c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f2e:	4b85      	ldr	r3, [pc, #532]	; (8003144 <HAL_UART_IRQHandler+0x298>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 810a 	beq.w	800314c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d011      	beq.n	8002f68 <HAL_UART_IRQHandler+0xbc>
 8002f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00b      	beq.n	8002f68 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2201      	movs	r2, #1
 8002f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d011      	beq.n	8002f98 <HAL_UART_IRQHandler+0xec>
 8002f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00b      	beq.n	8002f98 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2202      	movs	r2, #2
 8002f86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f8e:	f043 0204 	orr.w	r2, r3, #4
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d011      	beq.n	8002fc8 <HAL_UART_IRQHandler+0x11c>
 8002fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00b      	beq.n	8002fc8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fbe:	f043 0202 	orr.w	r2, r3, #2
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d017      	beq.n	8003004 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fe4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00b      	beq.n	8003004 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ffa:	f043 0208 	orr.w	r2, r3, #8
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300c:	2b00      	cmp	r3, #0
 800300e:	d012      	beq.n	8003036 <HAL_UART_IRQHandler+0x18a>
 8003010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003014:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00c      	beq.n	8003036 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003024:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 81f5 	beq.w	800342c <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00d      	beq.n	800306a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800304e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003070:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307e:	2b40      	cmp	r3, #64	; 0x40
 8003080:	d005      	beq.n	800308e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003086:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800308a:	2b00      	cmp	r3, #0
 800308c:	d04f      	beq.n	800312e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 febc 	bl	8003e0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309e:	2b40      	cmp	r3, #64	; 0x40
 80030a0:	d141      	bne.n	8003126 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3308      	adds	r3, #8
 80030a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030b0:	e853 3f00 	ldrex	r3, [r3]
 80030b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3308      	adds	r3, #8
 80030ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030de:	e841 2300 	strex	r3, r2, [r1]
 80030e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1d9      	bne.n	80030a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d013      	beq.n	800311e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	4a13      	ldr	r2, [pc, #76]	; (8003148 <HAL_UART_IRQHandler+0x29c>)
 80030fc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd ffee 	bl	80010e4 <HAL_DMA_Abort_IT>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d017      	beq.n	800313e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003118:	4610      	mov	r0, r2
 800311a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311c:	e00f      	b.n	800313e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f998 	bl	8003454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003124:	e00b      	b.n	800313e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f994 	bl	8003454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800312c:	e007      	b.n	800313e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f990 	bl	8003454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800313c:	e176      	b.n	800342c <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800313e:	bf00      	nop
    return;
 8003140:	e174      	b.n	800342c <HAL_UART_IRQHandler+0x580>
 8003142:	bf00      	nop
 8003144:	04000120 	.word	0x04000120
 8003148:	08003ed3 	.word	0x08003ed3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003150:	2b01      	cmp	r3, #1
 8003152:	f040 8144 	bne.w	80033de <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 813d 	beq.w	80033de <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8136 	beq.w	80033de <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2210      	movs	r2, #16
 8003178:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	f040 80b2 	bne.w	80032ee <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003196:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 8148 	beq.w	8003430 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031aa:	429a      	cmp	r2, r3
 80031ac:	f080 8140 	bcs.w	8003430 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c4:	f000 8085 	beq.w	80032d2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031d4:	e853 3f00 	ldrex	r3, [r3]
 80031d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003202:	e841 2300 	strex	r3, r2, [r1]
 8003206:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800320a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1da      	bne.n	80031c8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3308      	adds	r3, #8
 8003218:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3308      	adds	r3, #8
 8003232:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003236:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800323a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800323e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003242:	e841 2300 	strex	r3, r2, [r1]
 8003246:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1e1      	bne.n	8003212 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3308      	adds	r3, #8
 8003254:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003258:	e853 3f00 	ldrex	r3, [r3]
 800325c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800325e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3308      	adds	r3, #8
 800326e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003272:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003274:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003276:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003278:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800327a:	e841 2300 	strex	r3, r2, [r1]
 800327e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1e3      	bne.n	800324e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2220      	movs	r2, #32
 800328a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329a:	e853 3f00 	ldrex	r3, [r3]
 800329e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032a2:	f023 0310 	bic.w	r3, r3, #16
 80032a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80032b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032bc:	e841 2300 	strex	r3, r2, [r1]
 80032c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e4      	bne.n	8003292 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd fe99 	bl	8001004 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	4619      	mov	r1, r3
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f8be 	bl	8003468 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032ec:	e0a0      	b.n	8003430 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8092 	beq.w	8003434 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8003310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 808d 	beq.w	8003434 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003322:	e853 3f00 	ldrex	r3, [r3]
 8003326:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800332e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800333c:	647b      	str	r3, [r7, #68]	; 0x44
 800333e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003340:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003344:	e841 2300 	strex	r3, r2, [r1]
 8003348:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800334a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e4      	bne.n	800331a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3308      	adds	r3, #8
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	e853 3f00 	ldrex	r3, [r3]
 800335e:	623b      	str	r3, [r7, #32]
   return(result);
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3308      	adds	r3, #8
 8003370:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003374:	633a      	str	r2, [r7, #48]	; 0x30
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800337a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800337c:	e841 2300 	strex	r3, r2, [r1]
 8003380:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e3      	bne.n	8003350 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	e853 3f00 	ldrex	r3, [r3]
 80033a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0310 	bic.w	r3, r3, #16
 80033ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	69b9      	ldr	r1, [r7, #24]
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	e841 2300 	strex	r3, r2, [r1]
 80033c8:	617b      	str	r3, [r7, #20]
   return(result);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e4      	bne.n	800339a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033d4:	4619      	mov	r1, r3
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f846 	bl	8003468 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033dc:	e02a      	b.n	8003434 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00e      	beq.n	8003408 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01c      	beq.n	8003438 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	4798      	blx	r3
    }
    return;
 8003406:	e017      	b.n	8003438 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800340c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d012      	beq.n	800343a <HAL_UART_IRQHandler+0x58e>
 8003414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00c      	beq.n	800343a <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fd6c 	bl	8003efe <UART_EndTransmit_IT>
    return;
 8003426:	e008      	b.n	800343a <HAL_UART_IRQHandler+0x58e>
      return;
 8003428:	bf00      	nop
 800342a:	e006      	b.n	800343a <HAL_UART_IRQHandler+0x58e>
    return;
 800342c:	bf00      	nop
 800342e:	e004      	b.n	800343a <HAL_UART_IRQHandler+0x58e>
      return;
 8003430:	bf00      	nop
 8003432:	e002      	b.n	800343a <HAL_UART_IRQHandler+0x58e>
      return;
 8003434:	bf00      	nop
 8003436:	e000      	b.n	800343a <HAL_UART_IRQHandler+0x58e>
    return;
 8003438:	bf00      	nop
  }

}
 800343a:	37e8      	adds	r7, #232	; 0xe8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4ba7      	ldr	r3, [pc, #668]	; (8003748 <UART_SetConfig+0x2c8>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	6979      	ldr	r1, [r7, #20]
 80034b4:	430b      	orrs	r3, r1
 80034b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a95      	ldr	r2, [pc, #596]	; (800374c <UART_SetConfig+0x2cc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d120      	bne.n	800353e <UART_SetConfig+0xbe>
 80034fc:	4b94      	ldr	r3, [pc, #592]	; (8003750 <UART_SetConfig+0x2d0>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	2b03      	cmp	r3, #3
 8003508:	d816      	bhi.n	8003538 <UART_SetConfig+0xb8>
 800350a:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <UART_SetConfig+0x90>)
 800350c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003510:	08003521 	.word	0x08003521
 8003514:	0800352d 	.word	0x0800352d
 8003518:	08003527 	.word	0x08003527
 800351c:	08003533 	.word	0x08003533
 8003520:	2301      	movs	r3, #1
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e14f      	b.n	80037c6 <UART_SetConfig+0x346>
 8003526:	2302      	movs	r3, #2
 8003528:	77fb      	strb	r3, [r7, #31]
 800352a:	e14c      	b.n	80037c6 <UART_SetConfig+0x346>
 800352c:	2304      	movs	r3, #4
 800352e:	77fb      	strb	r3, [r7, #31]
 8003530:	e149      	b.n	80037c6 <UART_SetConfig+0x346>
 8003532:	2308      	movs	r3, #8
 8003534:	77fb      	strb	r3, [r7, #31]
 8003536:	e146      	b.n	80037c6 <UART_SetConfig+0x346>
 8003538:	2310      	movs	r3, #16
 800353a:	77fb      	strb	r3, [r7, #31]
 800353c:	e143      	b.n	80037c6 <UART_SetConfig+0x346>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a84      	ldr	r2, [pc, #528]	; (8003754 <UART_SetConfig+0x2d4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d132      	bne.n	80035ae <UART_SetConfig+0x12e>
 8003548:	4b81      	ldr	r3, [pc, #516]	; (8003750 <UART_SetConfig+0x2d0>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b0c      	cmp	r3, #12
 8003554:	d828      	bhi.n	80035a8 <UART_SetConfig+0x128>
 8003556:	a201      	add	r2, pc, #4	; (adr r2, 800355c <UART_SetConfig+0xdc>)
 8003558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355c:	08003591 	.word	0x08003591
 8003560:	080035a9 	.word	0x080035a9
 8003564:	080035a9 	.word	0x080035a9
 8003568:	080035a9 	.word	0x080035a9
 800356c:	0800359d 	.word	0x0800359d
 8003570:	080035a9 	.word	0x080035a9
 8003574:	080035a9 	.word	0x080035a9
 8003578:	080035a9 	.word	0x080035a9
 800357c:	08003597 	.word	0x08003597
 8003580:	080035a9 	.word	0x080035a9
 8003584:	080035a9 	.word	0x080035a9
 8003588:	080035a9 	.word	0x080035a9
 800358c:	080035a3 	.word	0x080035a3
 8003590:	2300      	movs	r3, #0
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	e117      	b.n	80037c6 <UART_SetConfig+0x346>
 8003596:	2302      	movs	r3, #2
 8003598:	77fb      	strb	r3, [r7, #31]
 800359a:	e114      	b.n	80037c6 <UART_SetConfig+0x346>
 800359c:	2304      	movs	r3, #4
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e111      	b.n	80037c6 <UART_SetConfig+0x346>
 80035a2:	2308      	movs	r3, #8
 80035a4:	77fb      	strb	r3, [r7, #31]
 80035a6:	e10e      	b.n	80037c6 <UART_SetConfig+0x346>
 80035a8:	2310      	movs	r3, #16
 80035aa:	77fb      	strb	r3, [r7, #31]
 80035ac:	e10b      	b.n	80037c6 <UART_SetConfig+0x346>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a69      	ldr	r2, [pc, #420]	; (8003758 <UART_SetConfig+0x2d8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d120      	bne.n	80035fa <UART_SetConfig+0x17a>
 80035b8:	4b65      	ldr	r3, [pc, #404]	; (8003750 <UART_SetConfig+0x2d0>)
 80035ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035c2:	2b30      	cmp	r3, #48	; 0x30
 80035c4:	d013      	beq.n	80035ee <UART_SetConfig+0x16e>
 80035c6:	2b30      	cmp	r3, #48	; 0x30
 80035c8:	d814      	bhi.n	80035f4 <UART_SetConfig+0x174>
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d009      	beq.n	80035e2 <UART_SetConfig+0x162>
 80035ce:	2b20      	cmp	r3, #32
 80035d0:	d810      	bhi.n	80035f4 <UART_SetConfig+0x174>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <UART_SetConfig+0x15c>
 80035d6:	2b10      	cmp	r3, #16
 80035d8:	d006      	beq.n	80035e8 <UART_SetConfig+0x168>
 80035da:	e00b      	b.n	80035f4 <UART_SetConfig+0x174>
 80035dc:	2300      	movs	r3, #0
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e0f1      	b.n	80037c6 <UART_SetConfig+0x346>
 80035e2:	2302      	movs	r3, #2
 80035e4:	77fb      	strb	r3, [r7, #31]
 80035e6:	e0ee      	b.n	80037c6 <UART_SetConfig+0x346>
 80035e8:	2304      	movs	r3, #4
 80035ea:	77fb      	strb	r3, [r7, #31]
 80035ec:	e0eb      	b.n	80037c6 <UART_SetConfig+0x346>
 80035ee:	2308      	movs	r3, #8
 80035f0:	77fb      	strb	r3, [r7, #31]
 80035f2:	e0e8      	b.n	80037c6 <UART_SetConfig+0x346>
 80035f4:	2310      	movs	r3, #16
 80035f6:	77fb      	strb	r3, [r7, #31]
 80035f8:	e0e5      	b.n	80037c6 <UART_SetConfig+0x346>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a57      	ldr	r2, [pc, #348]	; (800375c <UART_SetConfig+0x2dc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d120      	bne.n	8003646 <UART_SetConfig+0x1c6>
 8003604:	4b52      	ldr	r3, [pc, #328]	; (8003750 <UART_SetConfig+0x2d0>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800360e:	2bc0      	cmp	r3, #192	; 0xc0
 8003610:	d013      	beq.n	800363a <UART_SetConfig+0x1ba>
 8003612:	2bc0      	cmp	r3, #192	; 0xc0
 8003614:	d814      	bhi.n	8003640 <UART_SetConfig+0x1c0>
 8003616:	2b80      	cmp	r3, #128	; 0x80
 8003618:	d009      	beq.n	800362e <UART_SetConfig+0x1ae>
 800361a:	2b80      	cmp	r3, #128	; 0x80
 800361c:	d810      	bhi.n	8003640 <UART_SetConfig+0x1c0>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <UART_SetConfig+0x1a8>
 8003622:	2b40      	cmp	r3, #64	; 0x40
 8003624:	d006      	beq.n	8003634 <UART_SetConfig+0x1b4>
 8003626:	e00b      	b.n	8003640 <UART_SetConfig+0x1c0>
 8003628:	2300      	movs	r3, #0
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e0cb      	b.n	80037c6 <UART_SetConfig+0x346>
 800362e:	2302      	movs	r3, #2
 8003630:	77fb      	strb	r3, [r7, #31]
 8003632:	e0c8      	b.n	80037c6 <UART_SetConfig+0x346>
 8003634:	2304      	movs	r3, #4
 8003636:	77fb      	strb	r3, [r7, #31]
 8003638:	e0c5      	b.n	80037c6 <UART_SetConfig+0x346>
 800363a:	2308      	movs	r3, #8
 800363c:	77fb      	strb	r3, [r7, #31]
 800363e:	e0c2      	b.n	80037c6 <UART_SetConfig+0x346>
 8003640:	2310      	movs	r3, #16
 8003642:	77fb      	strb	r3, [r7, #31]
 8003644:	e0bf      	b.n	80037c6 <UART_SetConfig+0x346>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a45      	ldr	r2, [pc, #276]	; (8003760 <UART_SetConfig+0x2e0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d125      	bne.n	800369c <UART_SetConfig+0x21c>
 8003650:	4b3f      	ldr	r3, [pc, #252]	; (8003750 <UART_SetConfig+0x2d0>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800365e:	d017      	beq.n	8003690 <UART_SetConfig+0x210>
 8003660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003664:	d817      	bhi.n	8003696 <UART_SetConfig+0x216>
 8003666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800366a:	d00b      	beq.n	8003684 <UART_SetConfig+0x204>
 800366c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003670:	d811      	bhi.n	8003696 <UART_SetConfig+0x216>
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <UART_SetConfig+0x1fe>
 8003676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800367a:	d006      	beq.n	800368a <UART_SetConfig+0x20a>
 800367c:	e00b      	b.n	8003696 <UART_SetConfig+0x216>
 800367e:	2300      	movs	r3, #0
 8003680:	77fb      	strb	r3, [r7, #31]
 8003682:	e0a0      	b.n	80037c6 <UART_SetConfig+0x346>
 8003684:	2302      	movs	r3, #2
 8003686:	77fb      	strb	r3, [r7, #31]
 8003688:	e09d      	b.n	80037c6 <UART_SetConfig+0x346>
 800368a:	2304      	movs	r3, #4
 800368c:	77fb      	strb	r3, [r7, #31]
 800368e:	e09a      	b.n	80037c6 <UART_SetConfig+0x346>
 8003690:	2308      	movs	r3, #8
 8003692:	77fb      	strb	r3, [r7, #31]
 8003694:	e097      	b.n	80037c6 <UART_SetConfig+0x346>
 8003696:	2310      	movs	r3, #16
 8003698:	77fb      	strb	r3, [r7, #31]
 800369a:	e094      	b.n	80037c6 <UART_SetConfig+0x346>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a30      	ldr	r2, [pc, #192]	; (8003764 <UART_SetConfig+0x2e4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d125      	bne.n	80036f2 <UART_SetConfig+0x272>
 80036a6:	4b2a      	ldr	r3, [pc, #168]	; (8003750 <UART_SetConfig+0x2d0>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036b4:	d017      	beq.n	80036e6 <UART_SetConfig+0x266>
 80036b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036ba:	d817      	bhi.n	80036ec <UART_SetConfig+0x26c>
 80036bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c0:	d00b      	beq.n	80036da <UART_SetConfig+0x25a>
 80036c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c6:	d811      	bhi.n	80036ec <UART_SetConfig+0x26c>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <UART_SetConfig+0x254>
 80036cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d0:	d006      	beq.n	80036e0 <UART_SetConfig+0x260>
 80036d2:	e00b      	b.n	80036ec <UART_SetConfig+0x26c>
 80036d4:	2301      	movs	r3, #1
 80036d6:	77fb      	strb	r3, [r7, #31]
 80036d8:	e075      	b.n	80037c6 <UART_SetConfig+0x346>
 80036da:	2302      	movs	r3, #2
 80036dc:	77fb      	strb	r3, [r7, #31]
 80036de:	e072      	b.n	80037c6 <UART_SetConfig+0x346>
 80036e0:	2304      	movs	r3, #4
 80036e2:	77fb      	strb	r3, [r7, #31]
 80036e4:	e06f      	b.n	80037c6 <UART_SetConfig+0x346>
 80036e6:	2308      	movs	r3, #8
 80036e8:	77fb      	strb	r3, [r7, #31]
 80036ea:	e06c      	b.n	80037c6 <UART_SetConfig+0x346>
 80036ec:	2310      	movs	r3, #16
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e069      	b.n	80037c6 <UART_SetConfig+0x346>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a1c      	ldr	r2, [pc, #112]	; (8003768 <UART_SetConfig+0x2e8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d137      	bne.n	800376c <UART_SetConfig+0x2ec>
 80036fc:	4b14      	ldr	r3, [pc, #80]	; (8003750 <UART_SetConfig+0x2d0>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003706:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800370a:	d017      	beq.n	800373c <UART_SetConfig+0x2bc>
 800370c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003710:	d817      	bhi.n	8003742 <UART_SetConfig+0x2c2>
 8003712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003716:	d00b      	beq.n	8003730 <UART_SetConfig+0x2b0>
 8003718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371c:	d811      	bhi.n	8003742 <UART_SetConfig+0x2c2>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <UART_SetConfig+0x2aa>
 8003722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003726:	d006      	beq.n	8003736 <UART_SetConfig+0x2b6>
 8003728:	e00b      	b.n	8003742 <UART_SetConfig+0x2c2>
 800372a:	2300      	movs	r3, #0
 800372c:	77fb      	strb	r3, [r7, #31]
 800372e:	e04a      	b.n	80037c6 <UART_SetConfig+0x346>
 8003730:	2302      	movs	r3, #2
 8003732:	77fb      	strb	r3, [r7, #31]
 8003734:	e047      	b.n	80037c6 <UART_SetConfig+0x346>
 8003736:	2304      	movs	r3, #4
 8003738:	77fb      	strb	r3, [r7, #31]
 800373a:	e044      	b.n	80037c6 <UART_SetConfig+0x346>
 800373c:	2308      	movs	r3, #8
 800373e:	77fb      	strb	r3, [r7, #31]
 8003740:	e041      	b.n	80037c6 <UART_SetConfig+0x346>
 8003742:	2310      	movs	r3, #16
 8003744:	77fb      	strb	r3, [r7, #31]
 8003746:	e03e      	b.n	80037c6 <UART_SetConfig+0x346>
 8003748:	efff69f3 	.word	0xefff69f3
 800374c:	40011000 	.word	0x40011000
 8003750:	40023800 	.word	0x40023800
 8003754:	40004400 	.word	0x40004400
 8003758:	40004800 	.word	0x40004800
 800375c:	40004c00 	.word	0x40004c00
 8003760:	40005000 	.word	0x40005000
 8003764:	40011400 	.word	0x40011400
 8003768:	40007800 	.word	0x40007800
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a71      	ldr	r2, [pc, #452]	; (8003938 <UART_SetConfig+0x4b8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d125      	bne.n	80037c2 <UART_SetConfig+0x342>
 8003776:	4b71      	ldr	r3, [pc, #452]	; (800393c <UART_SetConfig+0x4bc>)
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003780:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003784:	d017      	beq.n	80037b6 <UART_SetConfig+0x336>
 8003786:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800378a:	d817      	bhi.n	80037bc <UART_SetConfig+0x33c>
 800378c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003790:	d00b      	beq.n	80037aa <UART_SetConfig+0x32a>
 8003792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003796:	d811      	bhi.n	80037bc <UART_SetConfig+0x33c>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <UART_SetConfig+0x324>
 800379c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037a0:	d006      	beq.n	80037b0 <UART_SetConfig+0x330>
 80037a2:	e00b      	b.n	80037bc <UART_SetConfig+0x33c>
 80037a4:	2300      	movs	r3, #0
 80037a6:	77fb      	strb	r3, [r7, #31]
 80037a8:	e00d      	b.n	80037c6 <UART_SetConfig+0x346>
 80037aa:	2302      	movs	r3, #2
 80037ac:	77fb      	strb	r3, [r7, #31]
 80037ae:	e00a      	b.n	80037c6 <UART_SetConfig+0x346>
 80037b0:	2304      	movs	r3, #4
 80037b2:	77fb      	strb	r3, [r7, #31]
 80037b4:	e007      	b.n	80037c6 <UART_SetConfig+0x346>
 80037b6:	2308      	movs	r3, #8
 80037b8:	77fb      	strb	r3, [r7, #31]
 80037ba:	e004      	b.n	80037c6 <UART_SetConfig+0x346>
 80037bc:	2310      	movs	r3, #16
 80037be:	77fb      	strb	r3, [r7, #31]
 80037c0:	e001      	b.n	80037c6 <UART_SetConfig+0x346>
 80037c2:	2310      	movs	r3, #16
 80037c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ce:	d15a      	bne.n	8003886 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80037d0:	7ffb      	ldrb	r3, [r7, #31]
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d827      	bhi.n	8003826 <UART_SetConfig+0x3a6>
 80037d6:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <UART_SetConfig+0x35c>)
 80037d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037dc:	08003801 	.word	0x08003801
 80037e0:	08003809 	.word	0x08003809
 80037e4:	08003811 	.word	0x08003811
 80037e8:	08003827 	.word	0x08003827
 80037ec:	08003817 	.word	0x08003817
 80037f0:	08003827 	.word	0x08003827
 80037f4:	08003827 	.word	0x08003827
 80037f8:	08003827 	.word	0x08003827
 80037fc:	0800381f 	.word	0x0800381f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003800:	f7fe fafa 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 8003804:	61b8      	str	r0, [r7, #24]
        break;
 8003806:	e013      	b.n	8003830 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003808:	f7fe fb0a 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 800380c:	61b8      	str	r0, [r7, #24]
        break;
 800380e:	e00f      	b.n	8003830 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003810:	4b4b      	ldr	r3, [pc, #300]	; (8003940 <UART_SetConfig+0x4c0>)
 8003812:	61bb      	str	r3, [r7, #24]
        break;
 8003814:	e00c      	b.n	8003830 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003816:	f7fe fa2d 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 800381a:	61b8      	str	r0, [r7, #24]
        break;
 800381c:	e008      	b.n	8003830 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800381e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003822:	61bb      	str	r3, [r7, #24]
        break;
 8003824:	e004      	b.n	8003830 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	77bb      	strb	r3, [r7, #30]
        break;
 800382e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d074      	beq.n	8003920 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	005a      	lsls	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	085b      	lsrs	r3, r3, #1
 8003840:	441a      	add	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	fbb2 f3f3 	udiv	r3, r2, r3
 800384a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2b0f      	cmp	r3, #15
 8003850:	d916      	bls.n	8003880 <UART_SetConfig+0x400>
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003858:	d212      	bcs.n	8003880 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	b29b      	uxth	r3, r3
 800385e:	f023 030f 	bic.w	r3, r3, #15
 8003862:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	b29b      	uxth	r3, r3
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	b29a      	uxth	r2, r3
 8003870:	89fb      	ldrh	r3, [r7, #14]
 8003872:	4313      	orrs	r3, r2
 8003874:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	89fa      	ldrh	r2, [r7, #14]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	e04f      	b.n	8003920 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	77bb      	strb	r3, [r7, #30]
 8003884:	e04c      	b.n	8003920 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003886:	7ffb      	ldrb	r3, [r7, #31]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d828      	bhi.n	80038de <UART_SetConfig+0x45e>
 800388c:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <UART_SetConfig+0x414>)
 800388e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003892:	bf00      	nop
 8003894:	080038b9 	.word	0x080038b9
 8003898:	080038c1 	.word	0x080038c1
 800389c:	080038c9 	.word	0x080038c9
 80038a0:	080038df 	.word	0x080038df
 80038a4:	080038cf 	.word	0x080038cf
 80038a8:	080038df 	.word	0x080038df
 80038ac:	080038df 	.word	0x080038df
 80038b0:	080038df 	.word	0x080038df
 80038b4:	080038d7 	.word	0x080038d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b8:	f7fe fa9e 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 80038bc:	61b8      	str	r0, [r7, #24]
        break;
 80038be:	e013      	b.n	80038e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038c0:	f7fe faae 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 80038c4:	61b8      	str	r0, [r7, #24]
        break;
 80038c6:	e00f      	b.n	80038e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c8:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <UART_SetConfig+0x4c0>)
 80038ca:	61bb      	str	r3, [r7, #24]
        break;
 80038cc:	e00c      	b.n	80038e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ce:	f7fe f9d1 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 80038d2:	61b8      	str	r0, [r7, #24]
        break;
 80038d4:	e008      	b.n	80038e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038da:	61bb      	str	r3, [r7, #24]
        break;
 80038dc:	e004      	b.n	80038e8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	77bb      	strb	r3, [r7, #30]
        break;
 80038e6:	bf00      	nop
    }

    if (pclk != 0U)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d018      	beq.n	8003920 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	085a      	lsrs	r2, r3, #1
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	441a      	add	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2b0f      	cmp	r3, #15
 8003906:	d909      	bls.n	800391c <UART_SetConfig+0x49c>
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390e:	d205      	bcs.n	800391c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	b29a      	uxth	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	e001      	b.n	8003920 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800392c:	7fbb      	ldrb	r3, [r7, #30]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40007c00 	.word	0x40007c00
 800393c:	40023800 	.word	0x40023800
 8003940:	00f42400 	.word	0x00f42400

08003944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01a      	beq.n	8003a5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a42:	d10a      	bne.n	8003a5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	605a      	str	r2, [r3, #4]
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a98:	f7fd f9c6 	bl	8000e28 <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d10e      	bne.n	8003aca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f817 	bl	8003aee <UART_WaitOnFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e00d      	b.n	8003ae6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b09c      	sub	sp, #112	; 0x70
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	4613      	mov	r3, r2
 8003afc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003afe:	e0a5      	b.n	8003c4c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b06:	f000 80a1 	beq.w	8003c4c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0a:	f7fd f98d 	bl	8000e28 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d302      	bcc.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d13e      	bne.n	8003b9e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b34:	667b      	str	r3, [r7, #100]	; 0x64
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b40:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b46:	e841 2300 	strex	r3, r2, [r1]
 8003b4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1e6      	bne.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3308      	adds	r3, #8
 8003b58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	663b      	str	r3, [r7, #96]	; 0x60
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3308      	adds	r3, #8
 8003b70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b72:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1e5      	bne.n	8003b52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e067      	b.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d04f      	beq.n	8003c4c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bba:	d147      	bne.n	8003c4c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be4:	637b      	str	r3, [r7, #52]	; 0x34
 8003be6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e6      	bne.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3308      	adds	r3, #8
 8003bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	613b      	str	r3, [r7, #16]
   return(result);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3308      	adds	r3, #8
 8003c16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c18:	623a      	str	r2, [r7, #32]
 8003c1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	69f9      	ldr	r1, [r7, #28]
 8003c1e:	6a3a      	ldr	r2, [r7, #32]
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e5      	bne.n	8003bf8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e010      	b.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69da      	ldr	r2, [r3, #28]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	4013      	ands	r3, r2
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	f43f af4a 	beq.w	8003b00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3770      	adds	r7, #112	; 0x70
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b097      	sub	sp, #92	; 0x5c
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	4613      	mov	r3, r2
 8003c84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	88fa      	ldrh	r2, [r7, #6]
 8003c98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003caa:	d10e      	bne.n	8003cca <UART_Start_Receive_IT+0x52>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d105      	bne.n	8003cc0 <UART_Start_Receive_IT+0x48>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003cba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cbe:	e02d      	b.n	8003d1c <UART_Start_Receive_IT+0xa4>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	22ff      	movs	r2, #255	; 0xff
 8003cc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cc8:	e028      	b.n	8003d1c <UART_Start_Receive_IT+0xa4>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10d      	bne.n	8003cee <UART_Start_Receive_IT+0x76>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <UART_Start_Receive_IT+0x6c>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	22ff      	movs	r2, #255	; 0xff
 8003cde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ce2:	e01b      	b.n	8003d1c <UART_Start_Receive_IT+0xa4>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	227f      	movs	r2, #127	; 0x7f
 8003ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cec:	e016      	b.n	8003d1c <UART_Start_Receive_IT+0xa4>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cf6:	d10d      	bne.n	8003d14 <UART_Start_Receive_IT+0x9c>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d104      	bne.n	8003d0a <UART_Start_Receive_IT+0x92>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	227f      	movs	r2, #127	; 0x7f
 8003d04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d08:	e008      	b.n	8003d1c <UART_Start_Receive_IT+0xa4>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	223f      	movs	r2, #63	; 0x3f
 8003d0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d12:	e003      	b.n	8003d1c <UART_Start_Receive_IT+0xa4>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2222      	movs	r2, #34	; 0x22
 8003d28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3308      	adds	r3, #8
 8003d30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	657b      	str	r3, [r7, #84]	; 0x54
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3308      	adds	r3, #8
 8003d48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1e5      	bne.n	8003d2a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d66:	d107      	bne.n	8003d78 <UART_Start_Receive_IT+0x100>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d103      	bne.n	8003d78 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4a24      	ldr	r2, [pc, #144]	; (8003e04 <UART_Start_Receive_IT+0x18c>)
 8003d74:	665a      	str	r2, [r3, #100]	; 0x64
 8003d76:	e002      	b.n	8003d7e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4a23      	ldr	r2, [pc, #140]	; (8003e08 <UART_Start_Receive_IT+0x190>)
 8003d7c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d019      	beq.n	8003dc2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dac:	637b      	str	r3, [r7, #52]	; 0x34
 8003dae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e6      	bne.n	8003d8e <UART_Start_Receive_IT+0x116>
 8003dc0:	e018      	b.n	8003df4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f043 0320 	orr.w	r3, r3, #32
 8003dd6:	653b      	str	r3, [r7, #80]	; 0x50
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de0:	623b      	str	r3, [r7, #32]
 8003de2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	69f9      	ldr	r1, [r7, #28]
 8003de6:	6a3a      	ldr	r2, [r7, #32]
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e6      	bne.n	8003dc2 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	375c      	adds	r7, #92	; 0x5c
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	080040af 	.word	0x080040af
 8003e08:	08003f53 	.word	0x08003f53

08003e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b095      	sub	sp, #84	; 0x54
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1c:	e853 3f00 	ldrex	r3, [r3]
 8003e20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e32:	643b      	str	r3, [r7, #64]	; 0x40
 8003e34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e6      	bne.n	8003e14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3308      	adds	r3, #8
 8003e4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3308      	adds	r3, #8
 8003e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e5      	bne.n	8003e46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d118      	bne.n	8003eb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f023 0310 	bic.w	r3, r3, #16
 8003e96:	647b      	str	r3, [r7, #68]	; 0x44
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea4:	6979      	ldr	r1, [r7, #20]
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	613b      	str	r3, [r7, #16]
   return(result);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e6      	bne.n	8003e82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003ec6:	bf00      	nop
 8003ec8:	3754      	adds	r7, #84	; 0x54
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f7ff faaf 	bl	8003454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b088      	sub	sp, #32
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	e853 3f00 	ldrex	r3, [r3]
 8003f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f1a:	61fb      	str	r3, [r7, #28]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	461a      	mov	r2, r3
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f28:	6979      	ldr	r1, [r7, #20]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	613b      	str	r3, [r7, #16]
   return(result);
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e6      	bne.n	8003f06 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fa7b 	bl	8003440 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f4a:	bf00      	nop
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b096      	sub	sp, #88	; 0x58
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f60:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f68:	2b22      	cmp	r3, #34	; 0x22
 8003f6a:	f040 8094 	bne.w	8004096 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f78:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003f7c:	b2d9      	uxtb	r1, r3
 8003f7e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f88:	400a      	ands	r2, r1
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d177      	bne.n	80040a6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fca:	653b      	str	r3, [r7, #80]	; 0x50
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e6      	bne.n	8003fb6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3308      	adds	r3, #8
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3308      	adds	r3, #8
 8004006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004008:	633a      	str	r2, [r7, #48]	; 0x30
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800400e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e5      	bne.n	8003fe8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402c:	2b01      	cmp	r3, #1
 800402e:	d12e      	bne.n	800408e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	60fb      	str	r3, [r7, #12]
   return(result);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0310 	bic.w	r3, r3, #16
 800404a:	64bb      	str	r3, [r7, #72]	; 0x48
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	69b9      	ldr	r1, [r7, #24]
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	617b      	str	r3, [r7, #20]
   return(result);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e6      	bne.n	8004036 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b10      	cmp	r3, #16
 8004074:	d103      	bne.n	800407e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2210      	movs	r2, #16
 800407c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004084:	4619      	mov	r1, r3
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff f9ee 	bl	8003468 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800408c:	e00b      	b.n	80040a6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fc fcd2 	bl	8000a38 <HAL_UART_RxCpltCallback>
}
 8004094:	e007      	b.n	80040a6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699a      	ldr	r2, [r3, #24]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0208 	orr.w	r2, r2, #8
 80040a4:	619a      	str	r2, [r3, #24]
}
 80040a6:	bf00      	nop
 80040a8:	3758      	adds	r7, #88	; 0x58
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b096      	sub	sp, #88	; 0x58
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c4:	2b22      	cmp	r3, #34	; 0x22
 80040c6:	f040 8094 	bne.w	80041f2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80040da:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80040de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80040e2:	4013      	ands	r3, r2
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	1c9a      	adds	r2, r3, #2
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d177      	bne.n	8004202 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004122:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004130:	643b      	str	r3, [r7, #64]	; 0x40
 8004132:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004136:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e6      	bne.n	8004112 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3308      	adds	r3, #8
 800414a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	e853 3f00 	ldrex	r3, [r3]
 8004152:	61fb      	str	r3, [r7, #28]
   return(result);
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f023 0301 	bic.w	r3, r3, #1
 800415a:	64bb      	str	r3, [r7, #72]	; 0x48
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3308      	adds	r3, #8
 8004162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004164:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004166:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800416a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800416c:	e841 2300 	strex	r3, r2, [r1]
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e5      	bne.n	8004144 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004188:	2b01      	cmp	r3, #1
 800418a:	d12e      	bne.n	80041ea <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	60bb      	str	r3, [r7, #8]
   return(result);
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f023 0310 	bic.w	r3, r3, #16
 80041a6:	647b      	str	r3, [r7, #68]	; 0x44
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6979      	ldr	r1, [r7, #20]
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	613b      	str	r3, [r7, #16]
   return(result);
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e6      	bne.n	8004192 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b10      	cmp	r3, #16
 80041d0:	d103      	bne.n	80041da <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2210      	movs	r2, #16
 80041d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80041e0:	4619      	mov	r1, r3
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff f940 	bl	8003468 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041e8:	e00b      	b.n	8004202 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fc fc24 	bl	8000a38 <HAL_UART_RxCpltCallback>
}
 80041f0:	e007      	b.n	8004202 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699a      	ldr	r2, [r3, #24]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0208 	orr.w	r2, r2, #8
 8004200:	619a      	str	r2, [r3, #24]
}
 8004202:	bf00      	nop
 8004204:	3758      	adds	r7, #88	; 0x58
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f103 0208 	add.w	r2, r3, #8
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f04f 32ff 	mov.w	r2, #4294967295
 8004222:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f103 0208 	add.w	r2, r3, #8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f103 0208 	add.w	r2, r3, #8
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	601a      	str	r2, [r3, #0]
}
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c2:	d103      	bne.n	80042cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	e00c      	b.n	80042e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3308      	adds	r3, #8
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	e002      	b.n	80042da <vListInsert+0x2e>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d2f6      	bcs.n	80042d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
}
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800431e:	b480      	push	{r7}
 8004320:	b085      	sub	sp, #20
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6892      	ldr	r2, [r2, #8]
 8004334:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6852      	ldr	r2, [r2, #4]
 800433e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	429a      	cmp	r2, r3
 8004348:	d103      	bne.n	8004352 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	1e5a      	subs	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
	...

08004374 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10c      	bne.n	80043a2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438c:	b672      	cpsid	i
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	b662      	cpsie	i
 800439c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80043a2:	f001 fc4b 	bl	8005c3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ae:	68f9      	ldr	r1, [r7, #12]
 80043b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	441a      	add	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d2:	3b01      	subs	r3, #1
 80043d4:	68f9      	ldr	r1, [r7, #12]
 80043d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	441a      	add	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	22ff      	movs	r2, #255	; 0xff
 80043e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	22ff      	movs	r2, #255	; 0xff
 80043ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d114      	bne.n	8004422 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01a      	beq.n	8004436 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3310      	adds	r3, #16
 8004404:	4618      	mov	r0, r3
 8004406:	f001 f83d 	bl	8005484 <xTaskRemoveFromEventList>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d012      	beq.n	8004436 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <xQueueGenericReset+0xd0>)
 8004412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	e009      	b.n	8004436 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3310      	adds	r3, #16
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff feef 	bl	800420a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3324      	adds	r3, #36	; 0x24
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff feea 	bl	800420a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004436:	f001 fc35 	bl	8005ca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800443a:	2301      	movs	r3, #1
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	e000ed04 	.word	0xe000ed04

08004448 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	; 0x28
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	4613      	mov	r3, r2
 8004454:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10c      	bne.n	8004476 <xQueueGenericCreate+0x2e>
	__asm volatile
 800445c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004460:	b672      	cpsid	i
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	b662      	cpsie	i
 8004470:	613b      	str	r3, [r7, #16]
}
 8004472:	bf00      	nop
 8004474:	e7fe      	b.n	8004474 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d102      	bne.n	8004482 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800447c:	2300      	movs	r3, #0
 800447e:	61fb      	str	r3, [r7, #28]
 8004480:	e004      	b.n	800448c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	3348      	adds	r3, #72	; 0x48
 8004490:	4618      	mov	r0, r3
 8004492:	f001 fcff 	bl	8005e94 <pvPortMalloc>
 8004496:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d011      	beq.n	80044c2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	3348      	adds	r3, #72	; 0x48
 80044a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044b0:	79fa      	ldrb	r2, [r7, #7]
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	4613      	mov	r3, r2
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f805 	bl	80044cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044c2:	69bb      	ldr	r3, [r7, #24]
	}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3720      	adds	r7, #32
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d103      	bne.n	80044e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	e002      	b.n	80044ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044fa:	2101      	movs	r1, #1
 80044fc:	69b8      	ldr	r0, [r7, #24]
 80044fe:	f7ff ff39 	bl	8004374 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004502:	bf00      	nop
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08e      	sub	sp, #56	; 0x38
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800451a:	2300      	movs	r3, #0
 800451c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10c      	bne.n	8004542 <xQueueGenericSend+0x36>
	__asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	b672      	cpsid	i
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	b662      	cpsie	i
 800453c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800453e:	bf00      	nop
 8004540:	e7fe      	b.n	8004540 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d103      	bne.n	8004550 <xQueueGenericSend+0x44>
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <xQueueGenericSend+0x48>
 8004550:	2301      	movs	r3, #1
 8004552:	e000      	b.n	8004556 <xQueueGenericSend+0x4a>
 8004554:	2300      	movs	r3, #0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10c      	bne.n	8004574 <xQueueGenericSend+0x68>
	__asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455e:	b672      	cpsid	i
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	b662      	cpsie	i
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004570:	bf00      	nop
 8004572:	e7fe      	b.n	8004572 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d103      	bne.n	8004582 <xQueueGenericSend+0x76>
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <xQueueGenericSend+0x7a>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <xQueueGenericSend+0x7c>
 8004586:	2300      	movs	r3, #0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10c      	bne.n	80045a6 <xQueueGenericSend+0x9a>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	b672      	cpsid	i
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	b662      	cpsie	i
 80045a0:	623b      	str	r3, [r7, #32]
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045a6:	f001 f931 	bl	800580c <xTaskGetSchedulerState>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <xQueueGenericSend+0xaa>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <xQueueGenericSend+0xae>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <xQueueGenericSend+0xb0>
 80045ba:	2300      	movs	r3, #0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10c      	bne.n	80045da <xQueueGenericSend+0xce>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	b672      	cpsid	i
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	b662      	cpsie	i
 80045d4:	61fb      	str	r3, [r7, #28]
}
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045da:	f001 fb2f 	bl	8005c3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d302      	bcc.n	80045f0 <xQueueGenericSend+0xe4>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d129      	bne.n	8004644 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045f6:	f000 fa15 	bl	8004a24 <prvCopyDataToQueue>
 80045fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	2b00      	cmp	r3, #0
 8004602:	d010      	beq.n	8004626 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	3324      	adds	r3, #36	; 0x24
 8004608:	4618      	mov	r0, r3
 800460a:	f000 ff3b 	bl	8005484 <xTaskRemoveFromEventList>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d013      	beq.n	800463c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004614:	4b3f      	ldr	r3, [pc, #252]	; (8004714 <xQueueGenericSend+0x208>)
 8004616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	e00a      	b.n	800463c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800462c:	4b39      	ldr	r3, [pc, #228]	; (8004714 <xQueueGenericSend+0x208>)
 800462e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800463c:	f001 fb32 	bl	8005ca4 <vPortExitCritical>
				return pdPASS;
 8004640:	2301      	movs	r3, #1
 8004642:	e063      	b.n	800470c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d103      	bne.n	8004652 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800464a:	f001 fb2b 	bl	8005ca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800464e:	2300      	movs	r3, #0
 8004650:	e05c      	b.n	800470c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004654:	2b00      	cmp	r3, #0
 8004656:	d106      	bne.n	8004666 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004658:	f107 0314 	add.w	r3, r7, #20
 800465c:	4618      	mov	r0, r3
 800465e:	f000 ff75 	bl	800554c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004662:	2301      	movs	r3, #1
 8004664:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004666:	f001 fb1d 	bl	8005ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800466a:	f000 fd21 	bl	80050b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800466e:	f001 fae5 	bl	8005c3c <vPortEnterCritical>
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004678:	b25b      	sxtb	r3, r3
 800467a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467e:	d103      	bne.n	8004688 <xQueueGenericSend+0x17c>
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800468e:	b25b      	sxtb	r3, r3
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004694:	d103      	bne.n	800469e <xQueueGenericSend+0x192>
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800469e:	f001 fb01 	bl	8005ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046a2:	1d3a      	adds	r2, r7, #4
 80046a4:	f107 0314 	add.w	r3, r7, #20
 80046a8:	4611      	mov	r1, r2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 ff64 	bl	8005578 <xTaskCheckForTimeOut>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d124      	bne.n	8004700 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046b8:	f000 faac 	bl	8004c14 <prvIsQueueFull>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d018      	beq.n	80046f4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	3310      	adds	r3, #16
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	4611      	mov	r1, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 feb4 	bl	8005438 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046d2:	f000 fa37 	bl	8004b44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046d6:	f000 fcf9 	bl	80050cc <xTaskResumeAll>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f47f af7c 	bne.w	80045da <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80046e2:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <xQueueGenericSend+0x208>)
 80046e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	e772      	b.n	80045da <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046f6:	f000 fa25 	bl	8004b44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046fa:	f000 fce7 	bl	80050cc <xTaskResumeAll>
 80046fe:	e76c      	b.n	80045da <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004702:	f000 fa1f 	bl	8004b44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004706:	f000 fce1 	bl	80050cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800470a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800470c:	4618      	mov	r0, r3
 800470e:	3738      	adds	r7, #56	; 0x38
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	e000ed04 	.word	0xe000ed04

08004718 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08e      	sub	sp, #56	; 0x38
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10c      	bne.n	800474a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	b672      	cpsid	i
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	b662      	cpsie	i
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004746:	bf00      	nop
 8004748:	e7fe      	b.n	8004748 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <xQueueGenericSendFromISR+0x40>
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <xQueueGenericSendFromISR+0x44>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <xQueueGenericSendFromISR+0x46>
 800475c:	2300      	movs	r3, #0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10c      	bne.n	800477c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	b672      	cpsid	i
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	b662      	cpsie	i
 8004776:	623b      	str	r3, [r7, #32]
}
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d103      	bne.n	800478a <xQueueGenericSendFromISR+0x72>
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <xQueueGenericSendFromISR+0x76>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <xQueueGenericSendFromISR+0x78>
 800478e:	2300      	movs	r3, #0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10c      	bne.n	80047ae <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	b672      	cpsid	i
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	b662      	cpsie	i
 80047a8:	61fb      	str	r3, [r7, #28]
}
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047ae:	f001 fb2d 	bl	8005e0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047b2:	f3ef 8211 	mrs	r2, BASEPRI
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	b672      	cpsid	i
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	b662      	cpsie	i
 80047ca:	61ba      	str	r2, [r7, #24]
 80047cc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047ce:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	429a      	cmp	r2, r3
 80047dc:	d302      	bcc.n	80047e4 <xQueueGenericSendFromISR+0xcc>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d12c      	bne.n	800483e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047f4:	f000 f916 	bl	8004a24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047f8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d112      	bne.n	8004828 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	2b00      	cmp	r3, #0
 8004808:	d016      	beq.n	8004838 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	3324      	adds	r3, #36	; 0x24
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fe38 	bl	8005484 <xTaskRemoveFromEventList>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00e      	beq.n	8004838 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00b      	beq.n	8004838 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	e007      	b.n	8004838 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004828:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800482c:	3301      	adds	r3, #1
 800482e:	b2db      	uxtb	r3, r3
 8004830:	b25a      	sxtb	r2, r3
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004838:	2301      	movs	r3, #1
 800483a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800483c:	e001      	b.n	8004842 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800483e:	2300      	movs	r3, #0
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
 8004842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004844:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800484c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800484e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004850:	4618      	mov	r0, r3
 8004852:	3738      	adds	r7, #56	; 0x38
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08c      	sub	sp, #48	; 0x30
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004864:	2300      	movs	r3, #0
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10c      	bne.n	800488c <xQueueReceive+0x34>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	b672      	cpsid	i
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	b662      	cpsie	i
 8004886:	623b      	str	r3, [r7, #32]
}
 8004888:	bf00      	nop
 800488a:	e7fe      	b.n	800488a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d103      	bne.n	800489a <xQueueReceive+0x42>
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <xQueueReceive+0x46>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <xQueueReceive+0x48>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10c      	bne.n	80048be <xQueueReceive+0x66>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	b672      	cpsid	i
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	b662      	cpsie	i
 80048b8:	61fb      	str	r3, [r7, #28]
}
 80048ba:	bf00      	nop
 80048bc:	e7fe      	b.n	80048bc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048be:	f000 ffa5 	bl	800580c <xTaskGetSchedulerState>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d102      	bne.n	80048ce <xQueueReceive+0x76>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <xQueueReceive+0x7a>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <xQueueReceive+0x7c>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10c      	bne.n	80048f2 <xQueueReceive+0x9a>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	b672      	cpsid	i
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	b662      	cpsie	i
 80048ec:	61bb      	str	r3, [r7, #24]
}
 80048ee:	bf00      	nop
 80048f0:	e7fe      	b.n	80048f0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048f2:	f001 f9a3 	bl	8005c3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01f      	beq.n	8004942 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004906:	f000 f8f7 	bl	8004af8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	1e5a      	subs	r2, r3, #1
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00f      	beq.n	800493a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	3310      	adds	r3, #16
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fdb0 	bl	8005484 <xTaskRemoveFromEventList>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800492a:	4b3d      	ldr	r3, [pc, #244]	; (8004a20 <xQueueReceive+0x1c8>)
 800492c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800493a:	f001 f9b3 	bl	8005ca4 <vPortExitCritical>
				return pdPASS;
 800493e:	2301      	movs	r3, #1
 8004940:	e069      	b.n	8004a16 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d103      	bne.n	8004950 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004948:	f001 f9ac 	bl	8005ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800494c:	2300      	movs	r3, #0
 800494e:	e062      	b.n	8004a16 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004956:	f107 0310 	add.w	r3, r7, #16
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fdf6 	bl	800554c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004960:	2301      	movs	r3, #1
 8004962:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004964:	f001 f99e 	bl	8005ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004968:	f000 fba2 	bl	80050b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800496c:	f001 f966 	bl	8005c3c <vPortEnterCritical>
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004976:	b25b      	sxtb	r3, r3
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d103      	bne.n	8004986 <xQueueReceive+0x12e>
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800498c:	b25b      	sxtb	r3, r3
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004992:	d103      	bne.n	800499c <xQueueReceive+0x144>
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800499c:	f001 f982 	bl	8005ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049a0:	1d3a      	adds	r2, r7, #4
 80049a2:	f107 0310 	add.w	r3, r7, #16
 80049a6:	4611      	mov	r1, r2
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fde5 	bl	8005578 <xTaskCheckForTimeOut>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d123      	bne.n	80049fc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b6:	f000 f917 	bl	8004be8 <prvIsQueueEmpty>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d017      	beq.n	80049f0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	3324      	adds	r3, #36	; 0x24
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	4611      	mov	r1, r2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fd35 	bl	8005438 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049d0:	f000 f8b8 	bl	8004b44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049d4:	f000 fb7a 	bl	80050cc <xTaskResumeAll>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d189      	bne.n	80048f2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80049de:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <xQueueReceive+0x1c8>)
 80049e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	e780      	b.n	80048f2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f2:	f000 f8a7 	bl	8004b44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049f6:	f000 fb69 	bl	80050cc <xTaskResumeAll>
 80049fa:	e77a      	b.n	80048f2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049fe:	f000 f8a1 	bl	8004b44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a02:	f000 fb63 	bl	80050cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a08:	f000 f8ee 	bl	8004be8 <prvIsQueueEmpty>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f43f af6f 	beq.w	80048f2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3730      	adds	r7, #48	; 0x30
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	e000ed04 	.word	0xe000ed04

08004a24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10d      	bne.n	8004a5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d14d      	bne.n	8004ae6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fefa 	bl	8005848 <xTaskPriorityDisinherit>
 8004a54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	609a      	str	r2, [r3, #8]
 8004a5c:	e043      	b.n	8004ae6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d119      	bne.n	8004a98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6858      	ldr	r0, [r3, #4]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	f001 fc1e 	bl	80062b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	441a      	add	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d32b      	bcc.n	8004ae6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	605a      	str	r2, [r3, #4]
 8004a96:	e026      	b.n	8004ae6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	68d8      	ldr	r0, [r3, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	f001 fc04 	bl	80062b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	425b      	negs	r3, r3
 8004ab2:	441a      	add	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d207      	bcs.n	8004ad4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	425b      	negs	r3, r3
 8004ace:	441a      	add	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d105      	bne.n	8004ae6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004aee:	697b      	ldr	r3, [r7, #20]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d018      	beq.n	8004b3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	441a      	add	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d303      	bcc.n	8004b2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68d9      	ldr	r1, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	461a      	mov	r2, r3
 8004b36:	6838      	ldr	r0, [r7, #0]
 8004b38:	f001 fbba 	bl	80062b0 <memcpy>
	}
}
 8004b3c:	bf00      	nop
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b4c:	f001 f876 	bl	8005c3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b58:	e011      	b.n	8004b7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d012      	beq.n	8004b88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3324      	adds	r3, #36	; 0x24
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fc8c 	bl	8005484 <xTaskRemoveFromEventList>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b72:	f000 fd67 	bl	8005644 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	dce9      	bgt.n	8004b5a <prvUnlockQueue+0x16>
 8004b86:	e000      	b.n	8004b8a <prvUnlockQueue+0x46>
					break;
 8004b88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	22ff      	movs	r2, #255	; 0xff
 8004b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b92:	f001 f887 	bl	8005ca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b96:	f001 f851 	bl	8005c3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ba0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ba2:	e011      	b.n	8004bc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d012      	beq.n	8004bd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3310      	adds	r3, #16
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fc67 	bl	8005484 <xTaskRemoveFromEventList>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004bbc:	f000 fd42 	bl	8005644 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004bc0:	7bbb      	ldrb	r3, [r7, #14]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	dce9      	bgt.n	8004ba4 <prvUnlockQueue+0x60>
 8004bd0:	e000      	b.n	8004bd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004bd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	22ff      	movs	r2, #255	; 0xff
 8004bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004bdc:	f001 f862 	bl	8005ca4 <vPortExitCritical>
}
 8004be0:	bf00      	nop
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bf0:	f001 f824 	bl	8005c3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	e001      	b.n	8004c06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c06:	f001 f84d 	bl	8005ca4 <vPortExitCritical>

	return xReturn;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c1c:	f001 f80e 	bl	8005c3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d102      	bne.n	8004c32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	e001      	b.n	8004c36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c36:	f001 f835 	bl	8005ca4 <vPortExitCritical>

	return xReturn;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08e      	sub	sp, #56	; 0x38
 8004c48:	af04      	add	r7, sp, #16
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10c      	bne.n	8004c72 <xTaskCreateStatic+0x2e>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	b672      	cpsid	i
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	b662      	cpsie	i
 8004c6c:	623b      	str	r3, [r7, #32]
}
 8004c6e:	bf00      	nop
 8004c70:	e7fe      	b.n	8004c70 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10c      	bne.n	8004c92 <xTaskCreateStatic+0x4e>
	__asm volatile
 8004c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7c:	b672      	cpsid	i
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	b662      	cpsie	i
 8004c8c:	61fb      	str	r3, [r7, #28]
}
 8004c8e:	bf00      	nop
 8004c90:	e7fe      	b.n	8004c90 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c92:	2354      	movs	r3, #84	; 0x54
 8004c94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	2b54      	cmp	r3, #84	; 0x54
 8004c9a:	d00c      	beq.n	8004cb6 <xTaskCreateStatic+0x72>
	__asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	b672      	cpsid	i
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	b662      	cpsie	i
 8004cb0:	61bb      	str	r3, [r7, #24]
}
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004cb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d01e      	beq.n	8004cfc <xTaskCreateStatic+0xb8>
 8004cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01b      	beq.n	8004cfc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ccc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	9303      	str	r3, [sp, #12]
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	9302      	str	r3, [sp, #8]
 8004cde:	f107 0314 	add.w	r3, r7, #20
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f850 	bl	8004d94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cf6:	f000 f8d7 	bl	8004ea8 <prvAddNewTaskToReadyList>
 8004cfa:	e001      	b.n	8004d00 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d00:	697b      	ldr	r3, [r7, #20]
	}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3728      	adds	r7, #40	; 0x28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b08c      	sub	sp, #48	; 0x30
 8004d0e:	af04      	add	r7, sp, #16
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	603b      	str	r3, [r7, #0]
 8004d16:	4613      	mov	r3, r2
 8004d18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d1a:	88fb      	ldrh	r3, [r7, #6]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f001 f8b8 	bl	8005e94 <pvPortMalloc>
 8004d24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00e      	beq.n	8004d4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d2c:	2054      	movs	r0, #84	; 0x54
 8004d2e:	f001 f8b1 	bl	8005e94 <pvPortMalloc>
 8004d32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8004d40:	e005      	b.n	8004d4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d42:	6978      	ldr	r0, [r7, #20]
 8004d44:	f001 f970 	bl	8006028 <vPortFree>
 8004d48:	e001      	b.n	8004d4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d017      	beq.n	8004d84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d5c:	88fa      	ldrh	r2, [r7, #6]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	9303      	str	r3, [sp, #12]
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	9302      	str	r3, [sp, #8]
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	9301      	str	r3, [sp, #4]
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 f80e 	bl	8004d94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d78:	69f8      	ldr	r0, [r7, #28]
 8004d7a:	f000 f895 	bl	8004ea8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	e002      	b.n	8004d8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d84:	f04f 33ff 	mov.w	r3, #4294967295
 8004d88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
	}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3720      	adds	r7, #32
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004dac:	440b      	add	r3, r1
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	f023 0307 	bic.w	r3, r3, #7
 8004dba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00c      	beq.n	8004de0 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dca:	b672      	cpsid	i
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	b662      	cpsie	i
 8004dda:	617b      	str	r3, [r7, #20]
}
 8004ddc:	bf00      	nop
 8004dde:	e7fe      	b.n	8004dde <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d01f      	beq.n	8004e26 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	e012      	b.n	8004e12 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	4413      	add	r3, r2
 8004df2:	7819      	ldrb	r1, [r3, #0]
 8004df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	4413      	add	r3, r2
 8004dfa:	3334      	adds	r3, #52	; 0x34
 8004dfc:	460a      	mov	r2, r1
 8004dfe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d006      	beq.n	8004e1a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	61fb      	str	r3, [r7, #28]
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	2b0f      	cmp	r3, #15
 8004e16:	d9e9      	bls.n	8004dec <prvInitialiseNewTask+0x58>
 8004e18:	e000      	b.n	8004e1c <prvInitialiseNewTask+0x88>
			{
				break;
 8004e1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e24:	e003      	b.n	8004e2e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	2b06      	cmp	r3, #6
 8004e32:	d901      	bls.n	8004e38 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e34:	2306      	movs	r3, #6
 8004e36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e42:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	2200      	movs	r2, #0
 8004e48:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff f9fb 	bl	800424a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	3318      	adds	r3, #24
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7ff f9f6 	bl	800424a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	f1c3 0207 	rsb	r2, r3, #7
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	2200      	movs	r2, #0
 8004e78:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	68f9      	ldr	r1, [r7, #12]
 8004e86:	69b8      	ldr	r0, [r7, #24]
 8004e88:	f000 fdce 	bl	8005a28 <pxPortInitialiseStack>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e9e:	bf00      	nop
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004eb0:	f000 fec4 	bl	8005c3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004eb4:	4b2a      	ldr	r3, [pc, #168]	; (8004f60 <prvAddNewTaskToReadyList+0xb8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	4a29      	ldr	r2, [pc, #164]	; (8004f60 <prvAddNewTaskToReadyList+0xb8>)
 8004ebc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ebe:	4b29      	ldr	r3, [pc, #164]	; (8004f64 <prvAddNewTaskToReadyList+0xbc>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d109      	bne.n	8004eda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ec6:	4a27      	ldr	r2, [pc, #156]	; (8004f64 <prvAddNewTaskToReadyList+0xbc>)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ecc:	4b24      	ldr	r3, [pc, #144]	; (8004f60 <prvAddNewTaskToReadyList+0xb8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d110      	bne.n	8004ef6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ed4:	f000 fbda 	bl	800568c <prvInitialiseTaskLists>
 8004ed8:	e00d      	b.n	8004ef6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004eda:	4b23      	ldr	r3, [pc, #140]	; (8004f68 <prvAddNewTaskToReadyList+0xc0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d109      	bne.n	8004ef6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ee2:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <prvAddNewTaskToReadyList+0xbc>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d802      	bhi.n	8004ef6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ef0:	4a1c      	ldr	r2, [pc, #112]	; (8004f64 <prvAddNewTaskToReadyList+0xbc>)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ef6:	4b1d      	ldr	r3, [pc, #116]	; (8004f6c <prvAddNewTaskToReadyList+0xc4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3301      	adds	r3, #1
 8004efc:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <prvAddNewTaskToReadyList+0xc4>)
 8004efe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	2201      	movs	r2, #1
 8004f06:	409a      	lsls	r2, r3
 8004f08:	4b19      	ldr	r3, [pc, #100]	; (8004f70 <prvAddNewTaskToReadyList+0xc8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	4a18      	ldr	r2, [pc, #96]	; (8004f70 <prvAddNewTaskToReadyList+0xc8>)
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4a15      	ldr	r2, [pc, #84]	; (8004f74 <prvAddNewTaskToReadyList+0xcc>)
 8004f20:	441a      	add	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f7ff f99b 	bl	8004264 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f2e:	f000 feb9 	bl	8005ca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f32:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <prvAddNewTaskToReadyList+0xc0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00e      	beq.n	8004f58 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <prvAddNewTaskToReadyList+0xbc>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d207      	bcs.n	8004f58 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <prvAddNewTaskToReadyList+0xd0>)
 8004f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f58:	bf00      	nop
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	200003e8 	.word	0x200003e8
 8004f64:	200002e8 	.word	0x200002e8
 8004f68:	200003f4 	.word	0x200003f4
 8004f6c:	20000404 	.word	0x20000404
 8004f70:	200003f0 	.word	0x200003f0
 8004f74:	200002ec 	.word	0x200002ec
 8004f78:	e000ed04 	.word	0xe000ed04

08004f7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d019      	beq.n	8004fc2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f8e:	4b14      	ldr	r3, [pc, #80]	; (8004fe0 <vTaskDelay+0x64>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00c      	beq.n	8004fb0 <vTaskDelay+0x34>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	b672      	cpsid	i
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	b662      	cpsie	i
 8004faa:	60bb      	str	r3, [r7, #8]
}
 8004fac:	bf00      	nop
 8004fae:	e7fe      	b.n	8004fae <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004fb0:	f000 f87e 	bl	80050b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fcd0 	bl	800595c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004fbc:	f000 f886 	bl	80050cc <xTaskResumeAll>
 8004fc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d107      	bne.n	8004fd8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004fc8:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <vTaskDelay+0x68>)
 8004fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fd8:	bf00      	nop
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	20000410 	.word	0x20000410
 8004fe4:	e000ed04 	.word	0xe000ed04

08004fe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ff6:	463a      	mov	r2, r7
 8004ff8:	1d39      	adds	r1, r7, #4
 8004ffa:	f107 0308 	add.w	r3, r7, #8
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fb fada 	bl	80005b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	9202      	str	r2, [sp, #8]
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	2300      	movs	r3, #0
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	2300      	movs	r3, #0
 8005014:	460a      	mov	r2, r1
 8005016:	4920      	ldr	r1, [pc, #128]	; (8005098 <vTaskStartScheduler+0xb0>)
 8005018:	4820      	ldr	r0, [pc, #128]	; (800509c <vTaskStartScheduler+0xb4>)
 800501a:	f7ff fe13 	bl	8004c44 <xTaskCreateStatic>
 800501e:	4603      	mov	r3, r0
 8005020:	4a1f      	ldr	r2, [pc, #124]	; (80050a0 <vTaskStartScheduler+0xb8>)
 8005022:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005024:	4b1e      	ldr	r3, [pc, #120]	; (80050a0 <vTaskStartScheduler+0xb8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800502c:	2301      	movs	r3, #1
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	e001      	b.n	8005036 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d118      	bne.n	800506e <vTaskStartScheduler+0x86>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	b672      	cpsid	i
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	b662      	cpsie	i
 8005050:	613b      	str	r3, [r7, #16]
}
 8005052:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005054:	4b13      	ldr	r3, [pc, #76]	; (80050a4 <vTaskStartScheduler+0xbc>)
 8005056:	f04f 32ff 	mov.w	r2, #4294967295
 800505a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800505c:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <vTaskStartScheduler+0xc0>)
 800505e:	2201      	movs	r2, #1
 8005060:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005062:	4b12      	ldr	r3, [pc, #72]	; (80050ac <vTaskStartScheduler+0xc4>)
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005068:	f000 fd6a 	bl	8005b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800506c:	e010      	b.n	8005090 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005074:	d10c      	bne.n	8005090 <vTaskStartScheduler+0xa8>
	__asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	b672      	cpsid	i
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	b662      	cpsie	i
 800508a:	60fb      	str	r3, [r7, #12]
}
 800508c:	bf00      	nop
 800508e:	e7fe      	b.n	800508e <vTaskStartScheduler+0xa6>
}
 8005090:	bf00      	nop
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	08006d74 	.word	0x08006d74
 800509c:	0800565d 	.word	0x0800565d
 80050a0:	2000040c 	.word	0x2000040c
 80050a4:	20000408 	.word	0x20000408
 80050a8:	200003f4 	.word	0x200003f4
 80050ac:	200003ec 	.word	0x200003ec

080050b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80050b4:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <vTaskSuspendAll+0x18>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3301      	adds	r3, #1
 80050ba:	4a03      	ldr	r2, [pc, #12]	; (80050c8 <vTaskSuspendAll+0x18>)
 80050bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80050be:	bf00      	nop
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	20000410 	.word	0x20000410

080050cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050da:	4b42      	ldr	r3, [pc, #264]	; (80051e4 <xTaskResumeAll+0x118>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10c      	bne.n	80050fc <xTaskResumeAll+0x30>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	b672      	cpsid	i
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	b662      	cpsie	i
 80050f6:	603b      	str	r3, [r7, #0]
}
 80050f8:	bf00      	nop
 80050fa:	e7fe      	b.n	80050fa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050fc:	f000 fd9e 	bl	8005c3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005100:	4b38      	ldr	r3, [pc, #224]	; (80051e4 <xTaskResumeAll+0x118>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3b01      	subs	r3, #1
 8005106:	4a37      	ldr	r2, [pc, #220]	; (80051e4 <xTaskResumeAll+0x118>)
 8005108:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800510a:	4b36      	ldr	r3, [pc, #216]	; (80051e4 <xTaskResumeAll+0x118>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d161      	bne.n	80051d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005112:	4b35      	ldr	r3, [pc, #212]	; (80051e8 <xTaskResumeAll+0x11c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d05d      	beq.n	80051d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800511a:	e02e      	b.n	800517a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800511c:	4b33      	ldr	r3, [pc, #204]	; (80051ec <xTaskResumeAll+0x120>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	3318      	adds	r3, #24
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff f8f8 	bl	800431e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3304      	adds	r3, #4
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff f8f3 	bl	800431e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	2201      	movs	r2, #1
 800513e:	409a      	lsls	r2, r3
 8005140:	4b2b      	ldr	r3, [pc, #172]	; (80051f0 <xTaskResumeAll+0x124>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4313      	orrs	r3, r2
 8005146:	4a2a      	ldr	r2, [pc, #168]	; (80051f0 <xTaskResumeAll+0x124>)
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514e:	4613      	mov	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4a27      	ldr	r2, [pc, #156]	; (80051f4 <xTaskResumeAll+0x128>)
 8005158:	441a      	add	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3304      	adds	r3, #4
 800515e:	4619      	mov	r1, r3
 8005160:	4610      	mov	r0, r2
 8005162:	f7ff f87f 	bl	8004264 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516a:	4b23      	ldr	r3, [pc, #140]	; (80051f8 <xTaskResumeAll+0x12c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	429a      	cmp	r2, r3
 8005172:	d302      	bcc.n	800517a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005174:	4b21      	ldr	r3, [pc, #132]	; (80051fc <xTaskResumeAll+0x130>)
 8005176:	2201      	movs	r2, #1
 8005178:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800517a:	4b1c      	ldr	r3, [pc, #112]	; (80051ec <xTaskResumeAll+0x120>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1cc      	bne.n	800511c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005188:	f000 fb20 	bl	80057cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800518c:	4b1c      	ldr	r3, [pc, #112]	; (8005200 <xTaskResumeAll+0x134>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d010      	beq.n	80051ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005198:	f000 f836 	bl	8005208 <xTaskIncrementTick>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80051a2:	4b16      	ldr	r3, [pc, #88]	; (80051fc <xTaskResumeAll+0x130>)
 80051a4:	2201      	movs	r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1f1      	bne.n	8005198 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80051b4:	4b12      	ldr	r3, [pc, #72]	; (8005200 <xTaskResumeAll+0x134>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051ba:	4b10      	ldr	r3, [pc, #64]	; (80051fc <xTaskResumeAll+0x130>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051c2:	2301      	movs	r3, #1
 80051c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051c6:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <xTaskResumeAll+0x138>)
 80051c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051d6:	f000 fd65 	bl	8005ca4 <vPortExitCritical>

	return xAlreadyYielded;
 80051da:	68bb      	ldr	r3, [r7, #8]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	20000410 	.word	0x20000410
 80051e8:	200003e8 	.word	0x200003e8
 80051ec:	200003a8 	.word	0x200003a8
 80051f0:	200003f0 	.word	0x200003f0
 80051f4:	200002ec 	.word	0x200002ec
 80051f8:	200002e8 	.word	0x200002e8
 80051fc:	200003fc 	.word	0x200003fc
 8005200:	200003f8 	.word	0x200003f8
 8005204:	e000ed04 	.word	0xe000ed04

08005208 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800520e:	2300      	movs	r3, #0
 8005210:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005212:	4b4f      	ldr	r3, [pc, #316]	; (8005350 <xTaskIncrementTick+0x148>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f040 808a 	bne.w	8005330 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800521c:	4b4d      	ldr	r3, [pc, #308]	; (8005354 <xTaskIncrementTick+0x14c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3301      	adds	r3, #1
 8005222:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005224:	4a4b      	ldr	r2, [pc, #300]	; (8005354 <xTaskIncrementTick+0x14c>)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d122      	bne.n	8005276 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005230:	4b49      	ldr	r3, [pc, #292]	; (8005358 <xTaskIncrementTick+0x150>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00c      	beq.n	8005254 <xTaskIncrementTick+0x4c>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	b672      	cpsid	i
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	b662      	cpsie	i
 800524e:	603b      	str	r3, [r7, #0]
}
 8005250:	bf00      	nop
 8005252:	e7fe      	b.n	8005252 <xTaskIncrementTick+0x4a>
 8005254:	4b40      	ldr	r3, [pc, #256]	; (8005358 <xTaskIncrementTick+0x150>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	4b40      	ldr	r3, [pc, #256]	; (800535c <xTaskIncrementTick+0x154>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a3e      	ldr	r2, [pc, #248]	; (8005358 <xTaskIncrementTick+0x150>)
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	4a3e      	ldr	r2, [pc, #248]	; (800535c <xTaskIncrementTick+0x154>)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	4b3d      	ldr	r3, [pc, #244]	; (8005360 <xTaskIncrementTick+0x158>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3301      	adds	r3, #1
 800526e:	4a3c      	ldr	r2, [pc, #240]	; (8005360 <xTaskIncrementTick+0x158>)
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	f000 faab 	bl	80057cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005276:	4b3b      	ldr	r3, [pc, #236]	; (8005364 <xTaskIncrementTick+0x15c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	429a      	cmp	r2, r3
 800527e:	d348      	bcc.n	8005312 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005280:	4b35      	ldr	r3, [pc, #212]	; (8005358 <xTaskIncrementTick+0x150>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d104      	bne.n	8005294 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800528a:	4b36      	ldr	r3, [pc, #216]	; (8005364 <xTaskIncrementTick+0x15c>)
 800528c:	f04f 32ff 	mov.w	r2, #4294967295
 8005290:	601a      	str	r2, [r3, #0]
					break;
 8005292:	e03e      	b.n	8005312 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005294:	4b30      	ldr	r3, [pc, #192]	; (8005358 <xTaskIncrementTick+0x150>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d203      	bcs.n	80052b4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052ac:	4a2d      	ldr	r2, [pc, #180]	; (8005364 <xTaskIncrementTick+0x15c>)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80052b2:	e02e      	b.n	8005312 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	3304      	adds	r3, #4
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff f830 	bl	800431e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d004      	beq.n	80052d0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	3318      	adds	r3, #24
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff f827 	bl	800431e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	2201      	movs	r2, #1
 80052d6:	409a      	lsls	r2, r3
 80052d8:	4b23      	ldr	r3, [pc, #140]	; (8005368 <xTaskIncrementTick+0x160>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4313      	orrs	r3, r2
 80052de:	4a22      	ldr	r2, [pc, #136]	; (8005368 <xTaskIncrementTick+0x160>)
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4a1f      	ldr	r2, [pc, #124]	; (800536c <xTaskIncrementTick+0x164>)
 80052f0:	441a      	add	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	3304      	adds	r3, #4
 80052f6:	4619      	mov	r1, r3
 80052f8:	4610      	mov	r0, r2
 80052fa:	f7fe ffb3 	bl	8004264 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005302:	4b1b      	ldr	r3, [pc, #108]	; (8005370 <xTaskIncrementTick+0x168>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	429a      	cmp	r2, r3
 800530a:	d3b9      	bcc.n	8005280 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800530c:	2301      	movs	r3, #1
 800530e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005310:	e7b6      	b.n	8005280 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005312:	4b17      	ldr	r3, [pc, #92]	; (8005370 <xTaskIncrementTick+0x168>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005318:	4914      	ldr	r1, [pc, #80]	; (800536c <xTaskIncrementTick+0x164>)
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	440b      	add	r3, r1
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d907      	bls.n	800533a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800532a:	2301      	movs	r3, #1
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	e004      	b.n	800533a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005330:	4b10      	ldr	r3, [pc, #64]	; (8005374 <xTaskIncrementTick+0x16c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	4a0f      	ldr	r2, [pc, #60]	; (8005374 <xTaskIncrementTick+0x16c>)
 8005338:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800533a:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <xTaskIncrementTick+0x170>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8005342:	2301      	movs	r3, #1
 8005344:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005346:	697b      	ldr	r3, [r7, #20]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	20000410 	.word	0x20000410
 8005354:	200003ec 	.word	0x200003ec
 8005358:	200003a0 	.word	0x200003a0
 800535c:	200003a4 	.word	0x200003a4
 8005360:	20000400 	.word	0x20000400
 8005364:	20000408 	.word	0x20000408
 8005368:	200003f0 	.word	0x200003f0
 800536c:	200002ec 	.word	0x200002ec
 8005370:	200002e8 	.word	0x200002e8
 8005374:	200003f8 	.word	0x200003f8
 8005378:	200003fc 	.word	0x200003fc

0800537c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005382:	4b28      	ldr	r3, [pc, #160]	; (8005424 <vTaskSwitchContext+0xa8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800538a:	4b27      	ldr	r3, [pc, #156]	; (8005428 <vTaskSwitchContext+0xac>)
 800538c:	2201      	movs	r2, #1
 800538e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005390:	e041      	b.n	8005416 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005392:	4b25      	ldr	r3, [pc, #148]	; (8005428 <vTaskSwitchContext+0xac>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005398:	4b24      	ldr	r3, [pc, #144]	; (800542c <vTaskSwitchContext+0xb0>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	fab3 f383 	clz	r3, r3
 80053a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80053a6:	7afb      	ldrb	r3, [r7, #11]
 80053a8:	f1c3 031f 	rsb	r3, r3, #31
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	4920      	ldr	r1, [pc, #128]	; (8005430 <vTaskSwitchContext+0xb4>)
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10c      	bne.n	80053dc <vTaskSwitchContext+0x60>
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	b672      	cpsid	i
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	b662      	cpsie	i
 80053d6:	607b      	str	r3, [r7, #4]
}
 80053d8:	bf00      	nop
 80053da:	e7fe      	b.n	80053da <vTaskSwitchContext+0x5e>
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4613      	mov	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4a12      	ldr	r2, [pc, #72]	; (8005430 <vTaskSwitchContext+0xb4>)
 80053e8:	4413      	add	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	605a      	str	r2, [r3, #4]
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	3308      	adds	r3, #8
 80053fe:	429a      	cmp	r2, r3
 8005400:	d104      	bne.n	800540c <vTaskSwitchContext+0x90>
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	605a      	str	r2, [r3, #4]
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	4a08      	ldr	r2, [pc, #32]	; (8005434 <vTaskSwitchContext+0xb8>)
 8005414:	6013      	str	r3, [r2, #0]
}
 8005416:	bf00      	nop
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000410 	.word	0x20000410
 8005428:	200003fc 	.word	0x200003fc
 800542c:	200003f0 	.word	0x200003f0
 8005430:	200002ec 	.word	0x200002ec
 8005434:	200002e8 	.word	0x200002e8

08005438 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10c      	bne.n	8005462 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	b672      	cpsid	i
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	b662      	cpsie	i
 800545c:	60fb      	str	r3, [r7, #12]
}
 800545e:	bf00      	nop
 8005460:	e7fe      	b.n	8005460 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005462:	4b07      	ldr	r3, [pc, #28]	; (8005480 <vTaskPlaceOnEventList+0x48>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3318      	adds	r3, #24
 8005468:	4619      	mov	r1, r3
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fe ff1e 	bl	80042ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005470:	2101      	movs	r1, #1
 8005472:	6838      	ldr	r0, [r7, #0]
 8005474:	f000 fa72 	bl	800595c <prvAddCurrentTaskToDelayedList>
}
 8005478:	bf00      	nop
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	200002e8 	.word	0x200002e8

08005484 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10c      	bne.n	80054b4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	b672      	cpsid	i
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	b662      	cpsie	i
 80054ae:	60fb      	str	r3, [r7, #12]
}
 80054b0:	bf00      	nop
 80054b2:	e7fe      	b.n	80054b2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	3318      	adds	r3, #24
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fe ff30 	bl	800431e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054be:	4b1d      	ldr	r3, [pc, #116]	; (8005534 <xTaskRemoveFromEventList+0xb0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d11c      	bne.n	8005500 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	3304      	adds	r3, #4
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fe ff27 	bl	800431e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	2201      	movs	r2, #1
 80054d6:	409a      	lsls	r2, r3
 80054d8:	4b17      	ldr	r3, [pc, #92]	; (8005538 <xTaskRemoveFromEventList+0xb4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4313      	orrs	r3, r2
 80054de:	4a16      	ldr	r2, [pc, #88]	; (8005538 <xTaskRemoveFromEventList+0xb4>)
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4a13      	ldr	r2, [pc, #76]	; (800553c <xTaskRemoveFromEventList+0xb8>)
 80054f0:	441a      	add	r2, r3
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	3304      	adds	r3, #4
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f7fe feb3 	bl	8004264 <vListInsertEnd>
 80054fe:	e005      	b.n	800550c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	3318      	adds	r3, #24
 8005504:	4619      	mov	r1, r3
 8005506:	480e      	ldr	r0, [pc, #56]	; (8005540 <xTaskRemoveFromEventList+0xbc>)
 8005508:	f7fe feac 	bl	8004264 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005510:	4b0c      	ldr	r3, [pc, #48]	; (8005544 <xTaskRemoveFromEventList+0xc0>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	429a      	cmp	r2, r3
 8005518:	d905      	bls.n	8005526 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800551a:	2301      	movs	r3, #1
 800551c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800551e:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <xTaskRemoveFromEventList+0xc4>)
 8005520:	2201      	movs	r2, #1
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	e001      	b.n	800552a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800552a:	697b      	ldr	r3, [r7, #20]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20000410 	.word	0x20000410
 8005538:	200003f0 	.word	0x200003f0
 800553c:	200002ec 	.word	0x200002ec
 8005540:	200003a8 	.word	0x200003a8
 8005544:	200002e8 	.word	0x200002e8
 8005548:	200003fc 	.word	0x200003fc

0800554c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005554:	4b06      	ldr	r3, [pc, #24]	; (8005570 <vTaskInternalSetTimeOutState+0x24>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800555c:	4b05      	ldr	r3, [pc, #20]	; (8005574 <vTaskInternalSetTimeOutState+0x28>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	605a      	str	r2, [r3, #4]
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	20000400 	.word	0x20000400
 8005574:	200003ec 	.word	0x200003ec

08005578 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b088      	sub	sp, #32
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10c      	bne.n	80055a2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558c:	b672      	cpsid	i
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	b662      	cpsie	i
 800559c:	613b      	str	r3, [r7, #16]
}
 800559e:	bf00      	nop
 80055a0:	e7fe      	b.n	80055a0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10c      	bne.n	80055c2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	b672      	cpsid	i
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	b662      	cpsie	i
 80055bc:	60fb      	str	r3, [r7, #12]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80055c2:	f000 fb3b 	bl	8005c3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055c6:	4b1d      	ldr	r3, [pc, #116]	; (800563c <xTaskCheckForTimeOut+0xc4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d102      	bne.n	80055e6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	e023      	b.n	800562e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	4b15      	ldr	r3, [pc, #84]	; (8005640 <xTaskCheckForTimeOut+0xc8>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d007      	beq.n	8005602 <xTaskCheckForTimeOut+0x8a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d302      	bcc.n	8005602 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055fc:	2301      	movs	r3, #1
 80055fe:	61fb      	str	r3, [r7, #28]
 8005600:	e015      	b.n	800562e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	429a      	cmp	r2, r3
 800560a:	d20b      	bcs.n	8005624 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	1ad2      	subs	r2, r2, r3
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff ff97 	bl	800554c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800561e:	2300      	movs	r3, #0
 8005620:	61fb      	str	r3, [r7, #28]
 8005622:	e004      	b.n	800562e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800562a:	2301      	movs	r3, #1
 800562c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800562e:	f000 fb39 	bl	8005ca4 <vPortExitCritical>

	return xReturn;
 8005632:	69fb      	ldr	r3, [r7, #28]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3720      	adds	r7, #32
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	200003ec 	.word	0x200003ec
 8005640:	20000400 	.word	0x20000400

08005644 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <vTaskMissedYield+0x14>)
 800564a:	2201      	movs	r2, #1
 800564c:	601a      	str	r2, [r3, #0]
}
 800564e:	bf00      	nop
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	200003fc 	.word	0x200003fc

0800565c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005664:	f000 f852 	bl	800570c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005668:	4b06      	ldr	r3, [pc, #24]	; (8005684 <prvIdleTask+0x28>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d9f9      	bls.n	8005664 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005670:	4b05      	ldr	r3, [pc, #20]	; (8005688 <prvIdleTask+0x2c>)
 8005672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005680:	e7f0      	b.n	8005664 <prvIdleTask+0x8>
 8005682:	bf00      	nop
 8005684:	200002ec 	.word	0x200002ec
 8005688:	e000ed04 	.word	0xe000ed04

0800568c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005692:	2300      	movs	r3, #0
 8005694:	607b      	str	r3, [r7, #4]
 8005696:	e00c      	b.n	80056b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4a12      	ldr	r2, [pc, #72]	; (80056ec <prvInitialiseTaskLists+0x60>)
 80056a4:	4413      	add	r3, r2
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fe fdaf 	bl	800420a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3301      	adds	r3, #1
 80056b0:	607b      	str	r3, [r7, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b06      	cmp	r3, #6
 80056b6:	d9ef      	bls.n	8005698 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056b8:	480d      	ldr	r0, [pc, #52]	; (80056f0 <prvInitialiseTaskLists+0x64>)
 80056ba:	f7fe fda6 	bl	800420a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056be:	480d      	ldr	r0, [pc, #52]	; (80056f4 <prvInitialiseTaskLists+0x68>)
 80056c0:	f7fe fda3 	bl	800420a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056c4:	480c      	ldr	r0, [pc, #48]	; (80056f8 <prvInitialiseTaskLists+0x6c>)
 80056c6:	f7fe fda0 	bl	800420a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056ca:	480c      	ldr	r0, [pc, #48]	; (80056fc <prvInitialiseTaskLists+0x70>)
 80056cc:	f7fe fd9d 	bl	800420a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80056d0:	480b      	ldr	r0, [pc, #44]	; (8005700 <prvInitialiseTaskLists+0x74>)
 80056d2:	f7fe fd9a 	bl	800420a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056d6:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <prvInitialiseTaskLists+0x78>)
 80056d8:	4a05      	ldr	r2, [pc, #20]	; (80056f0 <prvInitialiseTaskLists+0x64>)
 80056da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056dc:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <prvInitialiseTaskLists+0x7c>)
 80056de:	4a05      	ldr	r2, [pc, #20]	; (80056f4 <prvInitialiseTaskLists+0x68>)
 80056e0:	601a      	str	r2, [r3, #0]
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	200002ec 	.word	0x200002ec
 80056f0:	20000378 	.word	0x20000378
 80056f4:	2000038c 	.word	0x2000038c
 80056f8:	200003a8 	.word	0x200003a8
 80056fc:	200003bc 	.word	0x200003bc
 8005700:	200003d4 	.word	0x200003d4
 8005704:	200003a0 	.word	0x200003a0
 8005708:	200003a4 	.word	0x200003a4

0800570c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005712:	e019      	b.n	8005748 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005714:	f000 fa92 	bl	8005c3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005718:	4b10      	ldr	r3, [pc, #64]	; (800575c <prvCheckTasksWaitingTermination+0x50>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3304      	adds	r3, #4
 8005724:	4618      	mov	r0, r3
 8005726:	f7fe fdfa 	bl	800431e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800572a:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <prvCheckTasksWaitingTermination+0x54>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3b01      	subs	r3, #1
 8005730:	4a0b      	ldr	r2, [pc, #44]	; (8005760 <prvCheckTasksWaitingTermination+0x54>)
 8005732:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005734:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <prvCheckTasksWaitingTermination+0x58>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3b01      	subs	r3, #1
 800573a:	4a0a      	ldr	r2, [pc, #40]	; (8005764 <prvCheckTasksWaitingTermination+0x58>)
 800573c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800573e:	f000 fab1 	bl	8005ca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f810 	bl	8005768 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005748:	4b06      	ldr	r3, [pc, #24]	; (8005764 <prvCheckTasksWaitingTermination+0x58>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e1      	bne.n	8005714 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	200003bc 	.word	0x200003bc
 8005760:	200003e8 	.word	0x200003e8
 8005764:	200003d0 	.word	0x200003d0

08005768 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005776:	2b00      	cmp	r3, #0
 8005778:	d108      	bne.n	800578c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fc52 	bl	8006028 <vPortFree>
				vPortFree( pxTCB );
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fc4f 	bl	8006028 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800578a:	e01a      	b.n	80057c2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005792:	2b01      	cmp	r3, #1
 8005794:	d103      	bne.n	800579e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fc46 	bl	8006028 <vPortFree>
	}
 800579c:	e011      	b.n	80057c2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d00c      	beq.n	80057c2 <prvDeleteTCB+0x5a>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	b672      	cpsid	i
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	b662      	cpsie	i
 80057bc:	60fb      	str	r3, [r7, #12]
}
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <prvDeleteTCB+0x58>
	}
 80057c2:	bf00      	nop
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057d2:	4b0c      	ldr	r3, [pc, #48]	; (8005804 <prvResetNextTaskUnblockTime+0x38>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d104      	bne.n	80057e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057dc:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <prvResetNextTaskUnblockTime+0x3c>)
 80057de:	f04f 32ff 	mov.w	r2, #4294967295
 80057e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057e4:	e008      	b.n	80057f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057e6:	4b07      	ldr	r3, [pc, #28]	; (8005804 <prvResetNextTaskUnblockTime+0x38>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	4a04      	ldr	r2, [pc, #16]	; (8005808 <prvResetNextTaskUnblockTime+0x3c>)
 80057f6:	6013      	str	r3, [r2, #0]
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	200003a0 	.word	0x200003a0
 8005808:	20000408 	.word	0x20000408

0800580c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005812:	4b0b      	ldr	r3, [pc, #44]	; (8005840 <xTaskGetSchedulerState+0x34>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d102      	bne.n	8005820 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800581a:	2301      	movs	r3, #1
 800581c:	607b      	str	r3, [r7, #4]
 800581e:	e008      	b.n	8005832 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005820:	4b08      	ldr	r3, [pc, #32]	; (8005844 <xTaskGetSchedulerState+0x38>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d102      	bne.n	800582e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005828:	2302      	movs	r3, #2
 800582a:	607b      	str	r3, [r7, #4]
 800582c:	e001      	b.n	8005832 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800582e:	2300      	movs	r3, #0
 8005830:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005832:	687b      	ldr	r3, [r7, #4]
	}
 8005834:	4618      	mov	r0, r3
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	200003f4 	.word	0x200003f4
 8005844:	20000410 	.word	0x20000410

08005848 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d072      	beq.n	8005944 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800585e:	4b3c      	ldr	r3, [pc, #240]	; (8005950 <xTaskPriorityDisinherit+0x108>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	429a      	cmp	r2, r3
 8005866:	d00c      	beq.n	8005882 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	b672      	cpsid	i
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	b662      	cpsie	i
 800587c:	60fb      	str	r3, [r7, #12]
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10c      	bne.n	80058a4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	b672      	cpsid	i
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	b662      	cpsie	i
 800589e:	60bb      	str	r3, [r7, #8]
}
 80058a0:	bf00      	nop
 80058a2:	e7fe      	b.n	80058a2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058a8:	1e5a      	subs	r2, r3, #1
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d044      	beq.n	8005944 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d140      	bne.n	8005944 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	3304      	adds	r3, #4
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe fd29 	bl	800431e <uxListRemove>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d115      	bne.n	80058fe <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d6:	491f      	ldr	r1, [pc, #124]	; (8005954 <xTaskPriorityDisinherit+0x10c>)
 80058d8:	4613      	mov	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	440b      	add	r3, r1
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10a      	bne.n	80058fe <xTaskPriorityDisinherit+0xb6>
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	2201      	movs	r2, #1
 80058ee:	fa02 f303 	lsl.w	r3, r2, r3
 80058f2:	43da      	mvns	r2, r3
 80058f4:	4b18      	ldr	r3, [pc, #96]	; (8005958 <xTaskPriorityDisinherit+0x110>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4013      	ands	r3, r2
 80058fa:	4a17      	ldr	r2, [pc, #92]	; (8005958 <xTaskPriorityDisinherit+0x110>)
 80058fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590a:	f1c3 0207 	rsb	r2, r3, #7
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005916:	2201      	movs	r2, #1
 8005918:	409a      	lsls	r2, r3
 800591a:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <xTaskPriorityDisinherit+0x110>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4313      	orrs	r3, r2
 8005920:	4a0d      	ldr	r2, [pc, #52]	; (8005958 <xTaskPriorityDisinherit+0x110>)
 8005922:	6013      	str	r3, [r2, #0]
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005928:	4613      	mov	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4a08      	ldr	r2, [pc, #32]	; (8005954 <xTaskPriorityDisinherit+0x10c>)
 8005932:	441a      	add	r2, r3
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	3304      	adds	r3, #4
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f7fe fc92 	bl	8004264 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005940:	2301      	movs	r3, #1
 8005942:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005944:	697b      	ldr	r3, [r7, #20]
	}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	200002e8 	.word	0x200002e8
 8005954:	200002ec 	.word	0x200002ec
 8005958:	200003f0 	.word	0x200003f0

0800595c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005966:	4b29      	ldr	r3, [pc, #164]	; (8005a0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800596c:	4b28      	ldr	r3, [pc, #160]	; (8005a10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3304      	adds	r3, #4
 8005972:	4618      	mov	r0, r3
 8005974:	f7fe fcd3 	bl	800431e <uxListRemove>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10b      	bne.n	8005996 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800597e:	4b24      	ldr	r3, [pc, #144]	; (8005a10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	2201      	movs	r2, #1
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	43da      	mvns	r2, r3
 800598c:	4b21      	ldr	r3, [pc, #132]	; (8005a14 <prvAddCurrentTaskToDelayedList+0xb8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4013      	ands	r3, r2
 8005992:	4a20      	ldr	r2, [pc, #128]	; (8005a14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005994:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599c:	d10a      	bne.n	80059b4 <prvAddCurrentTaskToDelayedList+0x58>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d007      	beq.n	80059b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059a4:	4b1a      	ldr	r3, [pc, #104]	; (8005a10 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3304      	adds	r3, #4
 80059aa:	4619      	mov	r1, r3
 80059ac:	481a      	ldr	r0, [pc, #104]	; (8005a18 <prvAddCurrentTaskToDelayedList+0xbc>)
 80059ae:	f7fe fc59 	bl	8004264 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059b2:	e026      	b.n	8005a02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4413      	add	r3, r2
 80059ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059bc:	4b14      	ldr	r3, [pc, #80]	; (8005a10 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d209      	bcs.n	80059e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059cc:	4b13      	ldr	r3, [pc, #76]	; (8005a1c <prvAddCurrentTaskToDelayedList+0xc0>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4b0f      	ldr	r3, [pc, #60]	; (8005a10 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f7fe fc67 	bl	80042ac <vListInsert>
}
 80059de:	e010      	b.n	8005a02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059e0:	4b0f      	ldr	r3, [pc, #60]	; (8005a20 <prvAddCurrentTaskToDelayedList+0xc4>)
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3304      	adds	r3, #4
 80059ea:	4619      	mov	r1, r3
 80059ec:	4610      	mov	r0, r2
 80059ee:	f7fe fc5d 	bl	80042ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059f2:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d202      	bcs.n	8005a02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80059fc:	4a09      	ldr	r2, [pc, #36]	; (8005a24 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6013      	str	r3, [r2, #0]
}
 8005a02:	bf00      	nop
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	200003ec 	.word	0x200003ec
 8005a10:	200002e8 	.word	0x200002e8
 8005a14:	200003f0 	.word	0x200003f0
 8005a18:	200003d4 	.word	0x200003d4
 8005a1c:	200003a4 	.word	0x200003a4
 8005a20:	200003a0 	.word	0x200003a0
 8005a24:	20000408 	.word	0x20000408

08005a28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3b04      	subs	r3, #4
 8005a38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3b04      	subs	r3, #4
 8005a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f023 0201 	bic.w	r2, r3, #1
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3b04      	subs	r3, #4
 8005a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a58:	4a0c      	ldr	r2, [pc, #48]	; (8005a8c <pxPortInitialiseStack+0x64>)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3b14      	subs	r3, #20
 8005a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3b04      	subs	r3, #4
 8005a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f06f 0202 	mvn.w	r2, #2
 8005a76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3b20      	subs	r3, #32
 8005a7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	08005a91 	.word	0x08005a91

08005a90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a9a:	4b14      	ldr	r3, [pc, #80]	; (8005aec <prvTaskExitError+0x5c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa2:	d00c      	beq.n	8005abe <prvTaskExitError+0x2e>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	b672      	cpsid	i
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	b662      	cpsie	i
 8005ab8:	60fb      	str	r3, [r7, #12]
}
 8005aba:	bf00      	nop
 8005abc:	e7fe      	b.n	8005abc <prvTaskExitError+0x2c>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	b672      	cpsid	i
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	b662      	cpsie	i
 8005ad2:	60bb      	str	r3, [r7, #8]
}
 8005ad4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ad6:	bf00      	nop
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0fc      	beq.n	8005ad8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ade:	bf00      	nop
 8005ae0:	bf00      	nop
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	2000000c 	.word	0x2000000c

08005af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005af0:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <pxCurrentTCBConst2>)
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	6808      	ldr	r0, [r1, #0]
 8005af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	f380 8809 	msr	PSP, r0
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8811 	msr	BASEPRI, r0
 8005b0a:	4770      	bx	lr
 8005b0c:	f3af 8000 	nop.w

08005b10 <pxCurrentTCBConst2>:
 8005b10:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop

08005b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b18:	4808      	ldr	r0, [pc, #32]	; (8005b3c <prvPortStartFirstTask+0x24>)
 8005b1a:	6800      	ldr	r0, [r0, #0]
 8005b1c:	6800      	ldr	r0, [r0, #0]
 8005b1e:	f380 8808 	msr	MSP, r0
 8005b22:	f04f 0000 	mov.w	r0, #0
 8005b26:	f380 8814 	msr	CONTROL, r0
 8005b2a:	b662      	cpsie	i
 8005b2c:	b661      	cpsie	f
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	df00      	svc	0
 8005b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b3a:	bf00      	nop
 8005b3c:	e000ed08 	.word	0xe000ed08

08005b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b46:	4b37      	ldr	r3, [pc, #220]	; (8005c24 <xPortStartScheduler+0xe4>)
 8005b48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	22ff      	movs	r2, #255	; 0xff
 8005b56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	4b2f      	ldr	r3, [pc, #188]	; (8005c28 <xPortStartScheduler+0xe8>)
 8005b6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b6e:	4b2f      	ldr	r3, [pc, #188]	; (8005c2c <xPortStartScheduler+0xec>)
 8005b70:	2207      	movs	r2, #7
 8005b72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b74:	e009      	b.n	8005b8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005b76:	4b2d      	ldr	r3, [pc, #180]	; (8005c2c <xPortStartScheduler+0xec>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	4a2b      	ldr	r2, [pc, #172]	; (8005c2c <xPortStartScheduler+0xec>)
 8005b7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b8a:	78fb      	ldrb	r3, [r7, #3]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b92:	2b80      	cmp	r3, #128	; 0x80
 8005b94:	d0ef      	beq.n	8005b76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b96:	4b25      	ldr	r3, [pc, #148]	; (8005c2c <xPortStartScheduler+0xec>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f1c3 0307 	rsb	r3, r3, #7
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d00c      	beq.n	8005bbc <xPortStartScheduler+0x7c>
	__asm volatile
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	b672      	cpsid	i
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	b662      	cpsie	i
 8005bb6:	60bb      	str	r3, [r7, #8]
}
 8005bb8:	bf00      	nop
 8005bba:	e7fe      	b.n	8005bba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bbc:	4b1b      	ldr	r3, [pc, #108]	; (8005c2c <xPortStartScheduler+0xec>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	021b      	lsls	r3, r3, #8
 8005bc2:	4a1a      	ldr	r2, [pc, #104]	; (8005c2c <xPortStartScheduler+0xec>)
 8005bc4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005bc6:	4b19      	ldr	r3, [pc, #100]	; (8005c2c <xPortStartScheduler+0xec>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bce:	4a17      	ldr	r2, [pc, #92]	; (8005c2c <xPortStartScheduler+0xec>)
 8005bd0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005bda:	4b15      	ldr	r3, [pc, #84]	; (8005c30 <xPortStartScheduler+0xf0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a14      	ldr	r2, [pc, #80]	; (8005c30 <xPortStartScheduler+0xf0>)
 8005be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005be4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005be6:	4b12      	ldr	r3, [pc, #72]	; (8005c30 <xPortStartScheduler+0xf0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a11      	ldr	r2, [pc, #68]	; (8005c30 <xPortStartScheduler+0xf0>)
 8005bec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005bf0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005bf2:	f000 f8dd 	bl	8005db0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bf6:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <xPortStartScheduler+0xf4>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005bfc:	f000 f8fc 	bl	8005df8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c00:	4b0d      	ldr	r3, [pc, #52]	; (8005c38 <xPortStartScheduler+0xf8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a0c      	ldr	r2, [pc, #48]	; (8005c38 <xPortStartScheduler+0xf8>)
 8005c06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c0a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c0c:	f7ff ff84 	bl	8005b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c10:	f7ff fbb4 	bl	800537c <vTaskSwitchContext>
	prvTaskExitError();
 8005c14:	f7ff ff3c 	bl	8005a90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	e000e400 	.word	0xe000e400
 8005c28:	20000414 	.word	0x20000414
 8005c2c:	20000418 	.word	0x20000418
 8005c30:	e000ed20 	.word	0xe000ed20
 8005c34:	2000000c 	.word	0x2000000c
 8005c38:	e000ef34 	.word	0xe000ef34

08005c3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	b672      	cpsid	i
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	b662      	cpsie	i
 8005c56:	607b      	str	r3, [r7, #4]
}
 8005c58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c5a:	4b10      	ldr	r3, [pc, #64]	; (8005c9c <vPortEnterCritical+0x60>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	4a0e      	ldr	r2, [pc, #56]	; (8005c9c <vPortEnterCritical+0x60>)
 8005c62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c64:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <vPortEnterCritical+0x60>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d111      	bne.n	8005c90 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ca0 <vPortEnterCritical+0x64>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00c      	beq.n	8005c90 <vPortEnterCritical+0x54>
	__asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	b672      	cpsid	i
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	b662      	cpsie	i
 8005c8a:	603b      	str	r3, [r7, #0]
}
 8005c8c:	bf00      	nop
 8005c8e:	e7fe      	b.n	8005c8e <vPortEnterCritical+0x52>
	}
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	2000000c 	.word	0x2000000c
 8005ca0:	e000ed04 	.word	0xe000ed04

08005ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005caa:	4b13      	ldr	r3, [pc, #76]	; (8005cf8 <vPortExitCritical+0x54>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10c      	bne.n	8005ccc <vPortExitCritical+0x28>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	b672      	cpsid	i
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	b662      	cpsie	i
 8005cc6:	607b      	str	r3, [r7, #4]
}
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005ccc:	4b0a      	ldr	r3, [pc, #40]	; (8005cf8 <vPortExitCritical+0x54>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	4a09      	ldr	r2, [pc, #36]	; (8005cf8 <vPortExitCritical+0x54>)
 8005cd4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005cd6:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <vPortExitCritical+0x54>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d105      	bne.n	8005cea <vPortExitCritical+0x46>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	f383 8811 	msr	BASEPRI, r3
}
 8005ce8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	2000000c 	.word	0x2000000c
 8005cfc:	00000000 	.word	0x00000000

08005d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d00:	f3ef 8009 	mrs	r0, PSP
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <pxCurrentTCBConst>)
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	f01e 0f10 	tst.w	lr, #16
 8005d10:	bf08      	it	eq
 8005d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1a:	6010      	str	r0, [r2, #0]
 8005d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d24:	b672      	cpsid	i
 8005d26:	f380 8811 	msr	BASEPRI, r0
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	b662      	cpsie	i
 8005d34:	f7ff fb22 	bl	800537c <vTaskSwitchContext>
 8005d38:	f04f 0000 	mov.w	r0, #0
 8005d3c:	f380 8811 	msr	BASEPRI, r0
 8005d40:	bc09      	pop	{r0, r3}
 8005d42:	6819      	ldr	r1, [r3, #0]
 8005d44:	6808      	ldr	r0, [r1, #0]
 8005d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4a:	f01e 0f10 	tst.w	lr, #16
 8005d4e:	bf08      	it	eq
 8005d50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d54:	f380 8809 	msr	PSP, r0
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop

08005d60 <pxCurrentTCBConst>:
 8005d60:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop

08005d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	b672      	cpsid	i
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	b662      	cpsie	i
 8005d82:	607b      	str	r3, [r7, #4]
}
 8005d84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d86:	f7ff fa3f 	bl	8005208 <xTaskIncrementTick>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d90:	4b06      	ldr	r3, [pc, #24]	; (8005dac <SysTick_Handler+0x44>)
 8005d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	f383 8811 	msr	BASEPRI, r3
}
 8005da2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005da4:	bf00      	nop
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	e000ed04 	.word	0xe000ed04

08005db0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005db4:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <vPortSetupTimerInterrupt+0x34>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005dba:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <vPortSetupTimerInterrupt+0x38>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005dc0:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <vPortSetupTimerInterrupt+0x3c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a0a      	ldr	r2, [pc, #40]	; (8005df0 <vPortSetupTimerInterrupt+0x40>)
 8005dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dca:	099b      	lsrs	r3, r3, #6
 8005dcc:	4a09      	ldr	r2, [pc, #36]	; (8005df4 <vPortSetupTimerInterrupt+0x44>)
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dd2:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <vPortSetupTimerInterrupt+0x34>)
 8005dd4:	2207      	movs	r2, #7
 8005dd6:	601a      	str	r2, [r3, #0]
}
 8005dd8:	bf00      	nop
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	e000e010 	.word	0xe000e010
 8005de8:	e000e018 	.word	0xe000e018
 8005dec:	20000000 	.word	0x20000000
 8005df0:	10624dd3 	.word	0x10624dd3
 8005df4:	e000e014 	.word	0xe000e014

08005df8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005df8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e08 <vPortEnableVFP+0x10>
 8005dfc:	6801      	ldr	r1, [r0, #0]
 8005dfe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e02:	6001      	str	r1, [r0, #0]
 8005e04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e06:	bf00      	nop
 8005e08:	e000ed88 	.word	0xe000ed88

08005e0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e12:	f3ef 8305 	mrs	r3, IPSR
 8005e16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b0f      	cmp	r3, #15
 8005e1c:	d916      	bls.n	8005e4c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e1e:	4a19      	ldr	r2, [pc, #100]	; (8005e84 <vPortValidateInterruptPriority+0x78>)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e28:	4b17      	ldr	r3, [pc, #92]	; (8005e88 <vPortValidateInterruptPriority+0x7c>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	7afa      	ldrb	r2, [r7, #11]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d20c      	bcs.n	8005e4c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	b672      	cpsid	i
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	b662      	cpsie	i
 8005e46:	607b      	str	r3, [r7, #4]
}
 8005e48:	bf00      	nop
 8005e4a:	e7fe      	b.n	8005e4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e4c:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <vPortValidateInterruptPriority+0x80>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e54:	4b0e      	ldr	r3, [pc, #56]	; (8005e90 <vPortValidateInterruptPriority+0x84>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d90c      	bls.n	8005e76 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	b672      	cpsid	i
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	b662      	cpsie	i
 8005e70:	603b      	str	r3, [r7, #0]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <vPortValidateInterruptPriority+0x68>
	}
 8005e76:	bf00      	nop
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	e000e3f0 	.word	0xe000e3f0
 8005e88:	20000414 	.word	0x20000414
 8005e8c:	e000ed0c 	.word	0xe000ed0c
 8005e90:	20000418 	.word	0x20000418

08005e94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08a      	sub	sp, #40	; 0x28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ea0:	f7ff f906 	bl	80050b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ea4:	4b5b      	ldr	r3, [pc, #364]	; (8006014 <pvPortMalloc+0x180>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005eac:	f000 f91a 	bl	80060e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005eb0:	4b59      	ldr	r3, [pc, #356]	; (8006018 <pvPortMalloc+0x184>)
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f040 8092 	bne.w	8005fe2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01f      	beq.n	8005f04 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005ec4:	2208      	movs	r2, #8
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4413      	add	r3, r2
 8005eca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d016      	beq.n	8005f04 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f023 0307 	bic.w	r3, r3, #7
 8005edc:	3308      	adds	r3, #8
 8005ede:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00c      	beq.n	8005f04 <pvPortMalloc+0x70>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	b672      	cpsid	i
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	b662      	cpsie	i
 8005efe:	617b      	str	r3, [r7, #20]
}
 8005f00:	bf00      	nop
 8005f02:	e7fe      	b.n	8005f02 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d06b      	beq.n	8005fe2 <pvPortMalloc+0x14e>
 8005f0a:	4b44      	ldr	r3, [pc, #272]	; (800601c <pvPortMalloc+0x188>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d866      	bhi.n	8005fe2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f14:	4b42      	ldr	r3, [pc, #264]	; (8006020 <pvPortMalloc+0x18c>)
 8005f16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f18:	4b41      	ldr	r3, [pc, #260]	; (8006020 <pvPortMalloc+0x18c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f1e:	e004      	b.n	8005f2a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d903      	bls.n	8005f3c <pvPortMalloc+0xa8>
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1f1      	bne.n	8005f20 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f3c:	4b35      	ldr	r3, [pc, #212]	; (8006014 <pvPortMalloc+0x180>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d04d      	beq.n	8005fe2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2208      	movs	r2, #8
 8005f4c:	4413      	add	r3, r2
 8005f4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	2308      	movs	r3, #8
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d921      	bls.n	8005fac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	f003 0307 	and.w	r3, r3, #7
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00c      	beq.n	8005f94 <pvPortMalloc+0x100>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	b672      	cpsid	i
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	b662      	cpsie	i
 8005f8e:	613b      	str	r3, [r7, #16]
}
 8005f90:	bf00      	nop
 8005f92:	e7fe      	b.n	8005f92 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	1ad2      	subs	r2, r2, r3
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fa6:	69b8      	ldr	r0, [r7, #24]
 8005fa8:	f000 f8fe 	bl	80061a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fac:	4b1b      	ldr	r3, [pc, #108]	; (800601c <pvPortMalloc+0x188>)
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	4a19      	ldr	r2, [pc, #100]	; (800601c <pvPortMalloc+0x188>)
 8005fb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fba:	4b18      	ldr	r3, [pc, #96]	; (800601c <pvPortMalloc+0x188>)
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	4b19      	ldr	r3, [pc, #100]	; (8006024 <pvPortMalloc+0x190>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d203      	bcs.n	8005fce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fc6:	4b15      	ldr	r3, [pc, #84]	; (800601c <pvPortMalloc+0x188>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a16      	ldr	r2, [pc, #88]	; (8006024 <pvPortMalloc+0x190>)
 8005fcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	4b11      	ldr	r3, [pc, #68]	; (8006018 <pvPortMalloc+0x184>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fe2:	f7ff f873 	bl	80050cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00c      	beq.n	800600a <pvPortMalloc+0x176>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	b672      	cpsid	i
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	b662      	cpsie	i
 8006004:	60fb      	str	r3, [r7, #12]
}
 8006006:	bf00      	nop
 8006008:	e7fe      	b.n	8006008 <pvPortMalloc+0x174>
	return pvReturn;
 800600a:	69fb      	ldr	r3, [r7, #28]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3728      	adds	r7, #40	; 0x28
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20004024 	.word	0x20004024
 8006018:	20004030 	.word	0x20004030
 800601c:	20004028 	.word	0x20004028
 8006020:	2000401c 	.word	0x2000401c
 8006024:	2000402c 	.word	0x2000402c

08006028 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d04c      	beq.n	80060d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800603a:	2308      	movs	r3, #8
 800603c:	425b      	negs	r3, r3
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4413      	add	r3, r2
 8006042:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	4b23      	ldr	r3, [pc, #140]	; (80060dc <vPortFree+0xb4>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4013      	ands	r3, r2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10c      	bne.n	8006070 <vPortFree+0x48>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605a:	b672      	cpsid	i
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	b662      	cpsie	i
 800606a:	60fb      	str	r3, [r7, #12]
}
 800606c:	bf00      	nop
 800606e:	e7fe      	b.n	800606e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00c      	beq.n	8006092 <vPortFree+0x6a>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	b672      	cpsid	i
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	b662      	cpsie	i
 800608c:	60bb      	str	r3, [r7, #8]
}
 800608e:	bf00      	nop
 8006090:	e7fe      	b.n	8006090 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	4b11      	ldr	r3, [pc, #68]	; (80060dc <vPortFree+0xb4>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4013      	ands	r3, r2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d019      	beq.n	80060d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d115      	bne.n	80060d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <vPortFree+0xb4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	43db      	mvns	r3, r3
 80060b2:	401a      	ands	r2, r3
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060b8:	f7fe fffa 	bl	80050b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <vPortFree+0xb8>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4413      	add	r3, r2
 80060c6:	4a06      	ldr	r2, [pc, #24]	; (80060e0 <vPortFree+0xb8>)
 80060c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060ca:	6938      	ldr	r0, [r7, #16]
 80060cc:	f000 f86c 	bl	80061a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80060d0:	f7fe fffc 	bl	80050cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060d4:	bf00      	nop
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20004030 	.word	0x20004030
 80060e0:	20004028 	.word	0x20004028

080060e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060f0:	4b27      	ldr	r3, [pc, #156]	; (8006190 <prvHeapInit+0xac>)
 80060f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00c      	beq.n	8006118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3307      	adds	r3, #7
 8006102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0307 	bic.w	r3, r3, #7
 800610a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	4a1f      	ldr	r2, [pc, #124]	; (8006190 <prvHeapInit+0xac>)
 8006114:	4413      	add	r3, r2
 8006116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800611c:	4a1d      	ldr	r2, [pc, #116]	; (8006194 <prvHeapInit+0xb0>)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006122:	4b1c      	ldr	r3, [pc, #112]	; (8006194 <prvHeapInit+0xb0>)
 8006124:	2200      	movs	r2, #0
 8006126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	4413      	add	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006130:	2208      	movs	r2, #8
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	1a9b      	subs	r3, r3, r2
 8006136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0307 	bic.w	r3, r3, #7
 800613e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4a15      	ldr	r2, [pc, #84]	; (8006198 <prvHeapInit+0xb4>)
 8006144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006146:	4b14      	ldr	r3, [pc, #80]	; (8006198 <prvHeapInit+0xb4>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2200      	movs	r2, #0
 800614c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800614e:	4b12      	ldr	r3, [pc, #72]	; (8006198 <prvHeapInit+0xb4>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	1ad2      	subs	r2, r2, r3
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006164:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <prvHeapInit+0xb4>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	4a0a      	ldr	r2, [pc, #40]	; (800619c <prvHeapInit+0xb8>)
 8006172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	4a09      	ldr	r2, [pc, #36]	; (80061a0 <prvHeapInit+0xbc>)
 800617a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800617c:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <prvHeapInit+0xc0>)
 800617e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006182:	601a      	str	r2, [r3, #0]
}
 8006184:	bf00      	nop
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	2000041c 	.word	0x2000041c
 8006194:	2000401c 	.word	0x2000401c
 8006198:	20004024 	.word	0x20004024
 800619c:	2000402c 	.word	0x2000402c
 80061a0:	20004028 	.word	0x20004028
 80061a4:	20004030 	.word	0x20004030

080061a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061b0:	4b28      	ldr	r3, [pc, #160]	; (8006254 <prvInsertBlockIntoFreeList+0xac>)
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	e002      	b.n	80061bc <prvInsertBlockIntoFreeList+0x14>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d8f7      	bhi.n	80061b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	4413      	add	r3, r2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d108      	bne.n	80061ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	441a      	add	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	441a      	add	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d118      	bne.n	8006230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4b15      	ldr	r3, [pc, #84]	; (8006258 <prvInsertBlockIntoFreeList+0xb0>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	429a      	cmp	r2, r3
 8006208:	d00d      	beq.n	8006226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	441a      	add	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	e008      	b.n	8006238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006226:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <prvInsertBlockIntoFreeList+0xb0>)
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e003      	b.n	8006238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	429a      	cmp	r2, r3
 800623e:	d002      	beq.n	8006246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006246:	bf00      	nop
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	2000401c 	.word	0x2000401c
 8006258:	20004024 	.word	0x20004024

0800625c <__errno>:
 800625c:	4b01      	ldr	r3, [pc, #4]	; (8006264 <__errno+0x8>)
 800625e:	6818      	ldr	r0, [r3, #0]
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20000010 	.word	0x20000010

08006268 <__libc_init_array>:
 8006268:	b570      	push	{r4, r5, r6, lr}
 800626a:	4d0d      	ldr	r5, [pc, #52]	; (80062a0 <__libc_init_array+0x38>)
 800626c:	4c0d      	ldr	r4, [pc, #52]	; (80062a4 <__libc_init_array+0x3c>)
 800626e:	1b64      	subs	r4, r4, r5
 8006270:	10a4      	asrs	r4, r4, #2
 8006272:	2600      	movs	r6, #0
 8006274:	42a6      	cmp	r6, r4
 8006276:	d109      	bne.n	800628c <__libc_init_array+0x24>
 8006278:	4d0b      	ldr	r5, [pc, #44]	; (80062a8 <__libc_init_array+0x40>)
 800627a:	4c0c      	ldr	r4, [pc, #48]	; (80062ac <__libc_init_array+0x44>)
 800627c:	f000 fc4e 	bl	8006b1c <_init>
 8006280:	1b64      	subs	r4, r4, r5
 8006282:	10a4      	asrs	r4, r4, #2
 8006284:	2600      	movs	r6, #0
 8006286:	42a6      	cmp	r6, r4
 8006288:	d105      	bne.n	8006296 <__libc_init_array+0x2e>
 800628a:	bd70      	pop	{r4, r5, r6, pc}
 800628c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006290:	4798      	blx	r3
 8006292:	3601      	adds	r6, #1
 8006294:	e7ee      	b.n	8006274 <__libc_init_array+0xc>
 8006296:	f855 3b04 	ldr.w	r3, [r5], #4
 800629a:	4798      	blx	r3
 800629c:	3601      	adds	r6, #1
 800629e:	e7f2      	b.n	8006286 <__libc_init_array+0x1e>
 80062a0:	08006dd0 	.word	0x08006dd0
 80062a4:	08006dd0 	.word	0x08006dd0
 80062a8:	08006dd0 	.word	0x08006dd0
 80062ac:	08006dd4 	.word	0x08006dd4

080062b0 <memcpy>:
 80062b0:	440a      	add	r2, r1
 80062b2:	4291      	cmp	r1, r2
 80062b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80062b8:	d100      	bne.n	80062bc <memcpy+0xc>
 80062ba:	4770      	bx	lr
 80062bc:	b510      	push	{r4, lr}
 80062be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062c6:	4291      	cmp	r1, r2
 80062c8:	d1f9      	bne.n	80062be <memcpy+0xe>
 80062ca:	bd10      	pop	{r4, pc}

080062cc <memset>:
 80062cc:	4402      	add	r2, r0
 80062ce:	4603      	mov	r3, r0
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d100      	bne.n	80062d6 <memset+0xa>
 80062d4:	4770      	bx	lr
 80062d6:	f803 1b01 	strb.w	r1, [r3], #1
 80062da:	e7f9      	b.n	80062d0 <memset+0x4>

080062dc <siprintf>:
 80062dc:	b40e      	push	{r1, r2, r3}
 80062de:	b500      	push	{lr}
 80062e0:	b09c      	sub	sp, #112	; 0x70
 80062e2:	ab1d      	add	r3, sp, #116	; 0x74
 80062e4:	9002      	str	r0, [sp, #8]
 80062e6:	9006      	str	r0, [sp, #24]
 80062e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062ec:	4809      	ldr	r0, [pc, #36]	; (8006314 <siprintf+0x38>)
 80062ee:	9107      	str	r1, [sp, #28]
 80062f0:	9104      	str	r1, [sp, #16]
 80062f2:	4909      	ldr	r1, [pc, #36]	; (8006318 <siprintf+0x3c>)
 80062f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80062f8:	9105      	str	r1, [sp, #20]
 80062fa:	6800      	ldr	r0, [r0, #0]
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	a902      	add	r1, sp, #8
 8006300:	f000 f868 	bl	80063d4 <_svfiprintf_r>
 8006304:	9b02      	ldr	r3, [sp, #8]
 8006306:	2200      	movs	r2, #0
 8006308:	701a      	strb	r2, [r3, #0]
 800630a:	b01c      	add	sp, #112	; 0x70
 800630c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006310:	b003      	add	sp, #12
 8006312:	4770      	bx	lr
 8006314:	20000010 	.word	0x20000010
 8006318:	ffff0208 	.word	0xffff0208

0800631c <__ssputs_r>:
 800631c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006320:	688e      	ldr	r6, [r1, #8]
 8006322:	429e      	cmp	r6, r3
 8006324:	4682      	mov	sl, r0
 8006326:	460c      	mov	r4, r1
 8006328:	4690      	mov	r8, r2
 800632a:	461f      	mov	r7, r3
 800632c:	d838      	bhi.n	80063a0 <__ssputs_r+0x84>
 800632e:	898a      	ldrh	r2, [r1, #12]
 8006330:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006334:	d032      	beq.n	800639c <__ssputs_r+0x80>
 8006336:	6825      	ldr	r5, [r4, #0]
 8006338:	6909      	ldr	r1, [r1, #16]
 800633a:	eba5 0901 	sub.w	r9, r5, r1
 800633e:	6965      	ldr	r5, [r4, #20]
 8006340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006348:	3301      	adds	r3, #1
 800634a:	444b      	add	r3, r9
 800634c:	106d      	asrs	r5, r5, #1
 800634e:	429d      	cmp	r5, r3
 8006350:	bf38      	it	cc
 8006352:	461d      	movcc	r5, r3
 8006354:	0553      	lsls	r3, r2, #21
 8006356:	d531      	bpl.n	80063bc <__ssputs_r+0xa0>
 8006358:	4629      	mov	r1, r5
 800635a:	f000 fb39 	bl	80069d0 <_malloc_r>
 800635e:	4606      	mov	r6, r0
 8006360:	b950      	cbnz	r0, 8006378 <__ssputs_r+0x5c>
 8006362:	230c      	movs	r3, #12
 8006364:	f8ca 3000 	str.w	r3, [sl]
 8006368:	89a3      	ldrh	r3, [r4, #12]
 800636a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800636e:	81a3      	strh	r3, [r4, #12]
 8006370:	f04f 30ff 	mov.w	r0, #4294967295
 8006374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006378:	6921      	ldr	r1, [r4, #16]
 800637a:	464a      	mov	r2, r9
 800637c:	f7ff ff98 	bl	80062b0 <memcpy>
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800638a:	81a3      	strh	r3, [r4, #12]
 800638c:	6126      	str	r6, [r4, #16]
 800638e:	6165      	str	r5, [r4, #20]
 8006390:	444e      	add	r6, r9
 8006392:	eba5 0509 	sub.w	r5, r5, r9
 8006396:	6026      	str	r6, [r4, #0]
 8006398:	60a5      	str	r5, [r4, #8]
 800639a:	463e      	mov	r6, r7
 800639c:	42be      	cmp	r6, r7
 800639e:	d900      	bls.n	80063a2 <__ssputs_r+0x86>
 80063a0:	463e      	mov	r6, r7
 80063a2:	4632      	mov	r2, r6
 80063a4:	6820      	ldr	r0, [r4, #0]
 80063a6:	4641      	mov	r1, r8
 80063a8:	f000 faa8 	bl	80068fc <memmove>
 80063ac:	68a3      	ldr	r3, [r4, #8]
 80063ae:	6822      	ldr	r2, [r4, #0]
 80063b0:	1b9b      	subs	r3, r3, r6
 80063b2:	4432      	add	r2, r6
 80063b4:	60a3      	str	r3, [r4, #8]
 80063b6:	6022      	str	r2, [r4, #0]
 80063b8:	2000      	movs	r0, #0
 80063ba:	e7db      	b.n	8006374 <__ssputs_r+0x58>
 80063bc:	462a      	mov	r2, r5
 80063be:	f000 fb61 	bl	8006a84 <_realloc_r>
 80063c2:	4606      	mov	r6, r0
 80063c4:	2800      	cmp	r0, #0
 80063c6:	d1e1      	bne.n	800638c <__ssputs_r+0x70>
 80063c8:	6921      	ldr	r1, [r4, #16]
 80063ca:	4650      	mov	r0, sl
 80063cc:	f000 fab0 	bl	8006930 <_free_r>
 80063d0:	e7c7      	b.n	8006362 <__ssputs_r+0x46>
	...

080063d4 <_svfiprintf_r>:
 80063d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d8:	4698      	mov	r8, r3
 80063da:	898b      	ldrh	r3, [r1, #12]
 80063dc:	061b      	lsls	r3, r3, #24
 80063de:	b09d      	sub	sp, #116	; 0x74
 80063e0:	4607      	mov	r7, r0
 80063e2:	460d      	mov	r5, r1
 80063e4:	4614      	mov	r4, r2
 80063e6:	d50e      	bpl.n	8006406 <_svfiprintf_r+0x32>
 80063e8:	690b      	ldr	r3, [r1, #16]
 80063ea:	b963      	cbnz	r3, 8006406 <_svfiprintf_r+0x32>
 80063ec:	2140      	movs	r1, #64	; 0x40
 80063ee:	f000 faef 	bl	80069d0 <_malloc_r>
 80063f2:	6028      	str	r0, [r5, #0]
 80063f4:	6128      	str	r0, [r5, #16]
 80063f6:	b920      	cbnz	r0, 8006402 <_svfiprintf_r+0x2e>
 80063f8:	230c      	movs	r3, #12
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006400:	e0d1      	b.n	80065a6 <_svfiprintf_r+0x1d2>
 8006402:	2340      	movs	r3, #64	; 0x40
 8006404:	616b      	str	r3, [r5, #20]
 8006406:	2300      	movs	r3, #0
 8006408:	9309      	str	r3, [sp, #36]	; 0x24
 800640a:	2320      	movs	r3, #32
 800640c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006410:	f8cd 800c 	str.w	r8, [sp, #12]
 8006414:	2330      	movs	r3, #48	; 0x30
 8006416:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80065c0 <_svfiprintf_r+0x1ec>
 800641a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800641e:	f04f 0901 	mov.w	r9, #1
 8006422:	4623      	mov	r3, r4
 8006424:	469a      	mov	sl, r3
 8006426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800642a:	b10a      	cbz	r2, 8006430 <_svfiprintf_r+0x5c>
 800642c:	2a25      	cmp	r2, #37	; 0x25
 800642e:	d1f9      	bne.n	8006424 <_svfiprintf_r+0x50>
 8006430:	ebba 0b04 	subs.w	fp, sl, r4
 8006434:	d00b      	beq.n	800644e <_svfiprintf_r+0x7a>
 8006436:	465b      	mov	r3, fp
 8006438:	4622      	mov	r2, r4
 800643a:	4629      	mov	r1, r5
 800643c:	4638      	mov	r0, r7
 800643e:	f7ff ff6d 	bl	800631c <__ssputs_r>
 8006442:	3001      	adds	r0, #1
 8006444:	f000 80aa 	beq.w	800659c <_svfiprintf_r+0x1c8>
 8006448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800644a:	445a      	add	r2, fp
 800644c:	9209      	str	r2, [sp, #36]	; 0x24
 800644e:	f89a 3000 	ldrb.w	r3, [sl]
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80a2 	beq.w	800659c <_svfiprintf_r+0x1c8>
 8006458:	2300      	movs	r3, #0
 800645a:	f04f 32ff 	mov.w	r2, #4294967295
 800645e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006462:	f10a 0a01 	add.w	sl, sl, #1
 8006466:	9304      	str	r3, [sp, #16]
 8006468:	9307      	str	r3, [sp, #28]
 800646a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800646e:	931a      	str	r3, [sp, #104]	; 0x68
 8006470:	4654      	mov	r4, sl
 8006472:	2205      	movs	r2, #5
 8006474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006478:	4851      	ldr	r0, [pc, #324]	; (80065c0 <_svfiprintf_r+0x1ec>)
 800647a:	f7f9 fed1 	bl	8000220 <memchr>
 800647e:	9a04      	ldr	r2, [sp, #16]
 8006480:	b9d8      	cbnz	r0, 80064ba <_svfiprintf_r+0xe6>
 8006482:	06d0      	lsls	r0, r2, #27
 8006484:	bf44      	itt	mi
 8006486:	2320      	movmi	r3, #32
 8006488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800648c:	0711      	lsls	r1, r2, #28
 800648e:	bf44      	itt	mi
 8006490:	232b      	movmi	r3, #43	; 0x2b
 8006492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006496:	f89a 3000 	ldrb.w	r3, [sl]
 800649a:	2b2a      	cmp	r3, #42	; 0x2a
 800649c:	d015      	beq.n	80064ca <_svfiprintf_r+0xf6>
 800649e:	9a07      	ldr	r2, [sp, #28]
 80064a0:	4654      	mov	r4, sl
 80064a2:	2000      	movs	r0, #0
 80064a4:	f04f 0c0a 	mov.w	ip, #10
 80064a8:	4621      	mov	r1, r4
 80064aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064ae:	3b30      	subs	r3, #48	; 0x30
 80064b0:	2b09      	cmp	r3, #9
 80064b2:	d94e      	bls.n	8006552 <_svfiprintf_r+0x17e>
 80064b4:	b1b0      	cbz	r0, 80064e4 <_svfiprintf_r+0x110>
 80064b6:	9207      	str	r2, [sp, #28]
 80064b8:	e014      	b.n	80064e4 <_svfiprintf_r+0x110>
 80064ba:	eba0 0308 	sub.w	r3, r0, r8
 80064be:	fa09 f303 	lsl.w	r3, r9, r3
 80064c2:	4313      	orrs	r3, r2
 80064c4:	9304      	str	r3, [sp, #16]
 80064c6:	46a2      	mov	sl, r4
 80064c8:	e7d2      	b.n	8006470 <_svfiprintf_r+0x9c>
 80064ca:	9b03      	ldr	r3, [sp, #12]
 80064cc:	1d19      	adds	r1, r3, #4
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	9103      	str	r1, [sp, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	bfbb      	ittet	lt
 80064d6:	425b      	neglt	r3, r3
 80064d8:	f042 0202 	orrlt.w	r2, r2, #2
 80064dc:	9307      	strge	r3, [sp, #28]
 80064de:	9307      	strlt	r3, [sp, #28]
 80064e0:	bfb8      	it	lt
 80064e2:	9204      	strlt	r2, [sp, #16]
 80064e4:	7823      	ldrb	r3, [r4, #0]
 80064e6:	2b2e      	cmp	r3, #46	; 0x2e
 80064e8:	d10c      	bne.n	8006504 <_svfiprintf_r+0x130>
 80064ea:	7863      	ldrb	r3, [r4, #1]
 80064ec:	2b2a      	cmp	r3, #42	; 0x2a
 80064ee:	d135      	bne.n	800655c <_svfiprintf_r+0x188>
 80064f0:	9b03      	ldr	r3, [sp, #12]
 80064f2:	1d1a      	adds	r2, r3, #4
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	9203      	str	r2, [sp, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	bfb8      	it	lt
 80064fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006500:	3402      	adds	r4, #2
 8006502:	9305      	str	r3, [sp, #20]
 8006504:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80065d0 <_svfiprintf_r+0x1fc>
 8006508:	7821      	ldrb	r1, [r4, #0]
 800650a:	2203      	movs	r2, #3
 800650c:	4650      	mov	r0, sl
 800650e:	f7f9 fe87 	bl	8000220 <memchr>
 8006512:	b140      	cbz	r0, 8006526 <_svfiprintf_r+0x152>
 8006514:	2340      	movs	r3, #64	; 0x40
 8006516:	eba0 000a 	sub.w	r0, r0, sl
 800651a:	fa03 f000 	lsl.w	r0, r3, r0
 800651e:	9b04      	ldr	r3, [sp, #16]
 8006520:	4303      	orrs	r3, r0
 8006522:	3401      	adds	r4, #1
 8006524:	9304      	str	r3, [sp, #16]
 8006526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800652a:	4826      	ldr	r0, [pc, #152]	; (80065c4 <_svfiprintf_r+0x1f0>)
 800652c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006530:	2206      	movs	r2, #6
 8006532:	f7f9 fe75 	bl	8000220 <memchr>
 8006536:	2800      	cmp	r0, #0
 8006538:	d038      	beq.n	80065ac <_svfiprintf_r+0x1d8>
 800653a:	4b23      	ldr	r3, [pc, #140]	; (80065c8 <_svfiprintf_r+0x1f4>)
 800653c:	bb1b      	cbnz	r3, 8006586 <_svfiprintf_r+0x1b2>
 800653e:	9b03      	ldr	r3, [sp, #12]
 8006540:	3307      	adds	r3, #7
 8006542:	f023 0307 	bic.w	r3, r3, #7
 8006546:	3308      	adds	r3, #8
 8006548:	9303      	str	r3, [sp, #12]
 800654a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654c:	4433      	add	r3, r6
 800654e:	9309      	str	r3, [sp, #36]	; 0x24
 8006550:	e767      	b.n	8006422 <_svfiprintf_r+0x4e>
 8006552:	fb0c 3202 	mla	r2, ip, r2, r3
 8006556:	460c      	mov	r4, r1
 8006558:	2001      	movs	r0, #1
 800655a:	e7a5      	b.n	80064a8 <_svfiprintf_r+0xd4>
 800655c:	2300      	movs	r3, #0
 800655e:	3401      	adds	r4, #1
 8006560:	9305      	str	r3, [sp, #20]
 8006562:	4619      	mov	r1, r3
 8006564:	f04f 0c0a 	mov.w	ip, #10
 8006568:	4620      	mov	r0, r4
 800656a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800656e:	3a30      	subs	r2, #48	; 0x30
 8006570:	2a09      	cmp	r2, #9
 8006572:	d903      	bls.n	800657c <_svfiprintf_r+0x1a8>
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0c5      	beq.n	8006504 <_svfiprintf_r+0x130>
 8006578:	9105      	str	r1, [sp, #20]
 800657a:	e7c3      	b.n	8006504 <_svfiprintf_r+0x130>
 800657c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006580:	4604      	mov	r4, r0
 8006582:	2301      	movs	r3, #1
 8006584:	e7f0      	b.n	8006568 <_svfiprintf_r+0x194>
 8006586:	ab03      	add	r3, sp, #12
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	462a      	mov	r2, r5
 800658c:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <_svfiprintf_r+0x1f8>)
 800658e:	a904      	add	r1, sp, #16
 8006590:	4638      	mov	r0, r7
 8006592:	f3af 8000 	nop.w
 8006596:	1c42      	adds	r2, r0, #1
 8006598:	4606      	mov	r6, r0
 800659a:	d1d6      	bne.n	800654a <_svfiprintf_r+0x176>
 800659c:	89ab      	ldrh	r3, [r5, #12]
 800659e:	065b      	lsls	r3, r3, #25
 80065a0:	f53f af2c 	bmi.w	80063fc <_svfiprintf_r+0x28>
 80065a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065a6:	b01d      	add	sp, #116	; 0x74
 80065a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ac:	ab03      	add	r3, sp, #12
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	462a      	mov	r2, r5
 80065b2:	4b06      	ldr	r3, [pc, #24]	; (80065cc <_svfiprintf_r+0x1f8>)
 80065b4:	a904      	add	r1, sp, #16
 80065b6:	4638      	mov	r0, r7
 80065b8:	f000 f87a 	bl	80066b0 <_printf_i>
 80065bc:	e7eb      	b.n	8006596 <_svfiprintf_r+0x1c2>
 80065be:	bf00      	nop
 80065c0:	08006d94 	.word	0x08006d94
 80065c4:	08006d9e 	.word	0x08006d9e
 80065c8:	00000000 	.word	0x00000000
 80065cc:	0800631d 	.word	0x0800631d
 80065d0:	08006d9a 	.word	0x08006d9a

080065d4 <_printf_common>:
 80065d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d8:	4616      	mov	r6, r2
 80065da:	4699      	mov	r9, r3
 80065dc:	688a      	ldr	r2, [r1, #8]
 80065de:	690b      	ldr	r3, [r1, #16]
 80065e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065e4:	4293      	cmp	r3, r2
 80065e6:	bfb8      	it	lt
 80065e8:	4613      	movlt	r3, r2
 80065ea:	6033      	str	r3, [r6, #0]
 80065ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065f0:	4607      	mov	r7, r0
 80065f2:	460c      	mov	r4, r1
 80065f4:	b10a      	cbz	r2, 80065fa <_printf_common+0x26>
 80065f6:	3301      	adds	r3, #1
 80065f8:	6033      	str	r3, [r6, #0]
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	0699      	lsls	r1, r3, #26
 80065fe:	bf42      	ittt	mi
 8006600:	6833      	ldrmi	r3, [r6, #0]
 8006602:	3302      	addmi	r3, #2
 8006604:	6033      	strmi	r3, [r6, #0]
 8006606:	6825      	ldr	r5, [r4, #0]
 8006608:	f015 0506 	ands.w	r5, r5, #6
 800660c:	d106      	bne.n	800661c <_printf_common+0x48>
 800660e:	f104 0a19 	add.w	sl, r4, #25
 8006612:	68e3      	ldr	r3, [r4, #12]
 8006614:	6832      	ldr	r2, [r6, #0]
 8006616:	1a9b      	subs	r3, r3, r2
 8006618:	42ab      	cmp	r3, r5
 800661a:	dc26      	bgt.n	800666a <_printf_common+0x96>
 800661c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006620:	1e13      	subs	r3, r2, #0
 8006622:	6822      	ldr	r2, [r4, #0]
 8006624:	bf18      	it	ne
 8006626:	2301      	movne	r3, #1
 8006628:	0692      	lsls	r2, r2, #26
 800662a:	d42b      	bmi.n	8006684 <_printf_common+0xb0>
 800662c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006630:	4649      	mov	r1, r9
 8006632:	4638      	mov	r0, r7
 8006634:	47c0      	blx	r8
 8006636:	3001      	adds	r0, #1
 8006638:	d01e      	beq.n	8006678 <_printf_common+0xa4>
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	68e5      	ldr	r5, [r4, #12]
 800663e:	6832      	ldr	r2, [r6, #0]
 8006640:	f003 0306 	and.w	r3, r3, #6
 8006644:	2b04      	cmp	r3, #4
 8006646:	bf08      	it	eq
 8006648:	1aad      	subeq	r5, r5, r2
 800664a:	68a3      	ldr	r3, [r4, #8]
 800664c:	6922      	ldr	r2, [r4, #16]
 800664e:	bf0c      	ite	eq
 8006650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006654:	2500      	movne	r5, #0
 8006656:	4293      	cmp	r3, r2
 8006658:	bfc4      	itt	gt
 800665a:	1a9b      	subgt	r3, r3, r2
 800665c:	18ed      	addgt	r5, r5, r3
 800665e:	2600      	movs	r6, #0
 8006660:	341a      	adds	r4, #26
 8006662:	42b5      	cmp	r5, r6
 8006664:	d11a      	bne.n	800669c <_printf_common+0xc8>
 8006666:	2000      	movs	r0, #0
 8006668:	e008      	b.n	800667c <_printf_common+0xa8>
 800666a:	2301      	movs	r3, #1
 800666c:	4652      	mov	r2, sl
 800666e:	4649      	mov	r1, r9
 8006670:	4638      	mov	r0, r7
 8006672:	47c0      	blx	r8
 8006674:	3001      	adds	r0, #1
 8006676:	d103      	bne.n	8006680 <_printf_common+0xac>
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006680:	3501      	adds	r5, #1
 8006682:	e7c6      	b.n	8006612 <_printf_common+0x3e>
 8006684:	18e1      	adds	r1, r4, r3
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	2030      	movs	r0, #48	; 0x30
 800668a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800668e:	4422      	add	r2, r4
 8006690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006698:	3302      	adds	r3, #2
 800669a:	e7c7      	b.n	800662c <_printf_common+0x58>
 800669c:	2301      	movs	r3, #1
 800669e:	4622      	mov	r2, r4
 80066a0:	4649      	mov	r1, r9
 80066a2:	4638      	mov	r0, r7
 80066a4:	47c0      	blx	r8
 80066a6:	3001      	adds	r0, #1
 80066a8:	d0e6      	beq.n	8006678 <_printf_common+0xa4>
 80066aa:	3601      	adds	r6, #1
 80066ac:	e7d9      	b.n	8006662 <_printf_common+0x8e>
	...

080066b0 <_printf_i>:
 80066b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066b4:	460c      	mov	r4, r1
 80066b6:	4691      	mov	r9, r2
 80066b8:	7e27      	ldrb	r7, [r4, #24]
 80066ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80066bc:	2f78      	cmp	r7, #120	; 0x78
 80066be:	4680      	mov	r8, r0
 80066c0:	469a      	mov	sl, r3
 80066c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066c6:	d807      	bhi.n	80066d8 <_printf_i+0x28>
 80066c8:	2f62      	cmp	r7, #98	; 0x62
 80066ca:	d80a      	bhi.n	80066e2 <_printf_i+0x32>
 80066cc:	2f00      	cmp	r7, #0
 80066ce:	f000 80d8 	beq.w	8006882 <_printf_i+0x1d2>
 80066d2:	2f58      	cmp	r7, #88	; 0x58
 80066d4:	f000 80a3 	beq.w	800681e <_printf_i+0x16e>
 80066d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80066dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066e0:	e03a      	b.n	8006758 <_printf_i+0xa8>
 80066e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066e6:	2b15      	cmp	r3, #21
 80066e8:	d8f6      	bhi.n	80066d8 <_printf_i+0x28>
 80066ea:	a001      	add	r0, pc, #4	; (adr r0, 80066f0 <_printf_i+0x40>)
 80066ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80066f0:	08006749 	.word	0x08006749
 80066f4:	0800675d 	.word	0x0800675d
 80066f8:	080066d9 	.word	0x080066d9
 80066fc:	080066d9 	.word	0x080066d9
 8006700:	080066d9 	.word	0x080066d9
 8006704:	080066d9 	.word	0x080066d9
 8006708:	0800675d 	.word	0x0800675d
 800670c:	080066d9 	.word	0x080066d9
 8006710:	080066d9 	.word	0x080066d9
 8006714:	080066d9 	.word	0x080066d9
 8006718:	080066d9 	.word	0x080066d9
 800671c:	08006869 	.word	0x08006869
 8006720:	0800678d 	.word	0x0800678d
 8006724:	0800684b 	.word	0x0800684b
 8006728:	080066d9 	.word	0x080066d9
 800672c:	080066d9 	.word	0x080066d9
 8006730:	0800688b 	.word	0x0800688b
 8006734:	080066d9 	.word	0x080066d9
 8006738:	0800678d 	.word	0x0800678d
 800673c:	080066d9 	.word	0x080066d9
 8006740:	080066d9 	.word	0x080066d9
 8006744:	08006853 	.word	0x08006853
 8006748:	680b      	ldr	r3, [r1, #0]
 800674a:	1d1a      	adds	r2, r3, #4
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	600a      	str	r2, [r1, #0]
 8006750:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006758:	2301      	movs	r3, #1
 800675a:	e0a3      	b.n	80068a4 <_printf_i+0x1f4>
 800675c:	6825      	ldr	r5, [r4, #0]
 800675e:	6808      	ldr	r0, [r1, #0]
 8006760:	062e      	lsls	r6, r5, #24
 8006762:	f100 0304 	add.w	r3, r0, #4
 8006766:	d50a      	bpl.n	800677e <_printf_i+0xce>
 8006768:	6805      	ldr	r5, [r0, #0]
 800676a:	600b      	str	r3, [r1, #0]
 800676c:	2d00      	cmp	r5, #0
 800676e:	da03      	bge.n	8006778 <_printf_i+0xc8>
 8006770:	232d      	movs	r3, #45	; 0x2d
 8006772:	426d      	negs	r5, r5
 8006774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006778:	485e      	ldr	r0, [pc, #376]	; (80068f4 <_printf_i+0x244>)
 800677a:	230a      	movs	r3, #10
 800677c:	e019      	b.n	80067b2 <_printf_i+0x102>
 800677e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006782:	6805      	ldr	r5, [r0, #0]
 8006784:	600b      	str	r3, [r1, #0]
 8006786:	bf18      	it	ne
 8006788:	b22d      	sxthne	r5, r5
 800678a:	e7ef      	b.n	800676c <_printf_i+0xbc>
 800678c:	680b      	ldr	r3, [r1, #0]
 800678e:	6825      	ldr	r5, [r4, #0]
 8006790:	1d18      	adds	r0, r3, #4
 8006792:	6008      	str	r0, [r1, #0]
 8006794:	0628      	lsls	r0, r5, #24
 8006796:	d501      	bpl.n	800679c <_printf_i+0xec>
 8006798:	681d      	ldr	r5, [r3, #0]
 800679a:	e002      	b.n	80067a2 <_printf_i+0xf2>
 800679c:	0669      	lsls	r1, r5, #25
 800679e:	d5fb      	bpl.n	8006798 <_printf_i+0xe8>
 80067a0:	881d      	ldrh	r5, [r3, #0]
 80067a2:	4854      	ldr	r0, [pc, #336]	; (80068f4 <_printf_i+0x244>)
 80067a4:	2f6f      	cmp	r7, #111	; 0x6f
 80067a6:	bf0c      	ite	eq
 80067a8:	2308      	moveq	r3, #8
 80067aa:	230a      	movne	r3, #10
 80067ac:	2100      	movs	r1, #0
 80067ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067b2:	6866      	ldr	r6, [r4, #4]
 80067b4:	60a6      	str	r6, [r4, #8]
 80067b6:	2e00      	cmp	r6, #0
 80067b8:	bfa2      	ittt	ge
 80067ba:	6821      	ldrge	r1, [r4, #0]
 80067bc:	f021 0104 	bicge.w	r1, r1, #4
 80067c0:	6021      	strge	r1, [r4, #0]
 80067c2:	b90d      	cbnz	r5, 80067c8 <_printf_i+0x118>
 80067c4:	2e00      	cmp	r6, #0
 80067c6:	d04d      	beq.n	8006864 <_printf_i+0x1b4>
 80067c8:	4616      	mov	r6, r2
 80067ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80067ce:	fb03 5711 	mls	r7, r3, r1, r5
 80067d2:	5dc7      	ldrb	r7, [r0, r7]
 80067d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067d8:	462f      	mov	r7, r5
 80067da:	42bb      	cmp	r3, r7
 80067dc:	460d      	mov	r5, r1
 80067de:	d9f4      	bls.n	80067ca <_printf_i+0x11a>
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d10b      	bne.n	80067fc <_printf_i+0x14c>
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	07df      	lsls	r7, r3, #31
 80067e8:	d508      	bpl.n	80067fc <_printf_i+0x14c>
 80067ea:	6923      	ldr	r3, [r4, #16]
 80067ec:	6861      	ldr	r1, [r4, #4]
 80067ee:	4299      	cmp	r1, r3
 80067f0:	bfde      	ittt	le
 80067f2:	2330      	movle	r3, #48	; 0x30
 80067f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067fc:	1b92      	subs	r2, r2, r6
 80067fe:	6122      	str	r2, [r4, #16]
 8006800:	f8cd a000 	str.w	sl, [sp]
 8006804:	464b      	mov	r3, r9
 8006806:	aa03      	add	r2, sp, #12
 8006808:	4621      	mov	r1, r4
 800680a:	4640      	mov	r0, r8
 800680c:	f7ff fee2 	bl	80065d4 <_printf_common>
 8006810:	3001      	adds	r0, #1
 8006812:	d14c      	bne.n	80068ae <_printf_i+0x1fe>
 8006814:	f04f 30ff 	mov.w	r0, #4294967295
 8006818:	b004      	add	sp, #16
 800681a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800681e:	4835      	ldr	r0, [pc, #212]	; (80068f4 <_printf_i+0x244>)
 8006820:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	680e      	ldr	r6, [r1, #0]
 8006828:	061f      	lsls	r7, r3, #24
 800682a:	f856 5b04 	ldr.w	r5, [r6], #4
 800682e:	600e      	str	r6, [r1, #0]
 8006830:	d514      	bpl.n	800685c <_printf_i+0x1ac>
 8006832:	07d9      	lsls	r1, r3, #31
 8006834:	bf44      	itt	mi
 8006836:	f043 0320 	orrmi.w	r3, r3, #32
 800683a:	6023      	strmi	r3, [r4, #0]
 800683c:	b91d      	cbnz	r5, 8006846 <_printf_i+0x196>
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	f023 0320 	bic.w	r3, r3, #32
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	2310      	movs	r3, #16
 8006848:	e7b0      	b.n	80067ac <_printf_i+0xfc>
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	f043 0320 	orr.w	r3, r3, #32
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	2378      	movs	r3, #120	; 0x78
 8006854:	4828      	ldr	r0, [pc, #160]	; (80068f8 <_printf_i+0x248>)
 8006856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800685a:	e7e3      	b.n	8006824 <_printf_i+0x174>
 800685c:	065e      	lsls	r6, r3, #25
 800685e:	bf48      	it	mi
 8006860:	b2ad      	uxthmi	r5, r5
 8006862:	e7e6      	b.n	8006832 <_printf_i+0x182>
 8006864:	4616      	mov	r6, r2
 8006866:	e7bb      	b.n	80067e0 <_printf_i+0x130>
 8006868:	680b      	ldr	r3, [r1, #0]
 800686a:	6826      	ldr	r6, [r4, #0]
 800686c:	6960      	ldr	r0, [r4, #20]
 800686e:	1d1d      	adds	r5, r3, #4
 8006870:	600d      	str	r5, [r1, #0]
 8006872:	0635      	lsls	r5, r6, #24
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	d501      	bpl.n	800687c <_printf_i+0x1cc>
 8006878:	6018      	str	r0, [r3, #0]
 800687a:	e002      	b.n	8006882 <_printf_i+0x1d2>
 800687c:	0671      	lsls	r1, r6, #25
 800687e:	d5fb      	bpl.n	8006878 <_printf_i+0x1c8>
 8006880:	8018      	strh	r0, [r3, #0]
 8006882:	2300      	movs	r3, #0
 8006884:	6123      	str	r3, [r4, #16]
 8006886:	4616      	mov	r6, r2
 8006888:	e7ba      	b.n	8006800 <_printf_i+0x150>
 800688a:	680b      	ldr	r3, [r1, #0]
 800688c:	1d1a      	adds	r2, r3, #4
 800688e:	600a      	str	r2, [r1, #0]
 8006890:	681e      	ldr	r6, [r3, #0]
 8006892:	6862      	ldr	r2, [r4, #4]
 8006894:	2100      	movs	r1, #0
 8006896:	4630      	mov	r0, r6
 8006898:	f7f9 fcc2 	bl	8000220 <memchr>
 800689c:	b108      	cbz	r0, 80068a2 <_printf_i+0x1f2>
 800689e:	1b80      	subs	r0, r0, r6
 80068a0:	6060      	str	r0, [r4, #4]
 80068a2:	6863      	ldr	r3, [r4, #4]
 80068a4:	6123      	str	r3, [r4, #16]
 80068a6:	2300      	movs	r3, #0
 80068a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068ac:	e7a8      	b.n	8006800 <_printf_i+0x150>
 80068ae:	6923      	ldr	r3, [r4, #16]
 80068b0:	4632      	mov	r2, r6
 80068b2:	4649      	mov	r1, r9
 80068b4:	4640      	mov	r0, r8
 80068b6:	47d0      	blx	sl
 80068b8:	3001      	adds	r0, #1
 80068ba:	d0ab      	beq.n	8006814 <_printf_i+0x164>
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	079b      	lsls	r3, r3, #30
 80068c0:	d413      	bmi.n	80068ea <_printf_i+0x23a>
 80068c2:	68e0      	ldr	r0, [r4, #12]
 80068c4:	9b03      	ldr	r3, [sp, #12]
 80068c6:	4298      	cmp	r0, r3
 80068c8:	bfb8      	it	lt
 80068ca:	4618      	movlt	r0, r3
 80068cc:	e7a4      	b.n	8006818 <_printf_i+0x168>
 80068ce:	2301      	movs	r3, #1
 80068d0:	4632      	mov	r2, r6
 80068d2:	4649      	mov	r1, r9
 80068d4:	4640      	mov	r0, r8
 80068d6:	47d0      	blx	sl
 80068d8:	3001      	adds	r0, #1
 80068da:	d09b      	beq.n	8006814 <_printf_i+0x164>
 80068dc:	3501      	adds	r5, #1
 80068de:	68e3      	ldr	r3, [r4, #12]
 80068e0:	9903      	ldr	r1, [sp, #12]
 80068e2:	1a5b      	subs	r3, r3, r1
 80068e4:	42ab      	cmp	r3, r5
 80068e6:	dcf2      	bgt.n	80068ce <_printf_i+0x21e>
 80068e8:	e7eb      	b.n	80068c2 <_printf_i+0x212>
 80068ea:	2500      	movs	r5, #0
 80068ec:	f104 0619 	add.w	r6, r4, #25
 80068f0:	e7f5      	b.n	80068de <_printf_i+0x22e>
 80068f2:	bf00      	nop
 80068f4:	08006da5 	.word	0x08006da5
 80068f8:	08006db6 	.word	0x08006db6

080068fc <memmove>:
 80068fc:	4288      	cmp	r0, r1
 80068fe:	b510      	push	{r4, lr}
 8006900:	eb01 0402 	add.w	r4, r1, r2
 8006904:	d902      	bls.n	800690c <memmove+0x10>
 8006906:	4284      	cmp	r4, r0
 8006908:	4623      	mov	r3, r4
 800690a:	d807      	bhi.n	800691c <memmove+0x20>
 800690c:	1e43      	subs	r3, r0, #1
 800690e:	42a1      	cmp	r1, r4
 8006910:	d008      	beq.n	8006924 <memmove+0x28>
 8006912:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006916:	f803 2f01 	strb.w	r2, [r3, #1]!
 800691a:	e7f8      	b.n	800690e <memmove+0x12>
 800691c:	4402      	add	r2, r0
 800691e:	4601      	mov	r1, r0
 8006920:	428a      	cmp	r2, r1
 8006922:	d100      	bne.n	8006926 <memmove+0x2a>
 8006924:	bd10      	pop	{r4, pc}
 8006926:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800692a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800692e:	e7f7      	b.n	8006920 <memmove+0x24>

08006930 <_free_r>:
 8006930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006932:	2900      	cmp	r1, #0
 8006934:	d048      	beq.n	80069c8 <_free_r+0x98>
 8006936:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800693a:	9001      	str	r0, [sp, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f1a1 0404 	sub.w	r4, r1, #4
 8006942:	bfb8      	it	lt
 8006944:	18e4      	addlt	r4, r4, r3
 8006946:	f000 f8d3 	bl	8006af0 <__malloc_lock>
 800694a:	4a20      	ldr	r2, [pc, #128]	; (80069cc <_free_r+0x9c>)
 800694c:	9801      	ldr	r0, [sp, #4]
 800694e:	6813      	ldr	r3, [r2, #0]
 8006950:	4615      	mov	r5, r2
 8006952:	b933      	cbnz	r3, 8006962 <_free_r+0x32>
 8006954:	6063      	str	r3, [r4, #4]
 8006956:	6014      	str	r4, [r2, #0]
 8006958:	b003      	add	sp, #12
 800695a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800695e:	f000 b8cd 	b.w	8006afc <__malloc_unlock>
 8006962:	42a3      	cmp	r3, r4
 8006964:	d90b      	bls.n	800697e <_free_r+0x4e>
 8006966:	6821      	ldr	r1, [r4, #0]
 8006968:	1862      	adds	r2, r4, r1
 800696a:	4293      	cmp	r3, r2
 800696c:	bf04      	itt	eq
 800696e:	681a      	ldreq	r2, [r3, #0]
 8006970:	685b      	ldreq	r3, [r3, #4]
 8006972:	6063      	str	r3, [r4, #4]
 8006974:	bf04      	itt	eq
 8006976:	1852      	addeq	r2, r2, r1
 8006978:	6022      	streq	r2, [r4, #0]
 800697a:	602c      	str	r4, [r5, #0]
 800697c:	e7ec      	b.n	8006958 <_free_r+0x28>
 800697e:	461a      	mov	r2, r3
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	b10b      	cbz	r3, 8006988 <_free_r+0x58>
 8006984:	42a3      	cmp	r3, r4
 8006986:	d9fa      	bls.n	800697e <_free_r+0x4e>
 8006988:	6811      	ldr	r1, [r2, #0]
 800698a:	1855      	adds	r5, r2, r1
 800698c:	42a5      	cmp	r5, r4
 800698e:	d10b      	bne.n	80069a8 <_free_r+0x78>
 8006990:	6824      	ldr	r4, [r4, #0]
 8006992:	4421      	add	r1, r4
 8006994:	1854      	adds	r4, r2, r1
 8006996:	42a3      	cmp	r3, r4
 8006998:	6011      	str	r1, [r2, #0]
 800699a:	d1dd      	bne.n	8006958 <_free_r+0x28>
 800699c:	681c      	ldr	r4, [r3, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	6053      	str	r3, [r2, #4]
 80069a2:	4421      	add	r1, r4
 80069a4:	6011      	str	r1, [r2, #0]
 80069a6:	e7d7      	b.n	8006958 <_free_r+0x28>
 80069a8:	d902      	bls.n	80069b0 <_free_r+0x80>
 80069aa:	230c      	movs	r3, #12
 80069ac:	6003      	str	r3, [r0, #0]
 80069ae:	e7d3      	b.n	8006958 <_free_r+0x28>
 80069b0:	6825      	ldr	r5, [r4, #0]
 80069b2:	1961      	adds	r1, r4, r5
 80069b4:	428b      	cmp	r3, r1
 80069b6:	bf04      	itt	eq
 80069b8:	6819      	ldreq	r1, [r3, #0]
 80069ba:	685b      	ldreq	r3, [r3, #4]
 80069bc:	6063      	str	r3, [r4, #4]
 80069be:	bf04      	itt	eq
 80069c0:	1949      	addeq	r1, r1, r5
 80069c2:	6021      	streq	r1, [r4, #0]
 80069c4:	6054      	str	r4, [r2, #4]
 80069c6:	e7c7      	b.n	8006958 <_free_r+0x28>
 80069c8:	b003      	add	sp, #12
 80069ca:	bd30      	pop	{r4, r5, pc}
 80069cc:	20004034 	.word	0x20004034

080069d0 <_malloc_r>:
 80069d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d2:	1ccd      	adds	r5, r1, #3
 80069d4:	f025 0503 	bic.w	r5, r5, #3
 80069d8:	3508      	adds	r5, #8
 80069da:	2d0c      	cmp	r5, #12
 80069dc:	bf38      	it	cc
 80069de:	250c      	movcc	r5, #12
 80069e0:	2d00      	cmp	r5, #0
 80069e2:	4606      	mov	r6, r0
 80069e4:	db01      	blt.n	80069ea <_malloc_r+0x1a>
 80069e6:	42a9      	cmp	r1, r5
 80069e8:	d903      	bls.n	80069f2 <_malloc_r+0x22>
 80069ea:	230c      	movs	r3, #12
 80069ec:	6033      	str	r3, [r6, #0]
 80069ee:	2000      	movs	r0, #0
 80069f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069f2:	f000 f87d 	bl	8006af0 <__malloc_lock>
 80069f6:	4921      	ldr	r1, [pc, #132]	; (8006a7c <_malloc_r+0xac>)
 80069f8:	680a      	ldr	r2, [r1, #0]
 80069fa:	4614      	mov	r4, r2
 80069fc:	b99c      	cbnz	r4, 8006a26 <_malloc_r+0x56>
 80069fe:	4f20      	ldr	r7, [pc, #128]	; (8006a80 <_malloc_r+0xb0>)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	b923      	cbnz	r3, 8006a0e <_malloc_r+0x3e>
 8006a04:	4621      	mov	r1, r4
 8006a06:	4630      	mov	r0, r6
 8006a08:	f000 f862 	bl	8006ad0 <_sbrk_r>
 8006a0c:	6038      	str	r0, [r7, #0]
 8006a0e:	4629      	mov	r1, r5
 8006a10:	4630      	mov	r0, r6
 8006a12:	f000 f85d 	bl	8006ad0 <_sbrk_r>
 8006a16:	1c43      	adds	r3, r0, #1
 8006a18:	d123      	bne.n	8006a62 <_malloc_r+0x92>
 8006a1a:	230c      	movs	r3, #12
 8006a1c:	6033      	str	r3, [r6, #0]
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f000 f86c 	bl	8006afc <__malloc_unlock>
 8006a24:	e7e3      	b.n	80069ee <_malloc_r+0x1e>
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	1b5b      	subs	r3, r3, r5
 8006a2a:	d417      	bmi.n	8006a5c <_malloc_r+0x8c>
 8006a2c:	2b0b      	cmp	r3, #11
 8006a2e:	d903      	bls.n	8006a38 <_malloc_r+0x68>
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	441c      	add	r4, r3
 8006a34:	6025      	str	r5, [r4, #0]
 8006a36:	e004      	b.n	8006a42 <_malloc_r+0x72>
 8006a38:	6863      	ldr	r3, [r4, #4]
 8006a3a:	42a2      	cmp	r2, r4
 8006a3c:	bf0c      	ite	eq
 8006a3e:	600b      	streq	r3, [r1, #0]
 8006a40:	6053      	strne	r3, [r2, #4]
 8006a42:	4630      	mov	r0, r6
 8006a44:	f000 f85a 	bl	8006afc <__malloc_unlock>
 8006a48:	f104 000b 	add.w	r0, r4, #11
 8006a4c:	1d23      	adds	r3, r4, #4
 8006a4e:	f020 0007 	bic.w	r0, r0, #7
 8006a52:	1ac2      	subs	r2, r0, r3
 8006a54:	d0cc      	beq.n	80069f0 <_malloc_r+0x20>
 8006a56:	1a1b      	subs	r3, r3, r0
 8006a58:	50a3      	str	r3, [r4, r2]
 8006a5a:	e7c9      	b.n	80069f0 <_malloc_r+0x20>
 8006a5c:	4622      	mov	r2, r4
 8006a5e:	6864      	ldr	r4, [r4, #4]
 8006a60:	e7cc      	b.n	80069fc <_malloc_r+0x2c>
 8006a62:	1cc4      	adds	r4, r0, #3
 8006a64:	f024 0403 	bic.w	r4, r4, #3
 8006a68:	42a0      	cmp	r0, r4
 8006a6a:	d0e3      	beq.n	8006a34 <_malloc_r+0x64>
 8006a6c:	1a21      	subs	r1, r4, r0
 8006a6e:	4630      	mov	r0, r6
 8006a70:	f000 f82e 	bl	8006ad0 <_sbrk_r>
 8006a74:	3001      	adds	r0, #1
 8006a76:	d1dd      	bne.n	8006a34 <_malloc_r+0x64>
 8006a78:	e7cf      	b.n	8006a1a <_malloc_r+0x4a>
 8006a7a:	bf00      	nop
 8006a7c:	20004034 	.word	0x20004034
 8006a80:	20004038 	.word	0x20004038

08006a84 <_realloc_r>:
 8006a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a86:	4607      	mov	r7, r0
 8006a88:	4614      	mov	r4, r2
 8006a8a:	460e      	mov	r6, r1
 8006a8c:	b921      	cbnz	r1, 8006a98 <_realloc_r+0x14>
 8006a8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a92:	4611      	mov	r1, r2
 8006a94:	f7ff bf9c 	b.w	80069d0 <_malloc_r>
 8006a98:	b922      	cbnz	r2, 8006aa4 <_realloc_r+0x20>
 8006a9a:	f7ff ff49 	bl	8006930 <_free_r>
 8006a9e:	4625      	mov	r5, r4
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aa4:	f000 f830 	bl	8006b08 <_malloc_usable_size_r>
 8006aa8:	42a0      	cmp	r0, r4
 8006aaa:	d20f      	bcs.n	8006acc <_realloc_r+0x48>
 8006aac:	4621      	mov	r1, r4
 8006aae:	4638      	mov	r0, r7
 8006ab0:	f7ff ff8e 	bl	80069d0 <_malloc_r>
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d0f2      	beq.n	8006aa0 <_realloc_r+0x1c>
 8006aba:	4631      	mov	r1, r6
 8006abc:	4622      	mov	r2, r4
 8006abe:	f7ff fbf7 	bl	80062b0 <memcpy>
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4638      	mov	r0, r7
 8006ac6:	f7ff ff33 	bl	8006930 <_free_r>
 8006aca:	e7e9      	b.n	8006aa0 <_realloc_r+0x1c>
 8006acc:	4635      	mov	r5, r6
 8006ace:	e7e7      	b.n	8006aa0 <_realloc_r+0x1c>

08006ad0 <_sbrk_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	4d06      	ldr	r5, [pc, #24]	; (8006aec <_sbrk_r+0x1c>)
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	4608      	mov	r0, r1
 8006ada:	602b      	str	r3, [r5, #0]
 8006adc:	f7fa f912 	bl	8000d04 <_sbrk>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d102      	bne.n	8006aea <_sbrk_r+0x1a>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	b103      	cbz	r3, 8006aea <_sbrk_r+0x1a>
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
 8006aec:	20004124 	.word	0x20004124

08006af0 <__malloc_lock>:
 8006af0:	4801      	ldr	r0, [pc, #4]	; (8006af8 <__malloc_lock+0x8>)
 8006af2:	f000 b811 	b.w	8006b18 <__retarget_lock_acquire_recursive>
 8006af6:	bf00      	nop
 8006af8:	2000412c 	.word	0x2000412c

08006afc <__malloc_unlock>:
 8006afc:	4801      	ldr	r0, [pc, #4]	; (8006b04 <__malloc_unlock+0x8>)
 8006afe:	f000 b80c 	b.w	8006b1a <__retarget_lock_release_recursive>
 8006b02:	bf00      	nop
 8006b04:	2000412c 	.word	0x2000412c

08006b08 <_malloc_usable_size_r>:
 8006b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b0c:	1f18      	subs	r0, r3, #4
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	bfbc      	itt	lt
 8006b12:	580b      	ldrlt	r3, [r1, r0]
 8006b14:	18c0      	addlt	r0, r0, r3
 8006b16:	4770      	bx	lr

08006b18 <__retarget_lock_acquire_recursive>:
 8006b18:	4770      	bx	lr

08006b1a <__retarget_lock_release_recursive>:
 8006b1a:	4770      	bx	lr

08006b1c <_init>:
 8006b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1e:	bf00      	nop
 8006b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b22:	bc08      	pop	{r3}
 8006b24:	469e      	mov	lr, r3
 8006b26:	4770      	bx	lr

08006b28 <_fini>:
 8006b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2a:	bf00      	nop
 8006b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2e:	bc08      	pop	{r3}
 8006b30:	469e      	mov	lr, r3
 8006b32:	4770      	bx	lr
