
freeRtos_application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080047b4  080047b4  000147b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004874  08004874  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800487c  0800487c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800487c  0800487c  0001487c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004880  08004880  00014880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000409c  20000010  08004894  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040ac  08004894  000240ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016763  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf0  00000000  00000000  000367a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00039498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  0003a608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c8b  00000000  00000000  0003b660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001431f  00000000  00000000  000622eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f74ff  00000000  00000000  0007660a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016db09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004858  00000000  00000000  0016db5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800479c 	.word	0x0800479c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800479c 	.word	0x0800479c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	2000002c 	.word	0x2000002c
 8000538:	20000080 	.word	0x20000080

0800053c <transmit_def>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void transmit_def (void)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
	uint8_t data[] = "Hello DEFTASK\n";
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <transmit_def+0x2c>)
 8000544:	463c      	mov	r4, r7
 8000546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000548:	c407      	stmia	r4!, {r0, r1, r2}
 800054a:	8023      	strh	r3, [r4, #0]
 800054c:	3402      	adds	r4, #2
 800054e:	0c1b      	lsrs	r3, r3, #16
 8000550:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, data, 14, 1000);
 8000552:	4639      	mov	r1, r7
 8000554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000558:	220e      	movs	r2, #14
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <transmit_def+0x30>)
 800055c:	f002 fa1e 	bl	800299c <HAL_UART_Transmit>
}
 8000560:	bf00      	nop
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	bd90      	pop	{r4, r7, pc}
 8000568:	080047d0 	.word	0x080047d0
 800056c:	20003fd8 	.word	0x20003fd8

08000570 <transmit_task2>:

void transmit_task2 (void)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
	uint8_t data[] = "Hello TASK2\n";
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <transmit_task2+0x28>)
 8000578:	463c      	mov	r4, r7
 800057a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800057c:	c407      	stmia	r4!, {r0, r1, r2}
 800057e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, data, 12, 1000);
 8000580:	4639      	mov	r1, r7
 8000582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000586:	220c      	movs	r2, #12
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <transmit_task2+0x2c>)
 800058a:	f002 fa07 	bl	800299c <HAL_UART_Transmit>
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bd90      	pop	{r4, r7, pc}
 8000596:	bf00      	nop
 8000598:	080047e0 	.word	0x080047e0
 800059c:	20003fd8 	.word	0x20003fd8

080005a0 <transmit_task3>:

void transmit_task3 (void)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
	uint8_t data[] = "Hello TASK3\n";
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <transmit_task3+0x28>)
 80005a8:	463c      	mov	r4, r7
 80005aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ac:	c407      	stmia	r4!, {r0, r1, r2}
 80005ae:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, data, 12, 1000);
 80005b0:	4639      	mov	r1, r7
 80005b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b6:	220c      	movs	r2, #12
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <transmit_task3+0x2c>)
 80005ba:	f002 f9ef 	bl	800299c <HAL_UART_Transmit>
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd90      	pop	{r4, r7, pc}
 80005c6:	bf00      	nop
 80005c8:	080047f0 	.word	0x080047f0
 80005cc:	20003fd8 	.word	0x20003fd8

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	b096      	sub	sp, #88	; 0x58
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fad8 	bl	8000b8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f84b 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f8e5 	bl	80007ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f8b3 	bl	800074c <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <main+0x8c>)
 80005e8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f002 fe79 	bl	80032f8 <osThreadCreate>
 8000606:	4603      	mov	r3, r0
 8000608:	4a15      	ldr	r2, [pc, #84]	; (8000660 <main+0x90>)
 800060a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_init, osPriorityNormal, 0, 128);
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <main+0x94>)
 800060e:	f107 0420 	add.w	r4, r7, #32
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fe66 	bl	80032f8 <osThreadCreate>
 800062c:	4603      	mov	r3, r0
 800062e:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <main+0x98>)
 8000630:	6013      	str	r3, [r2, #0]
  osThreadDef(Task3, Task3_init, osPriorityNormal, 0, 128);
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <main+0x9c>)
 8000634:	1d3c      	adds	r4, r7, #4
 8000636:	461d      	mov	r5, r3
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f002 fe55 	bl	80032f8 <osThreadCreate>
 800064e:	4603      	mov	r3, r0
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <main+0xa0>)
 8000652:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000654:	f002 fe49 	bl	80032ea <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000658:	e7fe      	b.n	8000658 <main+0x88>
 800065a:	bf00      	nop
 800065c:	08004800 	.word	0x08004800
 8000660:	20003fcc 	.word	0x20003fcc
 8000664:	0800481c 	.word	0x0800481c
 8000668:	20003fd4 	.word	0x20003fd4
 800066c:	08004838 	.word	0x08004838
 8000670:	20003fd0 	.word	0x20003fd0

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f004 f882 	bl	800478c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <SystemClock_Config+0xd0>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	4a29      	ldr	r2, [pc, #164]	; (8000744 <SystemClock_Config+0xd0>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	; 0x40
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <SystemClock_Config+0xd0>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemClock_Config+0xd4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a24      	ldr	r2, [pc, #144]	; (8000748 <SystemClock_Config+0xd4>)
 80006b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemClock_Config+0xd4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2310      	movs	r3, #16
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d4:	2302      	movs	r3, #2
 80006d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006dc:	2308      	movs	r3, #8
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006e0:	23d8      	movs	r3, #216	; 0xd8
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006e8:	2309      	movs	r3, #9
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fd89 	bl	8001208 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006fc:	f000 f906 	bl	800090c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000700:	f000 fd32 	bl	8001168 <HAL_PWREx_EnableOverDrive>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070a:	f000 f8ff 	bl	800090c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2302      	movs	r3, #2
 8000714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800071e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000724:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2107      	movs	r1, #7
 800072c:	4618      	mov	r0, r3
 800072e:	f001 f80f 	bl	8001750 <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000738:	f000 f8e8 	bl	800090c <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	3750      	adds	r7, #80	; 0x50
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 8000752:	4a15      	ldr	r2, [pc, #84]	; (80007a8 <MX_USART2_UART_Init+0x5c>)
 8000754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 8000790:	f002 f8b6 	bl	8002900 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800079a:	f000 f8b7 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20003fd8 	.word	0x20003fd8
 80007a8:	40004400 	.word	0x40004400

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b2e      	ldr	r3, [pc, #184]	; (800087c <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a2d      	ldr	r2, [pc, #180]	; (800087c <MX_GPIO_Init+0xd0>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b2b      	ldr	r3, [pc, #172]	; (800087c <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007da:	4b28      	ldr	r3, [pc, #160]	; (800087c <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a27      	ldr	r2, [pc, #156]	; (800087c <MX_GPIO_Init+0xd0>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b25      	ldr	r3, [pc, #148]	; (800087c <MX_GPIO_Init+0xd0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a21      	ldr	r2, [pc, #132]	; (800087c <MX_GPIO_Init+0xd0>)
 80007f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a1b      	ldr	r2, [pc, #108]	; (800087c <MX_GPIO_Init+0xd0>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2102      	movs	r1, #2
 8000826:	4816      	ldr	r0, [pc, #88]	; (8000880 <MX_GPIO_Init+0xd4>)
 8000828:	f000 fc6a 	bl	8001100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000832:	4814      	ldr	r0, [pc, #80]	; (8000884 <MX_GPIO_Init+0xd8>)
 8000834:	f000 fc64 	bl	8001100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000838:	2302      	movs	r3, #2
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	480c      	ldr	r0, [pc, #48]	; (8000880 <MX_GPIO_Init+0xd4>)
 8000850:	f000 faaa 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_GPIO_Init+0xd8>)
 800086e:	f000 fa9b 	bl	8000da8 <HAL_GPIO_Init>

}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40022000 	.word	0x40022000
 8000884:	40020400 	.word	0x40020400

08000888 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
 	    /* Infinite loop */
 	    for(;;)
 	    {
 	        HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 8000890:	2102      	movs	r1, #2
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <StartDefaultTask+0x20>)
 8000894:	f000 fc4d 	bl	8001132 <HAL_GPIO_TogglePin>
 	 	    transmit_def();
 8000898:	f7ff fe50 	bl	800053c <transmit_def>

 	        osDelay(1000);
 800089c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a0:	f002 fd76 	bl	8003390 <osDelay>
 	        HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80008a4:	e7f4      	b.n	8000890 <StartDefaultTask+0x8>
 80008a6:	bf00      	nop
 80008a8:	40022000 	.word	0x40022000

080008ac <Task2_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_init */
void Task2_init(void const * argument)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_init */
  /* Infinite loop */
 for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 80008b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <Task2_init+0x20>)
 80008ba:	f000 fc3a 	bl	8001132 <HAL_GPIO_TogglePin>
	  transmit_task2();
 80008be:	f7ff fe57 	bl	8000570 <transmit_task2>
       osDelay(1000);
 80008c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c6:	f002 fd63 	bl	8003390 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 80008ca:	e7f3      	b.n	80008b4 <Task2_init+0x8>
 80008cc:	40020400 	.word	0x40020400

080008d0 <Task3_init>:

  }
  /* USER CODE END Task2_init */
}
void Task3_init(void const * argument)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_init */
  /* Infinite loop */
 for(;;)
  {
	  transmit_task3();
 80008d8:	f7ff fe62 	bl	80005a0 <transmit_task3>
       osDelay(1000);
 80008dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e0:	f002 fd56 	bl	8003390 <osDelay>
	  transmit_task3();
 80008e4:	e7f8      	b.n	80008d8 <Task3_init+0x8>
	...

080008e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d101      	bne.n	80008fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008fa:	f000 f953 	bl	8000ba4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40010000 	.word	0x40010000

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	e7fe      	b.n	8000914 <Error_Handler+0x8>
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <HAL_MspInit+0x4c>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	210f      	movs	r1, #15
 8000952:	f06f 0001 	mvn.w	r0, #1
 8000956:	f000 f9fd 	bl	8000d54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b0aa      	sub	sp, #168	; 0xa8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	2284      	movs	r2, #132	; 0x84
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f003 feff 	bl	800478c <memset>
  if(huart->Instance==USART2)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <HAL_UART_MspInit+0xb0>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d13a      	bne.n	8000a0e <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800099c:	2300      	movs	r3, #0
 800099e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 f8db 	bl	8001b60 <HAL_RCCEx_PeriphCLKConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009b0:	f7ff ffac 	bl	800090c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a18      	ldr	r2, [pc, #96]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009d2:	f043 0308 	orr.w	r3, r3, #8
 80009d6:	6313      	str	r3, [r2, #48]	; 0x30
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	f003 0308 	and.w	r3, r3, #8
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 80009e4:	2360      	movs	r3, #96	; 0x60
 80009e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009fc:	2307      	movs	r3, #7
 80009fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a02:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_UART_MspInit+0xb8>)
 8000a0a:	f000 f9cd 	bl	8000da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a0e:	bf00      	nop
 8000a10:	37a8      	adds	r7, #168	; 0xa8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40004400 	.word	0x40004400
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020c00 	.word	0x40020c00

08000a24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	2019      	movs	r0, #25
 8000a3a:	f000 f98b 	bl	8000d54 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a3e:	2019      	movs	r0, #25
 8000a40:	f000 f9a4 	bl	8000d8c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <HAL_InitTick+0xa0>)
 8000a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a48:	4a1e      	ldr	r2, [pc, #120]	; (8000ac4 <HAL_InitTick+0xa0>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	6453      	str	r3, [r2, #68]	; 0x44
 8000a50:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <HAL_InitTick+0xa0>)
 8000a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a5c:	f107 0210 	add.w	r2, r7, #16
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 f848 	bl	8001afc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a6c:	f001 f832 	bl	8001ad4 <HAL_RCC_GetPCLK2Freq>
 8000a70:	4603      	mov	r3, r0
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a78:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <HAL_InitTick+0xa4>)
 8000a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7e:	0c9b      	lsrs	r3, r3, #18
 8000a80:	3b01      	subs	r3, #1
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_InitTick+0xa8>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <HAL_InitTick+0xac>)
 8000a88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <HAL_InitTick+0xa8>)
 8000a8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <HAL_InitTick+0xa8>)
 8000a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_InitTick+0xa8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_InitTick+0xa8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000aa4:	4809      	ldr	r0, [pc, #36]	; (8000acc <HAL_InitTick+0xa8>)
 8000aa6:	f001 fc4b 	bl	8002340 <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d104      	bne.n	8000aba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ab0:	4806      	ldr	r0, [pc, #24]	; (8000acc <HAL_InitTick+0xa8>)
 8000ab2:	f001 fca7 	bl	8002404 <HAL_TIM_Base_Start_IT>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3730      	adds	r7, #48	; 0x30
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	431bde83 	.word	0x431bde83
 8000acc:	2000405c 	.word	0x2000405c
 8000ad0:	40010000 	.word	0x40010000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b06:	f001 fcf5 	bl	80024f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000405c 	.word	0x2000405c

08000b14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b3e:	490e      	ldr	r1, [pc, #56]	; (8000b78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b54:	4c0b      	ldr	r4, [pc, #44]	; (8000b84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b62:	f7ff ffd7 	bl	8000b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f003 fded 	bl	8004744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fd31 	bl	80005d0 <main>
  bx  lr    
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b70:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b7c:	08004884 	.word	0x08004884
  ldr r2, =_sbss
 8000b80:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b84:	200040ac 	.word	0x200040ac

08000b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC_IRQHandler>

08000b8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b8e:	2003      	movs	r0, #3
 8000b90:	f000 f8d5 	bl	8000d3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b94:	200f      	movs	r0, #15
 8000b96:	f7ff ff45 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9a:	f7ff febd 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x20>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x24>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_IncTick+0x24>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	200040a8 	.word	0x200040a8

08000bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <HAL_GetTick+0x14>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	200040a8 	.word	0x200040a8

08000be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <__NVIC_SetPriorityGrouping+0x40>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c12:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <__NVIC_SetPriorityGrouping+0x40>)
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	60d3      	str	r3, [r2, #12]
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00
 8000c28:	05fa0000 	.word	0x05fa0000

08000c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <__NVIC_GetPriorityGrouping+0x18>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	f003 0307 	and.w	r3, r3, #7
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db0b      	blt.n	8000c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 021f 	and.w	r2, r3, #31
 8000c60:	4907      	ldr	r1, [pc, #28]	; (8000c80 <__NVIC_EnableIRQ+0x38>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	2001      	movs	r0, #1
 8000c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	; 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ff4c 	bl	8000be4 <__NVIC_SetPriorityGrouping>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
 8000d60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d66:	f7ff ff61 	bl	8000c2c <__NVIC_GetPriorityGrouping>
 8000d6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	68b9      	ldr	r1, [r7, #8]
 8000d70:	6978      	ldr	r0, [r7, #20]
 8000d72:	f7ff ffb1 	bl	8000cd8 <NVIC_EncodePriority>
 8000d76:	4602      	mov	r2, r0
 8000d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff80 	bl	8000c84 <__NVIC_SetPriority>
}
 8000d84:	bf00      	nop
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff54 	bl	8000c48 <__NVIC_EnableIRQ>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	e175      	b.n	80010b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	f040 8164 	bne.w	80010ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d005      	beq.n	8000dfe <HAL_GPIO_Init+0x56>
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d130      	bne.n	8000e60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	2203      	movs	r2, #3
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	091b      	lsrs	r3, r3, #4
 8000e4a:	f003 0201 	and.w	r2, r3, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d017      	beq.n	8000e9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d123      	bne.n	8000ef0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3208      	adds	r2, #8
 8000eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	69b9      	ldr	r1, [r7, #24]
 8000eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0203 	and.w	r2, r3, #3
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 80be 	beq.w	80010ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b66      	ldr	r3, [pc, #408]	; (80010cc <HAL_GPIO_Init+0x324>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a65      	ldr	r2, [pc, #404]	; (80010cc <HAL_GPIO_Init+0x324>)
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b63      	ldr	r3, [pc, #396]	; (80010cc <HAL_GPIO_Init+0x324>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f4a:	4a61      	ldr	r2, [pc, #388]	; (80010d0 <HAL_GPIO_Init+0x328>)
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a58      	ldr	r2, [pc, #352]	; (80010d4 <HAL_GPIO_Init+0x32c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d037      	beq.n	8000fe6 <HAL_GPIO_Init+0x23e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a57      	ldr	r2, [pc, #348]	; (80010d8 <HAL_GPIO_Init+0x330>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d031      	beq.n	8000fe2 <HAL_GPIO_Init+0x23a>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a56      	ldr	r2, [pc, #344]	; (80010dc <HAL_GPIO_Init+0x334>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d02b      	beq.n	8000fde <HAL_GPIO_Init+0x236>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a55      	ldr	r2, [pc, #340]	; (80010e0 <HAL_GPIO_Init+0x338>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d025      	beq.n	8000fda <HAL_GPIO_Init+0x232>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a54      	ldr	r2, [pc, #336]	; (80010e4 <HAL_GPIO_Init+0x33c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d01f      	beq.n	8000fd6 <HAL_GPIO_Init+0x22e>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a53      	ldr	r2, [pc, #332]	; (80010e8 <HAL_GPIO_Init+0x340>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d019      	beq.n	8000fd2 <HAL_GPIO_Init+0x22a>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a52      	ldr	r2, [pc, #328]	; (80010ec <HAL_GPIO_Init+0x344>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d013      	beq.n	8000fce <HAL_GPIO_Init+0x226>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a51      	ldr	r2, [pc, #324]	; (80010f0 <HAL_GPIO_Init+0x348>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d00d      	beq.n	8000fca <HAL_GPIO_Init+0x222>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a50      	ldr	r2, [pc, #320]	; (80010f4 <HAL_GPIO_Init+0x34c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d007      	beq.n	8000fc6 <HAL_GPIO_Init+0x21e>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4f      	ldr	r2, [pc, #316]	; (80010f8 <HAL_GPIO_Init+0x350>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d101      	bne.n	8000fc2 <HAL_GPIO_Init+0x21a>
 8000fbe:	2309      	movs	r3, #9
 8000fc0:	e012      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	e010      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	e00e      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fca:	2307      	movs	r3, #7
 8000fcc:	e00c      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fce:	2306      	movs	r3, #6
 8000fd0:	e00a      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	e008      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	e006      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e004      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e002      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	69fa      	ldr	r2, [r7, #28]
 8000fea:	f002 0203 	and.w	r2, r2, #3
 8000fee:	0092      	lsls	r2, r2, #2
 8000ff0:	4093      	lsls	r3, r2
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ff8:	4935      	ldr	r1, [pc, #212]	; (80010d0 <HAL_GPIO_Init+0x328>)
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	3302      	adds	r3, #2
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001006:	4b3d      	ldr	r3, [pc, #244]	; (80010fc <HAL_GPIO_Init+0x354>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800102a:	4a34      	ldr	r2, [pc, #208]	; (80010fc <HAL_GPIO_Init+0x354>)
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001030:	4b32      	ldr	r3, [pc, #200]	; (80010fc <HAL_GPIO_Init+0x354>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001054:	4a29      	ldr	r2, [pc, #164]	; (80010fc <HAL_GPIO_Init+0x354>)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <HAL_GPIO_Init+0x354>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800107e:	4a1f      	ldr	r2, [pc, #124]	; (80010fc <HAL_GPIO_Init+0x354>)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_GPIO_Init+0x354>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a8:	4a14      	ldr	r2, [pc, #80]	; (80010fc <HAL_GPIO_Init+0x354>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3301      	adds	r3, #1
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	2b0f      	cmp	r3, #15
 80010b8:	f67f ae86 	bls.w	8000dc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40013800 	.word	0x40013800
 80010d4:	40020000 	.word	0x40020000
 80010d8:	40020400 	.word	0x40020400
 80010dc:	40020800 	.word	0x40020800
 80010e0:	40020c00 	.word	0x40020c00
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40021400 	.word	0x40021400
 80010ec:	40021800 	.word	0x40021800
 80010f0:	40021c00 	.word	0x40021c00
 80010f4:	40022000 	.word	0x40022000
 80010f8:	40022400 	.word	0x40022400
 80010fc:	40013c00 	.word	0x40013c00

08001100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
 800110c:	4613      	mov	r3, r2
 800110e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001110:	787b      	ldrb	r3, [r7, #1]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800111c:	e003      	b.n	8001126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	041a      	lsls	r2, r3, #16
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	619a      	str	r2, [r3, #24]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001132:	b480      	push	{r7}
 8001134:	b085      	sub	sp, #20
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	460b      	mov	r3, r1
 800113c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001144:	887a      	ldrh	r2, [r7, #2]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	041a      	lsls	r2, r3, #16
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43d9      	mvns	r1, r3
 8001150:	887b      	ldrh	r3, [r7, #2]
 8001152:	400b      	ands	r3, r1
 8001154:	431a      	orrs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	619a      	str	r2, [r3, #24]
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	4b23      	ldr	r3, [pc, #140]	; (8001200 <HAL_PWREx_EnableOverDrive+0x98>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a22      	ldr	r2, [pc, #136]	; (8001200 <HAL_PWREx_EnableOverDrive+0x98>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <HAL_PWREx_EnableOverDrive+0x98>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <HAL_PWREx_EnableOverDrive+0x9c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a1d      	ldr	r2, [pc, #116]	; (8001204 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001196:	f7ff fd19 	bl	8000bcc <HAL_GetTick>
 800119a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800119c:	e009      	b.n	80011b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800119e:	f7ff fd15 	bl	8000bcc <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011ac:	d901      	bls.n	80011b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e022      	b.n	80011f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011be:	d1ee      	bne.n	800119e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011cc:	f7ff fcfe 	bl	8000bcc <HAL_GetTick>
 80011d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011d2:	e009      	b.n	80011e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011d4:	f7ff fcfa 	bl	8000bcc <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011e2:	d901      	bls.n	80011e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e007      	b.n	80011f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011f4:	d1ee      	bne.n	80011d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e291      	b.n	8001742 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 8087 	beq.w	800133a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800122c:	4b96      	ldr	r3, [pc, #600]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 030c 	and.w	r3, r3, #12
 8001234:	2b04      	cmp	r3, #4
 8001236:	d00c      	beq.n	8001252 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001238:	4b93      	ldr	r3, [pc, #588]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 030c 	and.w	r3, r3, #12
 8001240:	2b08      	cmp	r3, #8
 8001242:	d112      	bne.n	800126a <HAL_RCC_OscConfig+0x62>
 8001244:	4b90      	ldr	r3, [pc, #576]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001250:	d10b      	bne.n	800126a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001252:	4b8d      	ldr	r3, [pc, #564]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d06c      	beq.n	8001338 <HAL_RCC_OscConfig+0x130>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d168      	bne.n	8001338 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e26b      	b.n	8001742 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001272:	d106      	bne.n	8001282 <HAL_RCC_OscConfig+0x7a>
 8001274:	4b84      	ldr	r3, [pc, #528]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a83      	ldr	r2, [pc, #524]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 800127a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	e02e      	b.n	80012e0 <HAL_RCC_OscConfig+0xd8>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x9c>
 800128a:	4b7f      	ldr	r3, [pc, #508]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a7e      	ldr	r2, [pc, #504]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b7c      	ldr	r3, [pc, #496]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a7b      	ldr	r2, [pc, #492]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 800129c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e01d      	b.n	80012e0 <HAL_RCC_OscConfig+0xd8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ac:	d10c      	bne.n	80012c8 <HAL_RCC_OscConfig+0xc0>
 80012ae:	4b76      	ldr	r3, [pc, #472]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a75      	ldr	r2, [pc, #468]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4b73      	ldr	r3, [pc, #460]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a72      	ldr	r2, [pc, #456]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e00b      	b.n	80012e0 <HAL_RCC_OscConfig+0xd8>
 80012c8:	4b6f      	ldr	r3, [pc, #444]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a6e      	ldr	r2, [pc, #440]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 80012ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b6c      	ldr	r3, [pc, #432]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a6b      	ldr	r2, [pc, #428]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 80012da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d013      	beq.n	8001310 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff fc70 	bl	8000bcc <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fc6c 	bl	8000bcc <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e21f      	b.n	8001742 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	4b61      	ldr	r3, [pc, #388]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0xe8>
 800130e:	e014      	b.n	800133a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff fc5c 	bl	8000bcc <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fc58 	bl	8000bcc <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e20b      	b.n	8001742 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	4b57      	ldr	r3, [pc, #348]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x110>
 8001336:	e000      	b.n	800133a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d069      	beq.n	800141a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001346:	4b50      	ldr	r3, [pc, #320]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00b      	beq.n	800136a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001352:	4b4d      	ldr	r3, [pc, #308]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b08      	cmp	r3, #8
 800135c:	d11c      	bne.n	8001398 <HAL_RCC_OscConfig+0x190>
 800135e:	4b4a      	ldr	r3, [pc, #296]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d116      	bne.n	8001398 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	4b47      	ldr	r3, [pc, #284]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x17a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e1df      	b.n	8001742 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001382:	4b41      	ldr	r3, [pc, #260]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	493d      	ldr	r1, [pc, #244]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001396:	e040      	b.n	800141a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d023      	beq.n	80013e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a0:	4b39      	ldr	r3, [pc, #228]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a38      	ldr	r2, [pc, #224]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc0e 	bl	8000bcc <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b4:	f7ff fc0a 	bl	8000bcc <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e1bd      	b.n	8001742 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d2:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4929      	ldr	r1, [pc, #164]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
 80013e6:	e018      	b.n	800141a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e8:	4b27      	ldr	r3, [pc, #156]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a26      	ldr	r2, [pc, #152]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fbea 	bl	8000bcc <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fc:	f7ff fbe6 	bl	8000bcc <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e199      	b.n	8001742 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d038      	beq.n	8001498 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d019      	beq.n	8001462 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001432:	4a15      	ldr	r2, [pc, #84]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143a:	f7ff fbc7 	bl	8000bcc <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001442:	f7ff fbc3 	bl	8000bcc <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e176      	b.n	8001742 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x23a>
 8001460:	e01a      	b.n	8001498 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001468:	f023 0301 	bic.w	r3, r3, #1
 800146c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146e:	f7ff fbad 	bl	8000bcc <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001474:	e00a      	b.n	800148c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001476:	f7ff fba9 	bl	8000bcc <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d903      	bls.n	800148c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e15c      	b.n	8001742 <HAL_RCC_OscConfig+0x53a>
 8001488:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	4b91      	ldr	r3, [pc, #580]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 800148e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1ee      	bne.n	8001476 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80a4 	beq.w	80015ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a6:	4b8b      	ldr	r3, [pc, #556]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10d      	bne.n	80014ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	4b88      	ldr	r3, [pc, #544]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a87      	ldr	r2, [pc, #540]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b85      	ldr	r3, [pc, #532]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ca:	2301      	movs	r3, #1
 80014cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ce:	4b82      	ldr	r3, [pc, #520]	; (80016d8 <HAL_RCC_OscConfig+0x4d0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d118      	bne.n	800150c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014da:	4b7f      	ldr	r3, [pc, #508]	; (80016d8 <HAL_RCC_OscConfig+0x4d0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a7e      	ldr	r2, [pc, #504]	; (80016d8 <HAL_RCC_OscConfig+0x4d0>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fb71 	bl	8000bcc <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ee:	f7ff fb6d 	bl	8000bcc <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b64      	cmp	r3, #100	; 0x64
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e120      	b.n	8001742 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001500:	4b75      	ldr	r3, [pc, #468]	; (80016d8 <HAL_RCC_OscConfig+0x4d0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x31a>
 8001514:	4b6f      	ldr	r3, [pc, #444]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	4a6e      	ldr	r2, [pc, #440]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	; 0x70
 8001520:	e02d      	b.n	800157e <HAL_RCC_OscConfig+0x376>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x33c>
 800152a:	4b6a      	ldr	r3, [pc, #424]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	4a69      	ldr	r2, [pc, #420]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001530:	f023 0301 	bic.w	r3, r3, #1
 8001534:	6713      	str	r3, [r2, #112]	; 0x70
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153a:	4a66      	ldr	r2, [pc, #408]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 800153c:	f023 0304 	bic.w	r3, r3, #4
 8001540:	6713      	str	r3, [r2, #112]	; 0x70
 8001542:	e01c      	b.n	800157e <HAL_RCC_OscConfig+0x376>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b05      	cmp	r3, #5
 800154a:	d10c      	bne.n	8001566 <HAL_RCC_OscConfig+0x35e>
 800154c:	4b61      	ldr	r3, [pc, #388]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	4a60      	ldr	r2, [pc, #384]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6713      	str	r3, [r2, #112]	; 0x70
 8001558:	4b5e      	ldr	r3, [pc, #376]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	4a5d      	ldr	r2, [pc, #372]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6713      	str	r3, [r2, #112]	; 0x70
 8001564:	e00b      	b.n	800157e <HAL_RCC_OscConfig+0x376>
 8001566:	4b5b      	ldr	r3, [pc, #364]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156a:	4a5a      	ldr	r2, [pc, #360]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 800156c:	f023 0301 	bic.w	r3, r3, #1
 8001570:	6713      	str	r3, [r2, #112]	; 0x70
 8001572:	4b58      	ldr	r3, [pc, #352]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001576:	4a57      	ldr	r2, [pc, #348]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001578:	f023 0304 	bic.w	r3, r3, #4
 800157c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d015      	beq.n	80015b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001586:	f7ff fb21 	bl	8000bcc <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158e:	f7ff fb1d 	bl	8000bcc <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f241 3288 	movw	r2, #5000	; 0x1388
 800159c:	4293      	cmp	r3, r2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e0ce      	b.n	8001742 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a4:	4b4b      	ldr	r3, [pc, #300]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0ee      	beq.n	800158e <HAL_RCC_OscConfig+0x386>
 80015b0:	e014      	b.n	80015dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b2:	f7ff fb0b 	bl	8000bcc <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b8:	e00a      	b.n	80015d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ba:	f7ff fb07 	bl	8000bcc <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0b8      	b.n	8001742 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d0:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1ee      	bne.n	80015ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d105      	bne.n	80015ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e2:	4b3c      	ldr	r3, [pc, #240]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a3b      	ldr	r2, [pc, #236]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 80015e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 80a4 	beq.w	8001740 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f8:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b08      	cmp	r3, #8
 8001602:	d06b      	beq.n	80016dc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d149      	bne.n	80016a0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160c:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a30      	ldr	r2, [pc, #192]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fad8 	bl	8000bcc <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff fad4 	bl	8000bcc <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e087      	b.n	8001742 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	019b      	lsls	r3, r3, #6
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	3b01      	subs	r3, #1
 8001658:	041b      	lsls	r3, r3, #16
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	061b      	lsls	r3, r3, #24
 8001662:	4313      	orrs	r3, r2
 8001664:	4a1b      	ldr	r2, [pc, #108]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001666:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800166a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff faa8 	bl	8000bcc <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff faa4 	bl	8000bcc <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e057      	b.n	8001742 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x478>
 800169e:	e04f      	b.n	8001740 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 80016a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff fa8e 	bl	8000bcc <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff fa8a 	bl	8000bcc <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e03d      	b.n	8001742 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c6:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4ac>
 80016d2:	e035      	b.n	8001740 <HAL_RCC_OscConfig+0x538>
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_RCC_OscConfig+0x544>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d028      	beq.n	800173c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d121      	bne.n	800173c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001702:	429a      	cmp	r2, r3
 8001704:	d11a      	bne.n	800173c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800170c:	4013      	ands	r3, r2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001712:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001714:	4293      	cmp	r3, r2
 8001716:	d111      	bne.n	800173c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	085b      	lsrs	r3, r3, #1
 8001724:	3b01      	subs	r3, #1
 8001726:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d107      	bne.n	800173c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d001      	beq.n	8001740 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0d0      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001768:	4b6a      	ldr	r3, [pc, #424]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 030f 	and.w	r3, r3, #15
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d910      	bls.n	8001798 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	4b67      	ldr	r3, [pc, #412]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 020f 	bic.w	r2, r3, #15
 800177e:	4965      	ldr	r1, [pc, #404]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b63      	ldr	r3, [pc, #396]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0b8      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b0:	4b59      	ldr	r3, [pc, #356]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a58      	ldr	r2, [pc, #352]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c8:	4b53      	ldr	r3, [pc, #332]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a52      	ldr	r2, [pc, #328]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d4:	4b50      	ldr	r3, [pc, #320]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	494d      	ldr	r1, [pc, #308]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d040      	beq.n	8001874 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b47      	ldr	r3, [pc, #284]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d115      	bne.n	8001832 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e07f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001812:	4b41      	ldr	r3, [pc, #260]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e073      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001822:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e06b      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001832:	4b39      	ldr	r3, [pc, #228]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f023 0203 	bic.w	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4936      	ldr	r1, [pc, #216]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 8001840:	4313      	orrs	r3, r2
 8001842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001844:	f7ff f9c2 	bl	8000bcc <HAL_GetTick>
 8001848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	e00a      	b.n	8001862 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184c:	f7ff f9be 	bl	8000bcc <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	; 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e053      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 020c 	and.w	r2, r3, #12
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	429a      	cmp	r2, r3
 8001872:	d1eb      	bne.n	800184c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d210      	bcs.n	80018a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b24      	ldr	r3, [pc, #144]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 020f 	bic.w	r2, r3, #15
 800188a:	4922      	ldr	r1, [pc, #136]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e032      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4916      	ldr	r1, [pc, #88]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	490e      	ldr	r1, [pc, #56]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018e2:	f000 f821 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 80018e6:	4602      	mov	r2, r0
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	490a      	ldr	r1, [pc, #40]	; (800191c <HAL_RCC_ClockConfig+0x1cc>)
 80018f4:	5ccb      	ldrb	r3, [r1, r3]
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	4a09      	ldr	r2, [pc, #36]	; (8001920 <HAL_RCC_ClockConfig+0x1d0>)
 80018fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_ClockConfig+0x1d4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f88e 	bl	8000a24 <HAL_InitTick>

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023c00 	.word	0x40023c00
 8001918:	40023800 	.word	0x40023800
 800191c:	0800485c 	.word	0x0800485c
 8001920:	20000000 	.word	0x20000000
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800192e:	2100      	movs	r1, #0
 8001930:	6079      	str	r1, [r7, #4]
 8001932:	2100      	movs	r1, #0
 8001934:	60f9      	str	r1, [r7, #12]
 8001936:	2100      	movs	r1, #0
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800193a:	2100      	movs	r1, #0
 800193c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800193e:	4952      	ldr	r1, [pc, #328]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x160>)
 8001940:	6889      	ldr	r1, [r1, #8]
 8001942:	f001 010c 	and.w	r1, r1, #12
 8001946:	2908      	cmp	r1, #8
 8001948:	d00d      	beq.n	8001966 <HAL_RCC_GetSysClockFreq+0x3e>
 800194a:	2908      	cmp	r1, #8
 800194c:	f200 8094 	bhi.w	8001a78 <HAL_RCC_GetSysClockFreq+0x150>
 8001950:	2900      	cmp	r1, #0
 8001952:	d002      	beq.n	800195a <HAL_RCC_GetSysClockFreq+0x32>
 8001954:	2904      	cmp	r1, #4
 8001956:	d003      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x38>
 8001958:	e08e      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800195a:	4b4c      	ldr	r3, [pc, #304]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x164>)
 800195c:	60bb      	str	r3, [r7, #8]
      break;
 800195e:	e08e      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001960:	4b4b      	ldr	r3, [pc, #300]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x168>)
 8001962:	60bb      	str	r3, [r7, #8]
      break;
 8001964:	e08b      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001966:	4948      	ldr	r1, [pc, #288]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x160>)
 8001968:	6849      	ldr	r1, [r1, #4]
 800196a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800196e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001970:	4945      	ldr	r1, [pc, #276]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x160>)
 8001972:	6849      	ldr	r1, [r1, #4]
 8001974:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001978:	2900      	cmp	r1, #0
 800197a:	d024      	beq.n	80019c6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197c:	4942      	ldr	r1, [pc, #264]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x160>)
 800197e:	6849      	ldr	r1, [r1, #4]
 8001980:	0989      	lsrs	r1, r1, #6
 8001982:	4608      	mov	r0, r1
 8001984:	f04f 0100 	mov.w	r1, #0
 8001988:	f240 14ff 	movw	r4, #511	; 0x1ff
 800198c:	f04f 0500 	mov.w	r5, #0
 8001990:	ea00 0204 	and.w	r2, r0, r4
 8001994:	ea01 0305 	and.w	r3, r1, r5
 8001998:	493d      	ldr	r1, [pc, #244]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x168>)
 800199a:	fb01 f003 	mul.w	r0, r1, r3
 800199e:	2100      	movs	r1, #0
 80019a0:	fb01 f102 	mul.w	r1, r1, r2
 80019a4:	1844      	adds	r4, r0, r1
 80019a6:	493a      	ldr	r1, [pc, #232]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x168>)
 80019a8:	fba2 0101 	umull	r0, r1, r2, r1
 80019ac:	1863      	adds	r3, r4, r1
 80019ae:	4619      	mov	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	461a      	mov	r2, r3
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	f7fe fc2a 	bl	8000210 <__aeabi_uldivmod>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4613      	mov	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	e04a      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c6:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x160>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	099b      	lsrs	r3, r3, #6
 80019cc:	461a      	mov	r2, r3
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	ea02 0400 	and.w	r4, r2, r0
 80019de:	ea03 0501 	and.w	r5, r3, r1
 80019e2:	4620      	mov	r0, r4
 80019e4:	4629      	mov	r1, r5
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	014b      	lsls	r3, r1, #5
 80019f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019f4:	0142      	lsls	r2, r0, #5
 80019f6:	4610      	mov	r0, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	1b00      	subs	r0, r0, r4
 80019fc:	eb61 0105 	sbc.w	r1, r1, r5
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	018b      	lsls	r3, r1, #6
 8001a0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a0e:	0182      	lsls	r2, r0, #6
 8001a10:	1a12      	subs	r2, r2, r0
 8001a12:	eb63 0301 	sbc.w	r3, r3, r1
 8001a16:	f04f 0000 	mov.w	r0, #0
 8001a1a:	f04f 0100 	mov.w	r1, #0
 8001a1e:	00d9      	lsls	r1, r3, #3
 8001a20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a24:	00d0      	lsls	r0, r2, #3
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	1912      	adds	r2, r2, r4
 8001a2c:	eb45 0303 	adc.w	r3, r5, r3
 8001a30:	f04f 0000 	mov.w	r0, #0
 8001a34:	f04f 0100 	mov.w	r1, #0
 8001a38:	0299      	lsls	r1, r3, #10
 8001a3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a3e:	0290      	lsls	r0, r2, #10
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	f7fe fbde 	bl	8000210 <__aeabi_uldivmod>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4613      	mov	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	0c1b      	lsrs	r3, r3, #16
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	3301      	adds	r3, #1
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a74:	60bb      	str	r3, [r7, #8]
      break;
 8001a76:	e002      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x164>)
 8001a7a:	60bb      	str	r3, [r7, #8]
      break;
 8001a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bdb0      	pop	{r4, r5, r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	00f42400 	.word	0x00f42400
 8001a90:	017d7840 	.word	0x017d7840

08001a94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000000 	.word	0x20000000

08001aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ab0:	f7ff fff0 	bl	8001a94 <HAL_RCC_GetHCLKFreq>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	0a9b      	lsrs	r3, r3, #10
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	4903      	ldr	r1, [pc, #12]	; (8001ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ac2:	5ccb      	ldrb	r3, [r1, r3]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	0800486c 	.word	0x0800486c

08001ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ad8:	f7ff ffdc 	bl	8001a94 <HAL_RCC_GetHCLKFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	0b5b      	lsrs	r3, r3, #13
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	4903      	ldr	r1, [pc, #12]	; (8001af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	0800486c 	.word	0x0800486c

08001afc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	220f      	movs	r2, #15
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_RCC_GetClockConfig+0x5c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_RCC_GetClockConfig+0x5c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <HAL_RCC_GetClockConfig+0x5c>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_RCC_GetClockConfig+0x5c>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	08db      	lsrs	r3, r3, #3
 8001b36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b3e:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <HAL_RCC_GetClockConfig+0x60>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 020f 	and.w	r2, r3, #15
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	601a      	str	r2, [r3, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40023c00 	.word	0x40023c00

08001b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d012      	beq.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b88:	4b69      	ldr	r3, [pc, #420]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4a68      	ldr	r2, [pc, #416]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b92:	6093      	str	r3, [r2, #8]
 8001b94:	4b66      	ldr	r3, [pc, #408]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9c:	4964      	ldr	r1, [pc, #400]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001baa:	2301      	movs	r3, #1
 8001bac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d017      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001bba:	4b5d      	ldr	r3, [pc, #372]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc8:	4959      	ldr	r1, [pc, #356]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bd8:	d101      	bne.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001be6:	2301      	movs	r3, #1
 8001be8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d017      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001bf6:	4b4e      	ldr	r3, [pc, #312]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	494a      	ldr	r1, [pc, #296]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c14:	d101      	bne.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001c16:	2301      	movs	r3, #1
 8001c18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001c22:	2301      	movs	r3, #1
 8001c24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001c32:	2301      	movs	r3, #1
 8001c34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 808b 	beq.w	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c44:	4b3a      	ldr	r3, [pc, #232]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	4a39      	ldr	r2, [pc, #228]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c50:	4b37      	ldr	r3, [pc, #220]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c5c:	4b35      	ldr	r3, [pc, #212]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a34      	ldr	r2, [pc, #208]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c68:	f7fe ffb0 	bl	8000bcc <HAL_GetTick>
 8001c6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c70:	f7fe ffac 	bl	8000bcc <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	; 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e357      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c82:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c8e:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d035      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d02e      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cac:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cb4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cba:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc6:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ccc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001cce:	4a18      	ldr	r2, [pc, #96]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001cd4:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d114      	bne.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7fe ff74 	bl	8000bcc <HAL_GetTick>
 8001ce4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7fe ff70 	bl	8000bcc <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e319      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0ee      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d16:	d111      	bne.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d26:	400b      	ands	r3, r1
 8001d28:	4901      	ldr	r1, [pc, #4]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	608b      	str	r3, [r1, #8]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40007000 	.word	0x40007000
 8001d38:	0ffffcff 	.word	0x0ffffcff
 8001d3c:	4bb1      	ldr	r3, [pc, #708]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	4ab0      	ldr	r2, [pc, #704]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d46:	6093      	str	r3, [r2, #8]
 8001d48:	4bae      	ldr	r3, [pc, #696]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d54:	49ab      	ldr	r1, [pc, #684]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d010      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d66:	4ba7      	ldr	r3, [pc, #668]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d6c:	4aa5      	ldr	r2, [pc, #660]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d76:	4ba3      	ldr	r3, [pc, #652]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d78:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d80:	49a0      	ldr	r1, [pc, #640]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00a      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d94:	4b9b      	ldr	r3, [pc, #620]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001da2:	4998      	ldr	r1, [pc, #608]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001db6:	4b93      	ldr	r3, [pc, #588]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dc4:	498f      	ldr	r1, [pc, #572]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00a      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001dd8:	4b8a      	ldr	r3, [pc, #552]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001de6:	4987      	ldr	r1, [pc, #540]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00a      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001dfa:	4b82      	ldr	r3, [pc, #520]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e08:	497e      	ldr	r1, [pc, #504]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00a      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e1c:	4b79      	ldr	r3, [pc, #484]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	4976      	ldr	r1, [pc, #472]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e3e:	4b71      	ldr	r3, [pc, #452]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e44:	f023 020c 	bic.w	r2, r3, #12
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e4c:	496d      	ldr	r1, [pc, #436]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00a      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e60:	4b68      	ldr	r3, [pc, #416]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	4965      	ldr	r1, [pc, #404]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00a      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e82:	4b60      	ldr	r3, [pc, #384]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e88:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e90:	495c      	ldr	r1, [pc, #368]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00a      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001ea4:	4b57      	ldr	r3, [pc, #348]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	4954      	ldr	r1, [pc, #336]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001ec6:	4b4f      	ldr	r3, [pc, #316]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ecc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	494b      	ldr	r1, [pc, #300]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00a      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ee8:	4b46      	ldr	r3, [pc, #280]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef6:	4943      	ldr	r1, [pc, #268]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00a      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f0a:	4b3e      	ldr	r3, [pc, #248]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f18:	493a      	ldr	r1, [pc, #232]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00a      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f2c:	4b35      	ldr	r3, [pc, #212]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f3a:	4932      	ldr	r1, [pc, #200]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d011      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f54:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f5c:	4929      	ldr	r1, [pc, #164]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f94:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f9c:	4919      	ldr	r1, [pc, #100]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00b      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fc0:	4910      	ldr	r1, [pc, #64]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d006      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80d9 	beq.w	800218e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a08      	ldr	r2, [pc, #32]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fe2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001fe6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe8:	f7fe fdf0 	bl	8000bcc <HAL_GetTick>
 8001fec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fee:	e00b      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ff0:	f7fe fdec 	bl	8000bcc <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d904      	bls.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e197      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002008:	4b6c      	ldr	r3, [pc, #432]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ed      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d021      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002024:	2b00      	cmp	r3, #0
 8002026:	d11d      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002028:	4b64      	ldr	r3, [pc, #400]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800202a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800202e:	0c1b      	lsrs	r3, r3, #16
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002036:	4b61      	ldr	r3, [pc, #388]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800203c:	0e1b      	lsrs	r3, r3, #24
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	019a      	lsls	r2, r3, #6
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	041b      	lsls	r3, r3, #16
 800204e:	431a      	orrs	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	061b      	lsls	r3, r3, #24
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	071b      	lsls	r3, r3, #28
 800205c:	4957      	ldr	r1, [pc, #348]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d004      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002078:	d00a      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002082:	2b00      	cmp	r3, #0
 8002084:	d02e      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800208e:	d129      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002090:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002096:	0c1b      	lsrs	r3, r3, #16
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800209e:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020a4:	0f1b      	lsrs	r3, r3, #28
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	019a      	lsls	r2, r3, #6
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	041b      	lsls	r3, r3, #16
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	061b      	lsls	r3, r3, #24
 80020be:	431a      	orrs	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	071b      	lsls	r3, r3, #28
 80020c4:	493d      	ldr	r1, [pc, #244]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80020cc:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020d2:	f023 021f 	bic.w	r2, r3, #31
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	3b01      	subs	r3, #1
 80020dc:	4937      	ldr	r1, [pc, #220]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01d      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020f0:	4b32      	ldr	r3, [pc, #200]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020f6:	0e1b      	lsrs	r3, r3, #24
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020fe:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002104:	0f1b      	lsrs	r3, r3, #28
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	019a      	lsls	r2, r3, #6
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	041b      	lsls	r3, r3, #16
 8002118:	431a      	orrs	r2, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	061b      	lsls	r3, r3, #24
 800211e:	431a      	orrs	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	071b      	lsls	r3, r3, #28
 8002124:	4925      	ldr	r1, [pc, #148]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d011      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	019a      	lsls	r2, r3, #6
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	041b      	lsls	r3, r3, #16
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	061b      	lsls	r3, r3, #24
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	071b      	lsls	r3, r3, #28
 8002154:	4919      	ldr	r1, [pc, #100]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a16      	ldr	r2, [pc, #88]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002162:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002166:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002168:	f7fe fd30 	bl	8000bcc <HAL_GetTick>
 800216c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002170:	f7fe fd2c 	bl	8000bcc <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0d7      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	2b01      	cmp	r3, #1
 8002192:	f040 80cd 	bne.w	8002330 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a08      	ldr	r2, [pc, #32]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800219c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a2:	f7fe fd13 	bl	8000bcc <HAL_GetTick>
 80021a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021aa:	f7fe fd0f 	bl	8000bcc <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b64      	cmp	r3, #100	; 0x64
 80021b6:	d903      	bls.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e0ba      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80021bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021c0:	4b5e      	ldr	r3, [pc, #376]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021cc:	d0ed      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d02e      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d12a      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80021f6:	4b51      	ldr	r3, [pc, #324]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002204:	4b4d      	ldr	r3, [pc, #308]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	0f1b      	lsrs	r3, r3, #28
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	019a      	lsls	r2, r3, #6
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	041b      	lsls	r3, r3, #16
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	061b      	lsls	r3, r3, #24
 8002224:	431a      	orrs	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	071b      	lsls	r3, r3, #28
 800222a:	4944      	ldr	r1, [pc, #272]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002232:	4b42      	ldr	r3, [pc, #264]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002238:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	3b01      	subs	r3, #1
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	493d      	ldr	r1, [pc, #244]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d022      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800225c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002260:	d11d      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002262:	4b36      	ldr	r3, [pc, #216]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002268:	0e1b      	lsrs	r3, r3, #24
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002270:	4b32      	ldr	r3, [pc, #200]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	0f1b      	lsrs	r3, r3, #28
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	019a      	lsls	r2, r3, #6
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	041b      	lsls	r3, r3, #16
 800228a:	431a      	orrs	r2, r3
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	061b      	lsls	r3, r3, #24
 8002290:	431a      	orrs	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	071b      	lsls	r3, r3, #28
 8002296:	4929      	ldr	r1, [pc, #164]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d028      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022aa:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b0:	0e1b      	lsrs	r3, r3, #24
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022b8:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	0c1b      	lsrs	r3, r3, #16
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	019a      	lsls	r2, r3, #6
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	041b      	lsls	r3, r3, #16
 80022d0:	431a      	orrs	r2, r3
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	061b      	lsls	r3, r3, #24
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	071b      	lsls	r3, r3, #28
 80022de:	4917      	ldr	r1, [pc, #92]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	4911      	ldr	r1, [pc, #68]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0e      	ldr	r2, [pc, #56]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002306:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002308:	f7fe fc60 	bl	8000bcc <HAL_GetTick>
 800230c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002310:	f7fe fc5c 	bl	8000bcc <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e007      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800232a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800232e:	d1ef      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3720      	adds	r7, #32
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800

08002340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e049      	b.n	80023e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d106      	bne.n	800236c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f841 	bl	80023ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3304      	adds	r3, #4
 800237c:	4619      	mov	r1, r3
 800237e:	4610      	mov	r0, r2
 8002380:	f000 fa00 	bl	8002784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b01      	cmp	r3, #1
 8002416:	d001      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e054      	b.n	80024c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a26      	ldr	r2, [pc, #152]	; (80024d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d022      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x80>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002446:	d01d      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x80>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d018      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x80>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a21      	ldr	r2, [pc, #132]	; (80024dc <HAL_TIM_Base_Start_IT+0xd8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d013      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x80>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1f      	ldr	r2, [pc, #124]	; (80024e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00e      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x80>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1e      	ldr	r2, [pc, #120]	; (80024e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d009      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x80>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1c      	ldr	r2, [pc, #112]	; (80024e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d004      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x80>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <HAL_TIM_Base_Start_IT+0xe8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d115      	bne.n	80024b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_TIM_Base_Start_IT+0xec>)
 800248c:	4013      	ands	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b06      	cmp	r3, #6
 8002494:	d015      	beq.n	80024c2 <HAL_TIM_Base_Start_IT+0xbe>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249c:	d011      	beq.n	80024c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ae:	e008      	b.n	80024c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e000      	b.n	80024c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40010000 	.word	0x40010000
 80024d8:	40000400 	.word	0x40000400
 80024dc:	40000800 	.word	0x40000800
 80024e0:	40000c00 	.word	0x40000c00
 80024e4:	40010400 	.word	0x40010400
 80024e8:	40014000 	.word	0x40014000
 80024ec:	40001800 	.word	0x40001800
 80024f0:	00010007 	.word	0x00010007

080024f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b02      	cmp	r3, #2
 8002508:	d122      	bne.n	8002550 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b02      	cmp	r3, #2
 8002516:	d11b      	bne.n	8002550 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0202 	mvn.w	r2, #2
 8002520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f905 	bl	8002746 <HAL_TIM_IC_CaptureCallback>
 800253c:	e005      	b.n	800254a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f8f7 	bl	8002732 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f908 	bl	800275a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b04      	cmp	r3, #4
 800255c:	d122      	bne.n	80025a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b04      	cmp	r3, #4
 800256a:	d11b      	bne.n	80025a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0204 	mvn.w	r2, #4
 8002574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2202      	movs	r2, #2
 800257a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f8db 	bl	8002746 <HAL_TIM_IC_CaptureCallback>
 8002590:	e005      	b.n	800259e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f8cd 	bl	8002732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f8de 	bl	800275a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d122      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d11b      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0208 	mvn.w	r2, #8
 80025c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2204      	movs	r2, #4
 80025ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f8b1 	bl	8002746 <HAL_TIM_IC_CaptureCallback>
 80025e4:	e005      	b.n	80025f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f8a3 	bl	8002732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f8b4 	bl	800275a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	2b10      	cmp	r3, #16
 8002604:	d122      	bne.n	800264c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b10      	cmp	r3, #16
 8002612:	d11b      	bne.n	800264c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0210 	mvn.w	r2, #16
 800261c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2208      	movs	r2, #8
 8002622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f887 	bl	8002746 <HAL_TIM_IC_CaptureCallback>
 8002638:	e005      	b.n	8002646 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f879 	bl	8002732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f88a 	bl	800275a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b01      	cmp	r3, #1
 8002658:	d10e      	bne.n	8002678 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b01      	cmp	r3, #1
 8002666:	d107      	bne.n	8002678 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0201 	mvn.w	r2, #1
 8002670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe f938 	bl	80008e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b80      	cmp	r3, #128	; 0x80
 8002684:	d10e      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002690:	2b80      	cmp	r3, #128	; 0x80
 8002692:	d107      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800269c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f91a 	bl	80028d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026b2:	d10e      	bne.n	80026d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026be:	2b80      	cmp	r3, #128	; 0x80
 80026c0:	d107      	bne.n	80026d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80026ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f90d 	bl	80028ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026dc:	2b40      	cmp	r3, #64	; 0x40
 80026de:	d10e      	bne.n	80026fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ea:	2b40      	cmp	r3, #64	; 0x40
 80026ec:	d107      	bne.n	80026fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f838 	bl	800276e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b20      	cmp	r3, #32
 800270a:	d10e      	bne.n	800272a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b20      	cmp	r3, #32
 8002718:	d107      	bne.n	800272a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f06f 0220 	mvn.w	r2, #32
 8002722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f8cd 	bl	80028c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a40      	ldr	r2, [pc, #256]	; (8002898 <TIM_Base_SetConfig+0x114>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d013      	beq.n	80027c4 <TIM_Base_SetConfig+0x40>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a2:	d00f      	beq.n	80027c4 <TIM_Base_SetConfig+0x40>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a3d      	ldr	r2, [pc, #244]	; (800289c <TIM_Base_SetConfig+0x118>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d00b      	beq.n	80027c4 <TIM_Base_SetConfig+0x40>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a3c      	ldr	r2, [pc, #240]	; (80028a0 <TIM_Base_SetConfig+0x11c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d007      	beq.n	80027c4 <TIM_Base_SetConfig+0x40>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a3b      	ldr	r2, [pc, #236]	; (80028a4 <TIM_Base_SetConfig+0x120>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d003      	beq.n	80027c4 <TIM_Base_SetConfig+0x40>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a3a      	ldr	r2, [pc, #232]	; (80028a8 <TIM_Base_SetConfig+0x124>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d108      	bne.n	80027d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a2f      	ldr	r2, [pc, #188]	; (8002898 <TIM_Base_SetConfig+0x114>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d02b      	beq.n	8002836 <TIM_Base_SetConfig+0xb2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e4:	d027      	beq.n	8002836 <TIM_Base_SetConfig+0xb2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a2c      	ldr	r2, [pc, #176]	; (800289c <TIM_Base_SetConfig+0x118>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d023      	beq.n	8002836 <TIM_Base_SetConfig+0xb2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a2b      	ldr	r2, [pc, #172]	; (80028a0 <TIM_Base_SetConfig+0x11c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01f      	beq.n	8002836 <TIM_Base_SetConfig+0xb2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a2a      	ldr	r2, [pc, #168]	; (80028a4 <TIM_Base_SetConfig+0x120>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01b      	beq.n	8002836 <TIM_Base_SetConfig+0xb2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a29      	ldr	r2, [pc, #164]	; (80028a8 <TIM_Base_SetConfig+0x124>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d017      	beq.n	8002836 <TIM_Base_SetConfig+0xb2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a28      	ldr	r2, [pc, #160]	; (80028ac <TIM_Base_SetConfig+0x128>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <TIM_Base_SetConfig+0xb2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a27      	ldr	r2, [pc, #156]	; (80028b0 <TIM_Base_SetConfig+0x12c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00f      	beq.n	8002836 <TIM_Base_SetConfig+0xb2>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a26      	ldr	r2, [pc, #152]	; (80028b4 <TIM_Base_SetConfig+0x130>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00b      	beq.n	8002836 <TIM_Base_SetConfig+0xb2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a25      	ldr	r2, [pc, #148]	; (80028b8 <TIM_Base_SetConfig+0x134>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d007      	beq.n	8002836 <TIM_Base_SetConfig+0xb2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a24      	ldr	r2, [pc, #144]	; (80028bc <TIM_Base_SetConfig+0x138>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d003      	beq.n	8002836 <TIM_Base_SetConfig+0xb2>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <TIM_Base_SetConfig+0x13c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d108      	bne.n	8002848 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800283c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <TIM_Base_SetConfig+0x114>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d003      	beq.n	800287c <TIM_Base_SetConfig+0xf8>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a0c      	ldr	r2, [pc, #48]	; (80028a8 <TIM_Base_SetConfig+0x124>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d103      	bne.n	8002884 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	615a      	str	r2, [r3, #20]
}
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40010000 	.word	0x40010000
 800289c:	40000400 	.word	0x40000400
 80028a0:	40000800 	.word	0x40000800
 80028a4:	40000c00 	.word	0x40000c00
 80028a8:	40010400 	.word	0x40010400
 80028ac:	40014000 	.word	0x40014000
 80028b0:	40014400 	.word	0x40014400
 80028b4:	40014800 	.word	0x40014800
 80028b8:	40001800 	.word	0x40001800
 80028bc:	40001c00 	.word	0x40001c00
 80028c0:	40002000 	.word	0x40002000

080028c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e040      	b.n	8002994 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fe f820 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2224      	movs	r2, #36	; 0x24
 800292c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0201 	bic.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f8c0 	bl	8002ac4 <UART_SetConfig>
 8002944:	4603      	mov	r3, r0
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e022      	b.n	8002994 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fb16 	bl	8002f88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800296a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800297a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 fb9d 	bl	80030cc <UART_CheckIdleState>
 8002992:	4603      	mov	r3, r0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	4613      	mov	r3, r2
 80029aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	f040 8081 	bne.w	8002ab8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <HAL_UART_Transmit+0x26>
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e079      	b.n	8002aba <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_UART_Transmit+0x38>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e072      	b.n	8002aba <HAL_UART_Transmit+0x11e>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2221      	movs	r2, #33	; 0x21
 80029e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ea:	f7fe f8ef 	bl	8000bcc <HAL_GetTick>
 80029ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	88fa      	ldrh	r2, [r7, #6]
 80029f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	88fa      	ldrh	r2, [r7, #6]
 80029fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a08:	d108      	bne.n	8002a1c <HAL_UART_Transmit+0x80>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d104      	bne.n	8002a1c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	e003      	b.n	8002a24 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002a2c:	e02c      	b.n	8002a88 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2200      	movs	r2, #0
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 fb7a 	bl	8003132 <UART_WaitOnFlagUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e038      	b.n	8002aba <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10b      	bne.n	8002a66 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	3302      	adds	r3, #2
 8002a62:	61bb      	str	r3, [r7, #24]
 8002a64:	e007      	b.n	8002a76 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	3301      	adds	r3, #1
 8002a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1cc      	bne.n	8002a2e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2140      	movs	r1, #64	; 0x40
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fb47 	bl	8003132 <UART_WaitOnFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e005      	b.n	8002aba <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e000      	b.n	8002aba <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002ab8:	2302      	movs	r3, #2
  }
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3720      	adds	r7, #32
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4ba7      	ldr	r3, [pc, #668]	; (8002d8c <UART_SetConfig+0x2c8>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	6979      	ldr	r1, [r7, #20]
 8002af8:	430b      	orrs	r3, r1
 8002afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a95      	ldr	r2, [pc, #596]	; (8002d90 <UART_SetConfig+0x2cc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d120      	bne.n	8002b82 <UART_SetConfig+0xbe>
 8002b40:	4b94      	ldr	r3, [pc, #592]	; (8002d94 <UART_SetConfig+0x2d0>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d816      	bhi.n	8002b7c <UART_SetConfig+0xb8>
 8002b4e:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <UART_SetConfig+0x90>)
 8002b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b54:	08002b65 	.word	0x08002b65
 8002b58:	08002b71 	.word	0x08002b71
 8002b5c:	08002b6b 	.word	0x08002b6b
 8002b60:	08002b77 	.word	0x08002b77
 8002b64:	2301      	movs	r3, #1
 8002b66:	77fb      	strb	r3, [r7, #31]
 8002b68:	e14f      	b.n	8002e0a <UART_SetConfig+0x346>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	77fb      	strb	r3, [r7, #31]
 8002b6e:	e14c      	b.n	8002e0a <UART_SetConfig+0x346>
 8002b70:	2304      	movs	r3, #4
 8002b72:	77fb      	strb	r3, [r7, #31]
 8002b74:	e149      	b.n	8002e0a <UART_SetConfig+0x346>
 8002b76:	2308      	movs	r3, #8
 8002b78:	77fb      	strb	r3, [r7, #31]
 8002b7a:	e146      	b.n	8002e0a <UART_SetConfig+0x346>
 8002b7c:	2310      	movs	r3, #16
 8002b7e:	77fb      	strb	r3, [r7, #31]
 8002b80:	e143      	b.n	8002e0a <UART_SetConfig+0x346>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a84      	ldr	r2, [pc, #528]	; (8002d98 <UART_SetConfig+0x2d4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d132      	bne.n	8002bf2 <UART_SetConfig+0x12e>
 8002b8c:	4b81      	ldr	r3, [pc, #516]	; (8002d94 <UART_SetConfig+0x2d0>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b0c      	cmp	r3, #12
 8002b98:	d828      	bhi.n	8002bec <UART_SetConfig+0x128>
 8002b9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ba0 <UART_SetConfig+0xdc>)
 8002b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba0:	08002bd5 	.word	0x08002bd5
 8002ba4:	08002bed 	.word	0x08002bed
 8002ba8:	08002bed 	.word	0x08002bed
 8002bac:	08002bed 	.word	0x08002bed
 8002bb0:	08002be1 	.word	0x08002be1
 8002bb4:	08002bed 	.word	0x08002bed
 8002bb8:	08002bed 	.word	0x08002bed
 8002bbc:	08002bed 	.word	0x08002bed
 8002bc0:	08002bdb 	.word	0x08002bdb
 8002bc4:	08002bed 	.word	0x08002bed
 8002bc8:	08002bed 	.word	0x08002bed
 8002bcc:	08002bed 	.word	0x08002bed
 8002bd0:	08002be7 	.word	0x08002be7
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	77fb      	strb	r3, [r7, #31]
 8002bd8:	e117      	b.n	8002e0a <UART_SetConfig+0x346>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	77fb      	strb	r3, [r7, #31]
 8002bde:	e114      	b.n	8002e0a <UART_SetConfig+0x346>
 8002be0:	2304      	movs	r3, #4
 8002be2:	77fb      	strb	r3, [r7, #31]
 8002be4:	e111      	b.n	8002e0a <UART_SetConfig+0x346>
 8002be6:	2308      	movs	r3, #8
 8002be8:	77fb      	strb	r3, [r7, #31]
 8002bea:	e10e      	b.n	8002e0a <UART_SetConfig+0x346>
 8002bec:	2310      	movs	r3, #16
 8002bee:	77fb      	strb	r3, [r7, #31]
 8002bf0:	e10b      	b.n	8002e0a <UART_SetConfig+0x346>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a69      	ldr	r2, [pc, #420]	; (8002d9c <UART_SetConfig+0x2d8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d120      	bne.n	8002c3e <UART_SetConfig+0x17a>
 8002bfc:	4b65      	ldr	r3, [pc, #404]	; (8002d94 <UART_SetConfig+0x2d0>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c06:	2b30      	cmp	r3, #48	; 0x30
 8002c08:	d013      	beq.n	8002c32 <UART_SetConfig+0x16e>
 8002c0a:	2b30      	cmp	r3, #48	; 0x30
 8002c0c:	d814      	bhi.n	8002c38 <UART_SetConfig+0x174>
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	d009      	beq.n	8002c26 <UART_SetConfig+0x162>
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d810      	bhi.n	8002c38 <UART_SetConfig+0x174>
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <UART_SetConfig+0x15c>
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	d006      	beq.n	8002c2c <UART_SetConfig+0x168>
 8002c1e:	e00b      	b.n	8002c38 <UART_SetConfig+0x174>
 8002c20:	2300      	movs	r3, #0
 8002c22:	77fb      	strb	r3, [r7, #31]
 8002c24:	e0f1      	b.n	8002e0a <UART_SetConfig+0x346>
 8002c26:	2302      	movs	r3, #2
 8002c28:	77fb      	strb	r3, [r7, #31]
 8002c2a:	e0ee      	b.n	8002e0a <UART_SetConfig+0x346>
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	77fb      	strb	r3, [r7, #31]
 8002c30:	e0eb      	b.n	8002e0a <UART_SetConfig+0x346>
 8002c32:	2308      	movs	r3, #8
 8002c34:	77fb      	strb	r3, [r7, #31]
 8002c36:	e0e8      	b.n	8002e0a <UART_SetConfig+0x346>
 8002c38:	2310      	movs	r3, #16
 8002c3a:	77fb      	strb	r3, [r7, #31]
 8002c3c:	e0e5      	b.n	8002e0a <UART_SetConfig+0x346>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a57      	ldr	r2, [pc, #348]	; (8002da0 <UART_SetConfig+0x2dc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d120      	bne.n	8002c8a <UART_SetConfig+0x1c6>
 8002c48:	4b52      	ldr	r3, [pc, #328]	; (8002d94 <UART_SetConfig+0x2d0>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c52:	2bc0      	cmp	r3, #192	; 0xc0
 8002c54:	d013      	beq.n	8002c7e <UART_SetConfig+0x1ba>
 8002c56:	2bc0      	cmp	r3, #192	; 0xc0
 8002c58:	d814      	bhi.n	8002c84 <UART_SetConfig+0x1c0>
 8002c5a:	2b80      	cmp	r3, #128	; 0x80
 8002c5c:	d009      	beq.n	8002c72 <UART_SetConfig+0x1ae>
 8002c5e:	2b80      	cmp	r3, #128	; 0x80
 8002c60:	d810      	bhi.n	8002c84 <UART_SetConfig+0x1c0>
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <UART_SetConfig+0x1a8>
 8002c66:	2b40      	cmp	r3, #64	; 0x40
 8002c68:	d006      	beq.n	8002c78 <UART_SetConfig+0x1b4>
 8002c6a:	e00b      	b.n	8002c84 <UART_SetConfig+0x1c0>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	77fb      	strb	r3, [r7, #31]
 8002c70:	e0cb      	b.n	8002e0a <UART_SetConfig+0x346>
 8002c72:	2302      	movs	r3, #2
 8002c74:	77fb      	strb	r3, [r7, #31]
 8002c76:	e0c8      	b.n	8002e0a <UART_SetConfig+0x346>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	77fb      	strb	r3, [r7, #31]
 8002c7c:	e0c5      	b.n	8002e0a <UART_SetConfig+0x346>
 8002c7e:	2308      	movs	r3, #8
 8002c80:	77fb      	strb	r3, [r7, #31]
 8002c82:	e0c2      	b.n	8002e0a <UART_SetConfig+0x346>
 8002c84:	2310      	movs	r3, #16
 8002c86:	77fb      	strb	r3, [r7, #31]
 8002c88:	e0bf      	b.n	8002e0a <UART_SetConfig+0x346>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a45      	ldr	r2, [pc, #276]	; (8002da4 <UART_SetConfig+0x2e0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d125      	bne.n	8002ce0 <UART_SetConfig+0x21c>
 8002c94:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <UART_SetConfig+0x2d0>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ca2:	d017      	beq.n	8002cd4 <UART_SetConfig+0x210>
 8002ca4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ca8:	d817      	bhi.n	8002cda <UART_SetConfig+0x216>
 8002caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cae:	d00b      	beq.n	8002cc8 <UART_SetConfig+0x204>
 8002cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cb4:	d811      	bhi.n	8002cda <UART_SetConfig+0x216>
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <UART_SetConfig+0x1fe>
 8002cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cbe:	d006      	beq.n	8002cce <UART_SetConfig+0x20a>
 8002cc0:	e00b      	b.n	8002cda <UART_SetConfig+0x216>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	77fb      	strb	r3, [r7, #31]
 8002cc6:	e0a0      	b.n	8002e0a <UART_SetConfig+0x346>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	77fb      	strb	r3, [r7, #31]
 8002ccc:	e09d      	b.n	8002e0a <UART_SetConfig+0x346>
 8002cce:	2304      	movs	r3, #4
 8002cd0:	77fb      	strb	r3, [r7, #31]
 8002cd2:	e09a      	b.n	8002e0a <UART_SetConfig+0x346>
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	77fb      	strb	r3, [r7, #31]
 8002cd8:	e097      	b.n	8002e0a <UART_SetConfig+0x346>
 8002cda:	2310      	movs	r3, #16
 8002cdc:	77fb      	strb	r3, [r7, #31]
 8002cde:	e094      	b.n	8002e0a <UART_SetConfig+0x346>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a30      	ldr	r2, [pc, #192]	; (8002da8 <UART_SetConfig+0x2e4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d125      	bne.n	8002d36 <UART_SetConfig+0x272>
 8002cea:	4b2a      	ldr	r3, [pc, #168]	; (8002d94 <UART_SetConfig+0x2d0>)
 8002cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cf8:	d017      	beq.n	8002d2a <UART_SetConfig+0x266>
 8002cfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cfe:	d817      	bhi.n	8002d30 <UART_SetConfig+0x26c>
 8002d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d04:	d00b      	beq.n	8002d1e <UART_SetConfig+0x25a>
 8002d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d0a:	d811      	bhi.n	8002d30 <UART_SetConfig+0x26c>
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <UART_SetConfig+0x254>
 8002d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d14:	d006      	beq.n	8002d24 <UART_SetConfig+0x260>
 8002d16:	e00b      	b.n	8002d30 <UART_SetConfig+0x26c>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	77fb      	strb	r3, [r7, #31]
 8002d1c:	e075      	b.n	8002e0a <UART_SetConfig+0x346>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	77fb      	strb	r3, [r7, #31]
 8002d22:	e072      	b.n	8002e0a <UART_SetConfig+0x346>
 8002d24:	2304      	movs	r3, #4
 8002d26:	77fb      	strb	r3, [r7, #31]
 8002d28:	e06f      	b.n	8002e0a <UART_SetConfig+0x346>
 8002d2a:	2308      	movs	r3, #8
 8002d2c:	77fb      	strb	r3, [r7, #31]
 8002d2e:	e06c      	b.n	8002e0a <UART_SetConfig+0x346>
 8002d30:	2310      	movs	r3, #16
 8002d32:	77fb      	strb	r3, [r7, #31]
 8002d34:	e069      	b.n	8002e0a <UART_SetConfig+0x346>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1c      	ldr	r2, [pc, #112]	; (8002dac <UART_SetConfig+0x2e8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d137      	bne.n	8002db0 <UART_SetConfig+0x2ec>
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <UART_SetConfig+0x2d0>)
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002d4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d4e:	d017      	beq.n	8002d80 <UART_SetConfig+0x2bc>
 8002d50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d54:	d817      	bhi.n	8002d86 <UART_SetConfig+0x2c2>
 8002d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d5a:	d00b      	beq.n	8002d74 <UART_SetConfig+0x2b0>
 8002d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d60:	d811      	bhi.n	8002d86 <UART_SetConfig+0x2c2>
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <UART_SetConfig+0x2aa>
 8002d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6a:	d006      	beq.n	8002d7a <UART_SetConfig+0x2b6>
 8002d6c:	e00b      	b.n	8002d86 <UART_SetConfig+0x2c2>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	77fb      	strb	r3, [r7, #31]
 8002d72:	e04a      	b.n	8002e0a <UART_SetConfig+0x346>
 8002d74:	2302      	movs	r3, #2
 8002d76:	77fb      	strb	r3, [r7, #31]
 8002d78:	e047      	b.n	8002e0a <UART_SetConfig+0x346>
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	77fb      	strb	r3, [r7, #31]
 8002d7e:	e044      	b.n	8002e0a <UART_SetConfig+0x346>
 8002d80:	2308      	movs	r3, #8
 8002d82:	77fb      	strb	r3, [r7, #31]
 8002d84:	e041      	b.n	8002e0a <UART_SetConfig+0x346>
 8002d86:	2310      	movs	r3, #16
 8002d88:	77fb      	strb	r3, [r7, #31]
 8002d8a:	e03e      	b.n	8002e0a <UART_SetConfig+0x346>
 8002d8c:	efff69f3 	.word	0xefff69f3
 8002d90:	40011000 	.word	0x40011000
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40004400 	.word	0x40004400
 8002d9c:	40004800 	.word	0x40004800
 8002da0:	40004c00 	.word	0x40004c00
 8002da4:	40005000 	.word	0x40005000
 8002da8:	40011400 	.word	0x40011400
 8002dac:	40007800 	.word	0x40007800
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a71      	ldr	r2, [pc, #452]	; (8002f7c <UART_SetConfig+0x4b8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d125      	bne.n	8002e06 <UART_SetConfig+0x342>
 8002dba:	4b71      	ldr	r3, [pc, #452]	; (8002f80 <UART_SetConfig+0x4bc>)
 8002dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002dc4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002dc8:	d017      	beq.n	8002dfa <UART_SetConfig+0x336>
 8002dca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002dce:	d817      	bhi.n	8002e00 <UART_SetConfig+0x33c>
 8002dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd4:	d00b      	beq.n	8002dee <UART_SetConfig+0x32a>
 8002dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dda:	d811      	bhi.n	8002e00 <UART_SetConfig+0x33c>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <UART_SetConfig+0x324>
 8002de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de4:	d006      	beq.n	8002df4 <UART_SetConfig+0x330>
 8002de6:	e00b      	b.n	8002e00 <UART_SetConfig+0x33c>
 8002de8:	2300      	movs	r3, #0
 8002dea:	77fb      	strb	r3, [r7, #31]
 8002dec:	e00d      	b.n	8002e0a <UART_SetConfig+0x346>
 8002dee:	2302      	movs	r3, #2
 8002df0:	77fb      	strb	r3, [r7, #31]
 8002df2:	e00a      	b.n	8002e0a <UART_SetConfig+0x346>
 8002df4:	2304      	movs	r3, #4
 8002df6:	77fb      	strb	r3, [r7, #31]
 8002df8:	e007      	b.n	8002e0a <UART_SetConfig+0x346>
 8002dfa:	2308      	movs	r3, #8
 8002dfc:	77fb      	strb	r3, [r7, #31]
 8002dfe:	e004      	b.n	8002e0a <UART_SetConfig+0x346>
 8002e00:	2310      	movs	r3, #16
 8002e02:	77fb      	strb	r3, [r7, #31]
 8002e04:	e001      	b.n	8002e0a <UART_SetConfig+0x346>
 8002e06:	2310      	movs	r3, #16
 8002e08:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e12:	d15a      	bne.n	8002eca <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8002e14:	7ffb      	ldrb	r3, [r7, #31]
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d827      	bhi.n	8002e6a <UART_SetConfig+0x3a6>
 8002e1a:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <UART_SetConfig+0x35c>)
 8002e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e20:	08002e45 	.word	0x08002e45
 8002e24:	08002e4d 	.word	0x08002e4d
 8002e28:	08002e55 	.word	0x08002e55
 8002e2c:	08002e6b 	.word	0x08002e6b
 8002e30:	08002e5b 	.word	0x08002e5b
 8002e34:	08002e6b 	.word	0x08002e6b
 8002e38:	08002e6b 	.word	0x08002e6b
 8002e3c:	08002e6b 	.word	0x08002e6b
 8002e40:	08002e63 	.word	0x08002e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e44:	f7fe fe32 	bl	8001aac <HAL_RCC_GetPCLK1Freq>
 8002e48:	61b8      	str	r0, [r7, #24]
        break;
 8002e4a:	e013      	b.n	8002e74 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e4c:	f7fe fe42 	bl	8001ad4 <HAL_RCC_GetPCLK2Freq>
 8002e50:	61b8      	str	r0, [r7, #24]
        break;
 8002e52:	e00f      	b.n	8002e74 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e54:	4b4b      	ldr	r3, [pc, #300]	; (8002f84 <UART_SetConfig+0x4c0>)
 8002e56:	61bb      	str	r3, [r7, #24]
        break;
 8002e58:	e00c      	b.n	8002e74 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e5a:	f7fe fd65 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 8002e5e:	61b8      	str	r0, [r7, #24]
        break;
 8002e60:	e008      	b.n	8002e74 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e66:	61bb      	str	r3, [r7, #24]
        break;
 8002e68:	e004      	b.n	8002e74 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	77bb      	strb	r3, [r7, #30]
        break;
 8002e72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d074      	beq.n	8002f64 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	005a      	lsls	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	441a      	add	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	d916      	bls.n	8002ec4 <UART_SetConfig+0x400>
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9c:	d212      	bcs.n	8002ec4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	f023 030f 	bic.w	r3, r3, #15
 8002ea6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	085b      	lsrs	r3, r3, #1
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	89fb      	ldrh	r3, [r7, #14]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	89fa      	ldrh	r2, [r7, #14]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	e04f      	b.n	8002f64 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	77bb      	strb	r3, [r7, #30]
 8002ec8:	e04c      	b.n	8002f64 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002eca:	7ffb      	ldrb	r3, [r7, #31]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d828      	bhi.n	8002f22 <UART_SetConfig+0x45e>
 8002ed0:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <UART_SetConfig+0x414>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002efd 	.word	0x08002efd
 8002edc:	08002f05 	.word	0x08002f05
 8002ee0:	08002f0d 	.word	0x08002f0d
 8002ee4:	08002f23 	.word	0x08002f23
 8002ee8:	08002f13 	.word	0x08002f13
 8002eec:	08002f23 	.word	0x08002f23
 8002ef0:	08002f23 	.word	0x08002f23
 8002ef4:	08002f23 	.word	0x08002f23
 8002ef8:	08002f1b 	.word	0x08002f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002efc:	f7fe fdd6 	bl	8001aac <HAL_RCC_GetPCLK1Freq>
 8002f00:	61b8      	str	r0, [r7, #24]
        break;
 8002f02:	e013      	b.n	8002f2c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f04:	f7fe fde6 	bl	8001ad4 <HAL_RCC_GetPCLK2Freq>
 8002f08:	61b8      	str	r0, [r7, #24]
        break;
 8002f0a:	e00f      	b.n	8002f2c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <UART_SetConfig+0x4c0>)
 8002f0e:	61bb      	str	r3, [r7, #24]
        break;
 8002f10:	e00c      	b.n	8002f2c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f12:	f7fe fd09 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 8002f16:	61b8      	str	r0, [r7, #24]
        break;
 8002f18:	e008      	b.n	8002f2c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f1e:	61bb      	str	r3, [r7, #24]
        break;
 8002f20:	e004      	b.n	8002f2c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	77bb      	strb	r3, [r7, #30]
        break;
 8002f2a:	bf00      	nop
    }

    if (pclk != 0U)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d018      	beq.n	8002f64 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	085a      	lsrs	r2, r3, #1
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	441a      	add	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b0f      	cmp	r3, #15
 8002f4a:	d909      	bls.n	8002f60 <UART_SetConfig+0x49c>
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f52:	d205      	bcs.n	8002f60 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	e001      	b.n	8002f64 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f70:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40007c00 	.word	0x40007c00
 8002f80:	40023800 	.word	0x40023800
 8002f84:	00f42400 	.word	0x00f42400

08002f88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00a      	beq.n	800305c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01a      	beq.n	800309e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003086:	d10a      	bne.n	800309e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	605a      	str	r2, [r3, #4]
  }
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030dc:	f7fd fd76 	bl	8000bcc <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d10e      	bne.n	800310e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f817 	bl	8003132 <UART_WaitOnFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e00d      	b.n	800312a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b09c      	sub	sp, #112	; 0x70
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003142:	e0a5      	b.n	8003290 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	f000 80a1 	beq.w	8003290 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314e:	f7fd fd3d 	bl	8000bcc <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800315a:	429a      	cmp	r2, r3
 800315c:	d302      	bcc.n	8003164 <UART_WaitOnFlagUntilTimeout+0x32>
 800315e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003160:	2b00      	cmp	r3, #0
 8003162:	d13e      	bne.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800316c:	e853 3f00 	ldrex	r3, [r3]
 8003170:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003174:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003178:	667b      	str	r3, [r7, #100]	; 0x64
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003182:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003184:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003188:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800318a:	e841 2300 	strex	r3, r2, [r1]
 800318e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e6      	bne.n	8003164 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3308      	adds	r3, #8
 800319c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a0:	e853 3f00 	ldrex	r3, [r3]
 80031a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	663b      	str	r3, [r7, #96]	; 0x60
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3308      	adds	r3, #8
 80031b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80031b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80031bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031be:	e841 2300 	strex	r3, r2, [r1]
 80031c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80031c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e5      	bne.n	8003196 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e067      	b.n	80032b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d04f      	beq.n	8003290 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031fe:	d147      	bne.n	8003290 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003208:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003212:	e853 3f00 	ldrex	r3, [r3]
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800321e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003228:	637b      	str	r3, [r7, #52]	; 0x34
 800322a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800322e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003230:	e841 2300 	strex	r3, r2, [r1]
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1e6      	bne.n	800320a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3308      	adds	r3, #8
 8003242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	e853 3f00 	ldrex	r3, [r3]
 800324a:	613b      	str	r3, [r7, #16]
   return(result);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f023 0301 	bic.w	r3, r3, #1
 8003252:	66bb      	str	r3, [r7, #104]	; 0x68
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3308      	adds	r3, #8
 800325a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800325c:	623a      	str	r2, [r7, #32]
 800325e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003260:	69f9      	ldr	r1, [r7, #28]
 8003262:	6a3a      	ldr	r2, [r7, #32]
 8003264:	e841 2300 	strex	r3, r2, [r1]
 8003268:	61bb      	str	r3, [r7, #24]
   return(result);
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1e5      	bne.n	800323c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e010      	b.n	80032b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69da      	ldr	r2, [r3, #28]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	4013      	ands	r3, r2
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	429a      	cmp	r2, r3
 800329e:	bf0c      	ite	eq
 80032a0:	2301      	moveq	r3, #1
 80032a2:	2300      	movne	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	f43f af4a 	beq.w	8003144 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3770      	adds	r7, #112	; 0x70
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b085      	sub	sp, #20
 80032be:	af00      	add	r7, sp, #0
 80032c0:	4603      	mov	r3, r0
 80032c2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80032c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032cc:	2b84      	cmp	r3, #132	; 0x84
 80032ce:	d005      	beq.n	80032dc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80032d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	3303      	adds	r3, #3
 80032da:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80032dc:	68fb      	ldr	r3, [r7, #12]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80032ee:	f000 fae9 	bl	80038c4 <vTaskStartScheduler>
  
  return osOK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80032f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af04      	add	r7, sp, #16
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d020      	beq.n	800334c <osThreadCreate+0x54>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01c      	beq.n	800334c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685c      	ldr	r4, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681d      	ldr	r5, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691e      	ldr	r6, [r3, #16]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ffc8 	bl	80032ba <makeFreeRtosPriority>
 800332a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003334:	9202      	str	r2, [sp, #8]
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	9100      	str	r1, [sp, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	4632      	mov	r2, r6
 800333e:	4629      	mov	r1, r5
 8003340:	4620      	mov	r0, r4
 8003342:	f000 f8ed 	bl	8003520 <xTaskCreateStatic>
 8003346:	4603      	mov	r3, r0
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	e01c      	b.n	8003386 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685c      	ldr	r4, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003358:	b29e      	uxth	r6, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff ffaa 	bl	80032ba <makeFreeRtosPriority>
 8003366:	4602      	mov	r2, r0
 8003368:	f107 030c 	add.w	r3, r7, #12
 800336c:	9301      	str	r3, [sp, #4]
 800336e:	9200      	str	r2, [sp, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4632      	mov	r2, r6
 8003374:	4629      	mov	r1, r5
 8003376:	4620      	mov	r0, r4
 8003378:	f000 f935 	bl	80035e6 <xTaskCreate>
 800337c:	4603      	mov	r3, r0
 800337e:	2b01      	cmp	r3, #1
 8003380:	d001      	beq.n	8003386 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003382:	2300      	movs	r3, #0
 8003384:	e000      	b.n	8003388 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003386:	68fb      	ldr	r3, [r7, #12]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003390 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <osDelay+0x16>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	e000      	b.n	80033a8 <osDelay+0x18>
 80033a6:	2301      	movs	r3, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fa55 	bl	8003858 <vTaskDelay>
  
  return osOK;
 80033ae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f103 0208 	add.w	r2, r3, #8
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f04f 32ff 	mov.w	r2, #4294967295
 80033d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f103 0208 	add.w	r2, r3, #8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f103 0208 	add.w	r2, r3, #8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003412:	b480      	push	{r7}
 8003414:	b085      	sub	sp, #20
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	601a      	str	r2, [r3, #0]
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800345a:	b480      	push	{r7}
 800345c:	b085      	sub	sp, #20
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d103      	bne.n	800347a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	e00c      	b.n	8003494 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3308      	adds	r3, #8
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	e002      	b.n	8003488 <vListInsert+0x2e>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	429a      	cmp	r2, r3
 8003492:	d2f6      	bcs.n	8003482 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	601a      	str	r2, [r3, #0]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6892      	ldr	r2, [r2, #8]
 80034e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6852      	ldr	r2, [r2, #4]
 80034ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d103      	bne.n	8003500 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	1e5a      	subs	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08e      	sub	sp, #56	; 0x38
 8003524:	af04      	add	r7, sp, #16
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800352e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10c      	bne.n	800354e <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	b672      	cpsid	i
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	b662      	cpsie	i
 8003548:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800354a:	bf00      	nop
 800354c:	e7fe      	b.n	800354c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800354e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10c      	bne.n	800356e <xTaskCreateStatic+0x4e>
	__asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	b672      	cpsid	i
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	b662      	cpsie	i
 8003568:	61fb      	str	r3, [r7, #28]
}
 800356a:	bf00      	nop
 800356c:	e7fe      	b.n	800356c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800356e:	2354      	movs	r3, #84	; 0x54
 8003570:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	2b54      	cmp	r3, #84	; 0x54
 8003576:	d00c      	beq.n	8003592 <xTaskCreateStatic+0x72>
	__asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357c:	b672      	cpsid	i
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	b662      	cpsie	i
 800358c:	61bb      	str	r3, [r7, #24]
}
 800358e:	bf00      	nop
 8003590:	e7fe      	b.n	8003590 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003592:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003596:	2b00      	cmp	r3, #0
 8003598:	d01e      	beq.n	80035d8 <xTaskCreateStatic+0xb8>
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01b      	beq.n	80035d8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	2202      	movs	r2, #2
 80035ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035b2:	2300      	movs	r3, #0
 80035b4:	9303      	str	r3, [sp, #12]
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	9302      	str	r3, [sp, #8]
 80035ba:	f107 0314 	add.w	r3, r7, #20
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f850 	bl	8003670 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035d2:	f000 f8d7 	bl	8003784 <prvAddNewTaskToReadyList>
 80035d6:	e001      	b.n	80035dc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035dc:	697b      	ldr	r3, [r7, #20]
	}
 80035de:	4618      	mov	r0, r3
 80035e0:	3728      	adds	r7, #40	; 0x28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b08c      	sub	sp, #48	; 0x30
 80035ea:	af04      	add	r7, sp, #16
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	603b      	str	r3, [r7, #0]
 80035f2:	4613      	mov	r3, r2
 80035f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 febe 	bl	800437c <pvPortMalloc>
 8003600:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00e      	beq.n	8003626 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003608:	2054      	movs	r0, #84	; 0x54
 800360a:	f000 feb7 	bl	800437c <pvPortMalloc>
 800360e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
 800361c:	e005      	b.n	800362a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800361e:	6978      	ldr	r0, [r7, #20]
 8003620:	f000 ff76 	bl	8004510 <vPortFree>
 8003624:	e001      	b.n	800362a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d017      	beq.n	8003660 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003638:	88fa      	ldrh	r2, [r7, #6]
 800363a:	2300      	movs	r3, #0
 800363c:	9303      	str	r3, [sp, #12]
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	9302      	str	r3, [sp, #8]
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f80e 	bl	8003670 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003654:	69f8      	ldr	r0, [r7, #28]
 8003656:	f000 f895 	bl	8003784 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800365a:	2301      	movs	r3, #1
 800365c:	61bb      	str	r3, [r7, #24]
 800365e:	e002      	b.n	8003666 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003660:	f04f 33ff 	mov.w	r3, #4294967295
 8003664:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003666:	69bb      	ldr	r3, [r7, #24]
	}
 8003668:	4618      	mov	r0, r3
 800366a:	3720      	adds	r7, #32
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003688:	440b      	add	r3, r1
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f023 0307 	bic.w	r3, r3, #7
 8003696:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00c      	beq.n	80036bc <prvInitialiseNewTask+0x4c>
	__asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a6:	b672      	cpsid	i
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	b662      	cpsie	i
 80036b6:	617b      	str	r3, [r7, #20]
}
 80036b8:	bf00      	nop
 80036ba:	e7fe      	b.n	80036ba <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d01f      	beq.n	8003702 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
 80036c6:	e012      	b.n	80036ee <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	4413      	add	r3, r2
 80036ce:	7819      	ldrb	r1, [r3, #0]
 80036d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	4413      	add	r3, r2
 80036d6:	3334      	adds	r3, #52	; 0x34
 80036d8:	460a      	mov	r2, r1
 80036da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d006      	beq.n	80036f6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	3301      	adds	r3, #1
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	2b0f      	cmp	r3, #15
 80036f2:	d9e9      	bls.n	80036c8 <prvInitialiseNewTask+0x58>
 80036f4:	e000      	b.n	80036f8 <prvInitialiseNewTask+0x88>
			{
				break;
 80036f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003700:	e003      	b.n	800370a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	2b06      	cmp	r3, #6
 800370e:	d901      	bls.n	8003714 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003710:	2306      	movs	r3, #6
 8003712:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003718:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800371e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	2200      	movs	r2, #0
 8003724:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	3304      	adds	r3, #4
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fe64 	bl	80033f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	3318      	adds	r3, #24
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff fe5f 	bl	80033f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800373e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003742:	f1c3 0207 	rsb	r2, r3, #7
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800374e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	2200      	movs	r2, #0
 8003754:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	68f9      	ldr	r1, [r7, #12]
 8003762:	69b8      	ldr	r0, [r7, #24]
 8003764:	f000 fc14 	bl	8003f90 <pxPortInitialiseStack>
 8003768:	4602      	mov	r2, r0
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003778:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800377a:	bf00      	nop
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800378c:	f000 fd0e 	bl	80041ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003790:	4b2a      	ldr	r3, [pc, #168]	; (800383c <prvAddNewTaskToReadyList+0xb8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3301      	adds	r3, #1
 8003796:	4a29      	ldr	r2, [pc, #164]	; (800383c <prvAddNewTaskToReadyList+0xb8>)
 8003798:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800379a:	4b29      	ldr	r3, [pc, #164]	; (8003840 <prvAddNewTaskToReadyList+0xbc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037a2:	4a27      	ldr	r2, [pc, #156]	; (8003840 <prvAddNewTaskToReadyList+0xbc>)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037a8:	4b24      	ldr	r3, [pc, #144]	; (800383c <prvAddNewTaskToReadyList+0xb8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d110      	bne.n	80037d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037b0:	f000 fac8 	bl	8003d44 <prvInitialiseTaskLists>
 80037b4:	e00d      	b.n	80037d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037b6:	4b23      	ldr	r3, [pc, #140]	; (8003844 <prvAddNewTaskToReadyList+0xc0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037be:	4b20      	ldr	r3, [pc, #128]	; (8003840 <prvAddNewTaskToReadyList+0xbc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d802      	bhi.n	80037d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037cc:	4a1c      	ldr	r2, [pc, #112]	; (8003840 <prvAddNewTaskToReadyList+0xbc>)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037d2:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <prvAddNewTaskToReadyList+0xc4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	4a1b      	ldr	r2, [pc, #108]	; (8003848 <prvAddNewTaskToReadyList+0xc4>)
 80037da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	2201      	movs	r2, #1
 80037e2:	409a      	lsls	r2, r3
 80037e4:	4b19      	ldr	r3, [pc, #100]	; (800384c <prvAddNewTaskToReadyList+0xc8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	4a18      	ldr	r2, [pc, #96]	; (800384c <prvAddNewTaskToReadyList+0xc8>)
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4a15      	ldr	r2, [pc, #84]	; (8003850 <prvAddNewTaskToReadyList+0xcc>)
 80037fc:	441a      	add	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3304      	adds	r3, #4
 8003802:	4619      	mov	r1, r3
 8003804:	4610      	mov	r0, r2
 8003806:	f7ff fe04 	bl	8003412 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800380a:	f000 fd03 	bl	8004214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <prvAddNewTaskToReadyList+0xc0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00e      	beq.n	8003834 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003816:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <prvAddNewTaskToReadyList+0xbc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	429a      	cmp	r2, r3
 8003822:	d207      	bcs.n	8003834 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <prvAddNewTaskToReadyList+0xd0>)
 8003826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003834:	bf00      	nop
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000380 	.word	0x20000380
 8003840:	20000280 	.word	0x20000280
 8003844:	2000038c 	.word	0x2000038c
 8003848:	2000039c 	.word	0x2000039c
 800384c:	20000388 	.word	0x20000388
 8003850:	20000284 	.word	0x20000284
 8003854:	e000ed04 	.word	0xe000ed04

08003858 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d019      	beq.n	800389e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800386a:	4b14      	ldr	r3, [pc, #80]	; (80038bc <vTaskDelay+0x64>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00c      	beq.n	800388c <vTaskDelay+0x34>
	__asm volatile
 8003872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003876:	b672      	cpsid	i
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	b662      	cpsie	i
 8003886:	60bb      	str	r3, [r7, #8]
}
 8003888:	bf00      	nop
 800388a:	e7fe      	b.n	800388a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800388c:	f000 f87e 	bl	800398c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003890:	2100      	movs	r1, #0
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fb16 	bl	8003ec4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003898:	f000 f886 	bl	80039a8 <xTaskResumeAll>
 800389c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d107      	bne.n	80038b4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <vTaskDelay+0x68>)
 80038a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	200003a8 	.word	0x200003a8
 80038c0:	e000ed04 	.word	0xe000ed04

080038c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	; 0x28
 80038c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038d2:	463a      	mov	r2, r7
 80038d4:	1d39      	adds	r1, r7, #4
 80038d6:	f107 0308 	add.w	r3, r7, #8
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fc fe14 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038e0:	6839      	ldr	r1, [r7, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	9202      	str	r2, [sp, #8]
 80038e8:	9301      	str	r3, [sp, #4]
 80038ea:	2300      	movs	r3, #0
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	2300      	movs	r3, #0
 80038f0:	460a      	mov	r2, r1
 80038f2:	4920      	ldr	r1, [pc, #128]	; (8003974 <vTaskStartScheduler+0xb0>)
 80038f4:	4820      	ldr	r0, [pc, #128]	; (8003978 <vTaskStartScheduler+0xb4>)
 80038f6:	f7ff fe13 	bl	8003520 <xTaskCreateStatic>
 80038fa:	4603      	mov	r3, r0
 80038fc:	4a1f      	ldr	r2, [pc, #124]	; (800397c <vTaskStartScheduler+0xb8>)
 80038fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003900:	4b1e      	ldr	r3, [pc, #120]	; (800397c <vTaskStartScheduler+0xb8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003908:	2301      	movs	r3, #1
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	e001      	b.n	8003912 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d118      	bne.n	800394a <vTaskStartScheduler+0x86>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	b672      	cpsid	i
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	b662      	cpsie	i
 800392c:	613b      	str	r3, [r7, #16]
}
 800392e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003930:	4b13      	ldr	r3, [pc, #76]	; (8003980 <vTaskStartScheduler+0xbc>)
 8003932:	f04f 32ff 	mov.w	r2, #4294967295
 8003936:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003938:	4b12      	ldr	r3, [pc, #72]	; (8003984 <vTaskStartScheduler+0xc0>)
 800393a:	2201      	movs	r2, #1
 800393c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800393e:	4b12      	ldr	r3, [pc, #72]	; (8003988 <vTaskStartScheduler+0xc4>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003944:	f000 fbb4 	bl	80040b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003948:	e010      	b.n	800396c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d10c      	bne.n	800396c <vTaskStartScheduler+0xa8>
	__asm volatile
 8003952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003956:	b672      	cpsid	i
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	b662      	cpsie	i
 8003966:	60fb      	str	r3, [r7, #12]
}
 8003968:	bf00      	nop
 800396a:	e7fe      	b.n	800396a <vTaskStartScheduler+0xa6>
}
 800396c:	bf00      	nop
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	08004854 	.word	0x08004854
 8003978:	08003d15 	.word	0x08003d15
 800397c:	200003a4 	.word	0x200003a4
 8003980:	200003a0 	.word	0x200003a0
 8003984:	2000038c 	.word	0x2000038c
 8003988:	20000384 	.word	0x20000384

0800398c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <vTaskSuspendAll+0x18>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3301      	adds	r3, #1
 8003996:	4a03      	ldr	r2, [pc, #12]	; (80039a4 <vTaskSuspendAll+0x18>)
 8003998:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800399a:	bf00      	nop
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	200003a8 	.word	0x200003a8

080039a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039b6:	4b42      	ldr	r3, [pc, #264]	; (8003ac0 <xTaskResumeAll+0x118>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10c      	bne.n	80039d8 <xTaskResumeAll+0x30>
	__asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c2:	b672      	cpsid	i
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	b662      	cpsie	i
 80039d2:	603b      	str	r3, [r7, #0]
}
 80039d4:	bf00      	nop
 80039d6:	e7fe      	b.n	80039d6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039d8:	f000 fbe8 	bl	80041ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039dc:	4b38      	ldr	r3, [pc, #224]	; (8003ac0 <xTaskResumeAll+0x118>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	4a37      	ldr	r2, [pc, #220]	; (8003ac0 <xTaskResumeAll+0x118>)
 80039e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039e6:	4b36      	ldr	r3, [pc, #216]	; (8003ac0 <xTaskResumeAll+0x118>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d161      	bne.n	8003ab2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039ee:	4b35      	ldr	r3, [pc, #212]	; (8003ac4 <xTaskResumeAll+0x11c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d05d      	beq.n	8003ab2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039f6:	e02e      	b.n	8003a56 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039f8:	4b33      	ldr	r3, [pc, #204]	; (8003ac8 <xTaskResumeAll+0x120>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3318      	adds	r3, #24
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff fd61 	bl	80034cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fd5c 	bl	80034cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	2201      	movs	r2, #1
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	4b2b      	ldr	r3, [pc, #172]	; (8003acc <xTaskResumeAll+0x124>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	4a2a      	ldr	r2, [pc, #168]	; (8003acc <xTaskResumeAll+0x124>)
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4a27      	ldr	r2, [pc, #156]	; (8003ad0 <xTaskResumeAll+0x128>)
 8003a34:	441a      	add	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	f7ff fce8 	bl	8003412 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a46:	4b23      	ldr	r3, [pc, #140]	; (8003ad4 <xTaskResumeAll+0x12c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d302      	bcc.n	8003a56 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003a50:	4b21      	ldr	r3, [pc, #132]	; (8003ad8 <xTaskResumeAll+0x130>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a56:	4b1c      	ldr	r3, [pc, #112]	; (8003ac8 <xTaskResumeAll+0x120>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1cc      	bne.n	80039f8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a64:	f000 fa0e 	bl	8003e84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a68:	4b1c      	ldr	r3, [pc, #112]	; (8003adc <xTaskResumeAll+0x134>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d010      	beq.n	8003a96 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a74:	f000 f836 	bl	8003ae4 <xTaskIncrementTick>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003a7e:	4b16      	ldr	r3, [pc, #88]	; (8003ad8 <xTaskResumeAll+0x130>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f1      	bne.n	8003a74 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <xTaskResumeAll+0x134>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <xTaskResumeAll+0x130>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003aa2:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <xTaskResumeAll+0x138>)
 8003aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ab2:	f000 fbaf 	bl	8004214 <vPortExitCritical>

	return xAlreadyYielded;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	200003a8 	.word	0x200003a8
 8003ac4:	20000380 	.word	0x20000380
 8003ac8:	20000340 	.word	0x20000340
 8003acc:	20000388 	.word	0x20000388
 8003ad0:	20000284 	.word	0x20000284
 8003ad4:	20000280 	.word	0x20000280
 8003ad8:	20000394 	.word	0x20000394
 8003adc:	20000390 	.word	0x20000390
 8003ae0:	e000ed04 	.word	0xe000ed04

08003ae4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aee:	4b4f      	ldr	r3, [pc, #316]	; (8003c2c <xTaskIncrementTick+0x148>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f040 808a 	bne.w	8003c0c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003af8:	4b4d      	ldr	r3, [pc, #308]	; (8003c30 <xTaskIncrementTick+0x14c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3301      	adds	r3, #1
 8003afe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b00:	4a4b      	ldr	r2, [pc, #300]	; (8003c30 <xTaskIncrementTick+0x14c>)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d122      	bne.n	8003b52 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b0c:	4b49      	ldr	r3, [pc, #292]	; (8003c34 <xTaskIncrementTick+0x150>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00c      	beq.n	8003b30 <xTaskIncrementTick+0x4c>
	__asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	b672      	cpsid	i
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	b662      	cpsie	i
 8003b2a:	603b      	str	r3, [r7, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	e7fe      	b.n	8003b2e <xTaskIncrementTick+0x4a>
 8003b30:	4b40      	ldr	r3, [pc, #256]	; (8003c34 <xTaskIncrementTick+0x150>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	4b40      	ldr	r3, [pc, #256]	; (8003c38 <xTaskIncrementTick+0x154>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a3e      	ldr	r2, [pc, #248]	; (8003c34 <xTaskIncrementTick+0x150>)
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4a3e      	ldr	r2, [pc, #248]	; (8003c38 <xTaskIncrementTick+0x154>)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	4b3d      	ldr	r3, [pc, #244]	; (8003c3c <xTaskIncrementTick+0x158>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	4a3c      	ldr	r2, [pc, #240]	; (8003c3c <xTaskIncrementTick+0x158>)
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	f000 f999 	bl	8003e84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b52:	4b3b      	ldr	r3, [pc, #236]	; (8003c40 <xTaskIncrementTick+0x15c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d348      	bcc.n	8003bee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b5c:	4b35      	ldr	r3, [pc, #212]	; (8003c34 <xTaskIncrementTick+0x150>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b66:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <xTaskIncrementTick+0x15c>)
 8003b68:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6c:	601a      	str	r2, [r3, #0]
					break;
 8003b6e:	e03e      	b.n	8003bee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b70:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <xTaskIncrementTick+0x150>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d203      	bcs.n	8003b90 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b88:	4a2d      	ldr	r2, [pc, #180]	; (8003c40 <xTaskIncrementTick+0x15c>)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b8e:	e02e      	b.n	8003bee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	3304      	adds	r3, #4
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff fc99 	bl	80034cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	3318      	adds	r3, #24
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff fc90 	bl	80034cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	4b23      	ldr	r3, [pc, #140]	; (8003c44 <xTaskIncrementTick+0x160>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	4a22      	ldr	r2, [pc, #136]	; (8003c44 <xTaskIncrementTick+0x160>)
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4a1f      	ldr	r2, [pc, #124]	; (8003c48 <xTaskIncrementTick+0x164>)
 8003bcc:	441a      	add	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	f7ff fc1c 	bl	8003412 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bde:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <xTaskIncrementTick+0x168>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d3b9      	bcc.n	8003b5c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8003be8:	2301      	movs	r3, #1
 8003bea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bec:	e7b6      	b.n	8003b5c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bee:	4b17      	ldr	r3, [pc, #92]	; (8003c4c <xTaskIncrementTick+0x168>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf4:	4914      	ldr	r1, [pc, #80]	; (8003c48 <xTaskIncrementTick+0x164>)
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d907      	bls.n	8003c16 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8003c06:	2301      	movs	r3, #1
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	e004      	b.n	8003c16 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c0c:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <xTaskIncrementTick+0x16c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3301      	adds	r3, #1
 8003c12:	4a0f      	ldr	r2, [pc, #60]	; (8003c50 <xTaskIncrementTick+0x16c>)
 8003c14:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c16:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <xTaskIncrementTick+0x170>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c22:	697b      	ldr	r3, [r7, #20]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	200003a8 	.word	0x200003a8
 8003c30:	20000384 	.word	0x20000384
 8003c34:	20000338 	.word	0x20000338
 8003c38:	2000033c 	.word	0x2000033c
 8003c3c:	20000398 	.word	0x20000398
 8003c40:	200003a0 	.word	0x200003a0
 8003c44:	20000388 	.word	0x20000388
 8003c48:	20000284 	.word	0x20000284
 8003c4c:	20000280 	.word	0x20000280
 8003c50:	20000390 	.word	0x20000390
 8003c54:	20000394 	.word	0x20000394

08003c58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c5e:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <vTaskSwitchContext+0xa8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c66:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <vTaskSwitchContext+0xac>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c6c:	e041      	b.n	8003cf2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003c6e:	4b25      	ldr	r3, [pc, #148]	; (8003d04 <vTaskSwitchContext+0xac>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c74:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <vTaskSwitchContext+0xb0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	fab3 f383 	clz	r3, r3
 8003c80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003c82:	7afb      	ldrb	r3, [r7, #11]
 8003c84:	f1c3 031f 	rsb	r3, r3, #31
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	4920      	ldr	r1, [pc, #128]	; (8003d0c <vTaskSwitchContext+0xb4>)
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10c      	bne.n	8003cb8 <vTaskSwitchContext+0x60>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	b672      	cpsid	i
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	b662      	cpsie	i
 8003cb2:	607b      	str	r3, [r7, #4]
}
 8003cb4:	bf00      	nop
 8003cb6:	e7fe      	b.n	8003cb6 <vTaskSwitchContext+0x5e>
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4a12      	ldr	r2, [pc, #72]	; (8003d0c <vTaskSwitchContext+0xb4>)
 8003cc4:	4413      	add	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	3308      	adds	r3, #8
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d104      	bne.n	8003ce8 <vTaskSwitchContext+0x90>
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	605a      	str	r2, [r3, #4]
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	4a08      	ldr	r2, [pc, #32]	; (8003d10 <vTaskSwitchContext+0xb8>)
 8003cf0:	6013      	str	r3, [r2, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	200003a8 	.word	0x200003a8
 8003d04:	20000394 	.word	0x20000394
 8003d08:	20000388 	.word	0x20000388
 8003d0c:	20000284 	.word	0x20000284
 8003d10:	20000280 	.word	0x20000280

08003d14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d1c:	f000 f852 	bl	8003dc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d20:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <prvIdleTask+0x28>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d9f9      	bls.n	8003d1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <prvIdleTask+0x2c>)
 8003d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d38:	e7f0      	b.n	8003d1c <prvIdleTask+0x8>
 8003d3a:	bf00      	nop
 8003d3c:	20000284 	.word	0x20000284
 8003d40:	e000ed04 	.word	0xe000ed04

08003d44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	e00c      	b.n	8003d6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4a12      	ldr	r2, [pc, #72]	; (8003da4 <prvInitialiseTaskLists+0x60>)
 8003d5c:	4413      	add	r3, r2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff fb2a 	bl	80033b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3301      	adds	r3, #1
 8003d68:	607b      	str	r3, [r7, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b06      	cmp	r3, #6
 8003d6e:	d9ef      	bls.n	8003d50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d70:	480d      	ldr	r0, [pc, #52]	; (8003da8 <prvInitialiseTaskLists+0x64>)
 8003d72:	f7ff fb21 	bl	80033b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d76:	480d      	ldr	r0, [pc, #52]	; (8003dac <prvInitialiseTaskLists+0x68>)
 8003d78:	f7ff fb1e 	bl	80033b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d7c:	480c      	ldr	r0, [pc, #48]	; (8003db0 <prvInitialiseTaskLists+0x6c>)
 8003d7e:	f7ff fb1b 	bl	80033b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d82:	480c      	ldr	r0, [pc, #48]	; (8003db4 <prvInitialiseTaskLists+0x70>)
 8003d84:	f7ff fb18 	bl	80033b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d88:	480b      	ldr	r0, [pc, #44]	; (8003db8 <prvInitialiseTaskLists+0x74>)
 8003d8a:	f7ff fb15 	bl	80033b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <prvInitialiseTaskLists+0x78>)
 8003d90:	4a05      	ldr	r2, [pc, #20]	; (8003da8 <prvInitialiseTaskLists+0x64>)
 8003d92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d94:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <prvInitialiseTaskLists+0x7c>)
 8003d96:	4a05      	ldr	r2, [pc, #20]	; (8003dac <prvInitialiseTaskLists+0x68>)
 8003d98:	601a      	str	r2, [r3, #0]
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000284 	.word	0x20000284
 8003da8:	20000310 	.word	0x20000310
 8003dac:	20000324 	.word	0x20000324
 8003db0:	20000340 	.word	0x20000340
 8003db4:	20000354 	.word	0x20000354
 8003db8:	2000036c 	.word	0x2000036c
 8003dbc:	20000338 	.word	0x20000338
 8003dc0:	2000033c 	.word	0x2000033c

08003dc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dca:	e019      	b.n	8003e00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003dcc:	f000 f9ee 	bl	80041ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd0:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <prvCheckTasksWaitingTermination+0x50>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff fb75 	bl	80034cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <prvCheckTasksWaitingTermination+0x54>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	4a0b      	ldr	r2, [pc, #44]	; (8003e18 <prvCheckTasksWaitingTermination+0x54>)
 8003dea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <prvCheckTasksWaitingTermination+0x58>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <prvCheckTasksWaitingTermination+0x58>)
 8003df4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003df6:	f000 fa0d 	bl	8004214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f810 	bl	8003e20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e00:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <prvCheckTasksWaitingTermination+0x58>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e1      	bne.n	8003dcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20000354 	.word	0x20000354
 8003e18:	20000380 	.word	0x20000380
 8003e1c:	20000368 	.word	0x20000368

08003e20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d108      	bne.n	8003e44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fb6a 	bl	8004510 <vPortFree>
				vPortFree( pxTCB );
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fb67 	bl	8004510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e42:	e01a      	b.n	8003e7a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d103      	bne.n	8003e56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fb5e 	bl	8004510 <vPortFree>
	}
 8003e54:	e011      	b.n	8003e7a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d00c      	beq.n	8003e7a <prvDeleteTCB+0x5a>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	b672      	cpsid	i
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	b662      	cpsie	i
 8003e74:	60fb      	str	r3, [r7, #12]
}
 8003e76:	bf00      	nop
 8003e78:	e7fe      	b.n	8003e78 <prvDeleteTCB+0x58>
	}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e8a:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <prvResetNextTaskUnblockTime+0x38>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d104      	bne.n	8003e9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e94:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <prvResetNextTaskUnblockTime+0x3c>)
 8003e96:	f04f 32ff 	mov.w	r2, #4294967295
 8003e9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e9c:	e008      	b.n	8003eb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e9e:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <prvResetNextTaskUnblockTime+0x38>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <prvResetNextTaskUnblockTime+0x3c>)
 8003eae:	6013      	str	r3, [r2, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	20000338 	.word	0x20000338
 8003ec0:	200003a0 	.word	0x200003a0

08003ec4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ece:	4b29      	ldr	r3, [pc, #164]	; (8003f74 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ed4:	4b28      	ldr	r3, [pc, #160]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff faf6 	bl	80034cc <uxListRemove>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10b      	bne.n	8003efe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ee6:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	2201      	movs	r2, #1
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43da      	mvns	r2, r3
 8003ef4:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	4a20      	ldr	r2, [pc, #128]	; (8003f7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003efc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d10a      	bne.n	8003f1c <prvAddCurrentTaskToDelayedList+0x58>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f0c:	4b1a      	ldr	r3, [pc, #104]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	481a      	ldr	r0, [pc, #104]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f16:	f7ff fa7c 	bl	8003412 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f1a:	e026      	b.n	8003f6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4413      	add	r3, r2
 8003f22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f24:	4b14      	ldr	r3, [pc, #80]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d209      	bcs.n	8003f48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f34:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4610      	mov	r0, r2
 8003f42:	f7ff fa8a 	bl	800345a <vListInsert>
}
 8003f46:	e010      	b.n	8003f6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f48:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4619      	mov	r1, r3
 8003f54:	4610      	mov	r0, r2
 8003f56:	f7ff fa80 	bl	800345a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f5a:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d202      	bcs.n	8003f6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003f64:	4a09      	ldr	r2, [pc, #36]	; (8003f8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	6013      	str	r3, [r2, #0]
}
 8003f6a:	bf00      	nop
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000384 	.word	0x20000384
 8003f78:	20000280 	.word	0x20000280
 8003f7c:	20000388 	.word	0x20000388
 8003f80:	2000036c 	.word	0x2000036c
 8003f84:	2000033c 	.word	0x2000033c
 8003f88:	20000338 	.word	0x20000338
 8003f8c:	200003a0 	.word	0x200003a0

08003f90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	3b04      	subs	r3, #4
 8003fa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3b04      	subs	r3, #4
 8003fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f023 0201 	bic.w	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3b04      	subs	r3, #4
 8003fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003fc0:	4a0c      	ldr	r2, [pc, #48]	; (8003ff4 <pxPortInitialiseStack+0x64>)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3b14      	subs	r3, #20
 8003fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	3b04      	subs	r3, #4
 8003fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f06f 0202 	mvn.w	r2, #2
 8003fde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3b20      	subs	r3, #32
 8003fe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	08003ff9 	.word	0x08003ff9

08003ff8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004002:	4b14      	ldr	r3, [pc, #80]	; (8004054 <prvTaskExitError+0x5c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	d00c      	beq.n	8004026 <prvTaskExitError+0x2e>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	b672      	cpsid	i
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	b662      	cpsie	i
 8004020:	60fb      	str	r3, [r7, #12]
}
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <prvTaskExitError+0x2c>
	__asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402a:	b672      	cpsid	i
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	b662      	cpsie	i
 800403a:	60bb      	str	r3, [r7, #8]
}
 800403c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800403e:	bf00      	nop
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0fc      	beq.n	8004040 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004046:	bf00      	nop
 8004048:	bf00      	nop
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	2000000c 	.word	0x2000000c
	...

08004060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004060:	4b07      	ldr	r3, [pc, #28]	; (8004080 <pxCurrentTCBConst2>)
 8004062:	6819      	ldr	r1, [r3, #0]
 8004064:	6808      	ldr	r0, [r1, #0]
 8004066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406a:	f380 8809 	msr	PSP, r0
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f04f 0000 	mov.w	r0, #0
 8004076:	f380 8811 	msr	BASEPRI, r0
 800407a:	4770      	bx	lr
 800407c:	f3af 8000 	nop.w

08004080 <pxCurrentTCBConst2>:
 8004080:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop

08004088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004088:	4808      	ldr	r0, [pc, #32]	; (80040ac <prvPortStartFirstTask+0x24>)
 800408a:	6800      	ldr	r0, [r0, #0]
 800408c:	6800      	ldr	r0, [r0, #0]
 800408e:	f380 8808 	msr	MSP, r0
 8004092:	f04f 0000 	mov.w	r0, #0
 8004096:	f380 8814 	msr	CONTROL, r0
 800409a:	b662      	cpsie	i
 800409c:	b661      	cpsie	f
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	df00      	svc	0
 80040a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040aa:	bf00      	nop
 80040ac:	e000ed08 	.word	0xe000ed08

080040b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040b6:	4b37      	ldr	r3, [pc, #220]	; (8004194 <xPortStartScheduler+0xe4>)
 80040b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	22ff      	movs	r2, #255	; 0xff
 80040c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	4b2f      	ldr	r3, [pc, #188]	; (8004198 <xPortStartScheduler+0xe8>)
 80040dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040de:	4b2f      	ldr	r3, [pc, #188]	; (800419c <xPortStartScheduler+0xec>)
 80040e0:	2207      	movs	r2, #7
 80040e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040e4:	e009      	b.n	80040fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80040e6:	4b2d      	ldr	r3, [pc, #180]	; (800419c <xPortStartScheduler+0xec>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	4a2b      	ldr	r2, [pc, #172]	; (800419c <xPortStartScheduler+0xec>)
 80040ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004102:	2b80      	cmp	r3, #128	; 0x80
 8004104:	d0ef      	beq.n	80040e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004106:	4b25      	ldr	r3, [pc, #148]	; (800419c <xPortStartScheduler+0xec>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f1c3 0307 	rsb	r3, r3, #7
 800410e:	2b04      	cmp	r3, #4
 8004110:	d00c      	beq.n	800412c <xPortStartScheduler+0x7c>
	__asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004116:	b672      	cpsid	i
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	b662      	cpsie	i
 8004126:	60bb      	str	r3, [r7, #8]
}
 8004128:	bf00      	nop
 800412a:	e7fe      	b.n	800412a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800412c:	4b1b      	ldr	r3, [pc, #108]	; (800419c <xPortStartScheduler+0xec>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	4a1a      	ldr	r2, [pc, #104]	; (800419c <xPortStartScheduler+0xec>)
 8004134:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004136:	4b19      	ldr	r3, [pc, #100]	; (800419c <xPortStartScheduler+0xec>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800413e:	4a17      	ldr	r2, [pc, #92]	; (800419c <xPortStartScheduler+0xec>)
 8004140:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800414a:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <xPortStartScheduler+0xf0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a14      	ldr	r2, [pc, #80]	; (80041a0 <xPortStartScheduler+0xf0>)
 8004150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004154:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004156:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <xPortStartScheduler+0xf0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a11      	ldr	r2, [pc, #68]	; (80041a0 <xPortStartScheduler+0xf0>)
 800415c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004160:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004162:	f000 f8dd 	bl	8004320 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004166:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <xPortStartScheduler+0xf4>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800416c:	f000 f8fc 	bl	8004368 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004170:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <xPortStartScheduler+0xf8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a0c      	ldr	r2, [pc, #48]	; (80041a8 <xPortStartScheduler+0xf8>)
 8004176:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800417a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800417c:	f7ff ff84 	bl	8004088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004180:	f7ff fd6a 	bl	8003c58 <vTaskSwitchContext>
	prvTaskExitError();
 8004184:	f7ff ff38 	bl	8003ff8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	e000e400 	.word	0xe000e400
 8004198:	200003ac 	.word	0x200003ac
 800419c:	200003b0 	.word	0x200003b0
 80041a0:	e000ed20 	.word	0xe000ed20
 80041a4:	2000000c 	.word	0x2000000c
 80041a8:	e000ef34 	.word	0xe000ef34

080041ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	b672      	cpsid	i
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	b662      	cpsie	i
 80041c6:	607b      	str	r3, [r7, #4]
}
 80041c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80041ca:	4b10      	ldr	r3, [pc, #64]	; (800420c <vPortEnterCritical+0x60>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3301      	adds	r3, #1
 80041d0:	4a0e      	ldr	r2, [pc, #56]	; (800420c <vPortEnterCritical+0x60>)
 80041d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041d4:	4b0d      	ldr	r3, [pc, #52]	; (800420c <vPortEnterCritical+0x60>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d111      	bne.n	8004200 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041dc:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <vPortEnterCritical+0x64>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00c      	beq.n	8004200 <vPortEnterCritical+0x54>
	__asm volatile
 80041e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ea:	b672      	cpsid	i
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	b662      	cpsie	i
 80041fa:	603b      	str	r3, [r7, #0]
}
 80041fc:	bf00      	nop
 80041fe:	e7fe      	b.n	80041fe <vPortEnterCritical+0x52>
	}
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	2000000c 	.word	0x2000000c
 8004210:	e000ed04 	.word	0xe000ed04

08004214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800421a:	4b13      	ldr	r3, [pc, #76]	; (8004268 <vPortExitCritical+0x54>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10c      	bne.n	800423c <vPortExitCritical+0x28>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	b672      	cpsid	i
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	b662      	cpsie	i
 8004236:	607b      	str	r3, [r7, #4]
}
 8004238:	bf00      	nop
 800423a:	e7fe      	b.n	800423a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800423c:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <vPortExitCritical+0x54>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3b01      	subs	r3, #1
 8004242:	4a09      	ldr	r2, [pc, #36]	; (8004268 <vPortExitCritical+0x54>)
 8004244:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004246:	4b08      	ldr	r3, [pc, #32]	; (8004268 <vPortExitCritical+0x54>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d105      	bne.n	800425a <vPortExitCritical+0x46>
 800424e:	2300      	movs	r3, #0
 8004250:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004258:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	2000000c 	.word	0x2000000c
 800426c:	00000000 	.word	0x00000000

08004270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004270:	f3ef 8009 	mrs	r0, PSP
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <pxCurrentTCBConst>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	f01e 0f10 	tst.w	lr, #16
 8004280:	bf08      	it	eq
 8004282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800428a:	6010      	str	r0, [r2, #0]
 800428c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004294:	b672      	cpsid	i
 8004296:	f380 8811 	msr	BASEPRI, r0
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	b662      	cpsie	i
 80042a4:	f7ff fcd8 	bl	8003c58 <vTaskSwitchContext>
 80042a8:	f04f 0000 	mov.w	r0, #0
 80042ac:	f380 8811 	msr	BASEPRI, r0
 80042b0:	bc09      	pop	{r0, r3}
 80042b2:	6819      	ldr	r1, [r3, #0]
 80042b4:	6808      	ldr	r0, [r1, #0]
 80042b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ba:	f01e 0f10 	tst.w	lr, #16
 80042be:	bf08      	it	eq
 80042c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80042c4:	f380 8809 	msr	PSP, r0
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop

080042d0 <pxCurrentTCBConst>:
 80042d0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop

080042d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
	__asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	b672      	cpsid	i
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	b662      	cpsie	i
 80042f2:	607b      	str	r3, [r7, #4]
}
 80042f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80042f6:	f7ff fbf5 	bl	8003ae4 <xTaskIncrementTick>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <SysTick_Handler+0x44>)
 8004302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	2300      	movs	r3, #0
 800430a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	f383 8811 	msr	BASEPRI, r3
}
 8004312:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	e000ed04 	.word	0xe000ed04

08004320 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004324:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <vPortSetupTimerInterrupt+0x34>)
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800432a:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <vPortSetupTimerInterrupt+0x38>)
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004330:	4b0a      	ldr	r3, [pc, #40]	; (800435c <vPortSetupTimerInterrupt+0x3c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a0a      	ldr	r2, [pc, #40]	; (8004360 <vPortSetupTimerInterrupt+0x40>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	099b      	lsrs	r3, r3, #6
 800433c:	4a09      	ldr	r2, [pc, #36]	; (8004364 <vPortSetupTimerInterrupt+0x44>)
 800433e:	3b01      	subs	r3, #1
 8004340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004342:	4b04      	ldr	r3, [pc, #16]	; (8004354 <vPortSetupTimerInterrupt+0x34>)
 8004344:	2207      	movs	r2, #7
 8004346:	601a      	str	r2, [r3, #0]
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	e000e010 	.word	0xe000e010
 8004358:	e000e018 	.word	0xe000e018
 800435c:	20000000 	.word	0x20000000
 8004360:	10624dd3 	.word	0x10624dd3
 8004364:	e000e014 	.word	0xe000e014

08004368 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004368:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004378 <vPortEnableVFP+0x10>
 800436c:	6801      	ldr	r1, [r0, #0]
 800436e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004372:	6001      	str	r1, [r0, #0]
 8004374:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004376:	bf00      	nop
 8004378:	e000ed88 	.word	0xe000ed88

0800437c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08a      	sub	sp, #40	; 0x28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004384:	2300      	movs	r3, #0
 8004386:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004388:	f7ff fb00 	bl	800398c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800438c:	4b5b      	ldr	r3, [pc, #364]	; (80044fc <pvPortMalloc+0x180>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004394:	f000 f91a 	bl	80045cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004398:	4b59      	ldr	r3, [pc, #356]	; (8004500 <pvPortMalloc+0x184>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4013      	ands	r3, r2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f040 8092 	bne.w	80044ca <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01f      	beq.n	80043ec <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80043ac:	2208      	movs	r2, #8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4413      	add	r3, r2
 80043b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d016      	beq.n	80043ec <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f023 0307 	bic.w	r3, r3, #7
 80043c4:	3308      	adds	r3, #8
 80043c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00c      	beq.n	80043ec <pvPortMalloc+0x70>
	__asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d6:	b672      	cpsid	i
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	b662      	cpsie	i
 80043e6:	617b      	str	r3, [r7, #20]
}
 80043e8:	bf00      	nop
 80043ea:	e7fe      	b.n	80043ea <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d06b      	beq.n	80044ca <pvPortMalloc+0x14e>
 80043f2:	4b44      	ldr	r3, [pc, #272]	; (8004504 <pvPortMalloc+0x188>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d866      	bhi.n	80044ca <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043fc:	4b42      	ldr	r3, [pc, #264]	; (8004508 <pvPortMalloc+0x18c>)
 80043fe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004400:	4b41      	ldr	r3, [pc, #260]	; (8004508 <pvPortMalloc+0x18c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004406:	e004      	b.n	8004412 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	429a      	cmp	r2, r3
 800441a:	d903      	bls.n	8004424 <pvPortMalloc+0xa8>
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f1      	bne.n	8004408 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004424:	4b35      	ldr	r3, [pc, #212]	; (80044fc <pvPortMalloc+0x180>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442a:	429a      	cmp	r2, r3
 800442c:	d04d      	beq.n	80044ca <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2208      	movs	r2, #8
 8004434:	4413      	add	r3, r2
 8004436:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	1ad2      	subs	r2, r2, r3
 8004448:	2308      	movs	r3, #8
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	429a      	cmp	r2, r3
 800444e:	d921      	bls.n	8004494 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4413      	add	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00c      	beq.n	800447c <pvPortMalloc+0x100>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004466:	b672      	cpsid	i
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	b662      	cpsie	i
 8004476:	613b      	str	r3, [r7, #16]
}
 8004478:	bf00      	nop
 800447a:	e7fe      	b.n	800447a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	1ad2      	subs	r2, r2, r3
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800448e:	69b8      	ldr	r0, [r7, #24]
 8004490:	f000 f8fe 	bl	8004690 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004494:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <pvPortMalloc+0x188>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	4a19      	ldr	r2, [pc, #100]	; (8004504 <pvPortMalloc+0x188>)
 80044a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044a2:	4b18      	ldr	r3, [pc, #96]	; (8004504 <pvPortMalloc+0x188>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4b19      	ldr	r3, [pc, #100]	; (800450c <pvPortMalloc+0x190>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d203      	bcs.n	80044b6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044ae:	4b15      	ldr	r3, [pc, #84]	; (8004504 <pvPortMalloc+0x188>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a16      	ldr	r2, [pc, #88]	; (800450c <pvPortMalloc+0x190>)
 80044b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	4b11      	ldr	r3, [pc, #68]	; (8004500 <pvPortMalloc+0x184>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	431a      	orrs	r2, r3
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80044ca:	f7ff fa6d 	bl	80039a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00c      	beq.n	80044f2 <pvPortMalloc+0x176>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	b672      	cpsid	i
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	b662      	cpsie	i
 80044ec:	60fb      	str	r3, [r7, #12]
}
 80044ee:	bf00      	nop
 80044f0:	e7fe      	b.n	80044f0 <pvPortMalloc+0x174>
	return pvReturn;
 80044f2:	69fb      	ldr	r3, [r7, #28]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3728      	adds	r7, #40	; 0x28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20003fbc 	.word	0x20003fbc
 8004500:	20003fc8 	.word	0x20003fc8
 8004504:	20003fc0 	.word	0x20003fc0
 8004508:	20003fb4 	.word	0x20003fb4
 800450c:	20003fc4 	.word	0x20003fc4

08004510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d04c      	beq.n	80045bc <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004522:	2308      	movs	r3, #8
 8004524:	425b      	negs	r3, r3
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4413      	add	r3, r2
 800452a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	4b23      	ldr	r3, [pc, #140]	; (80045c4 <vPortFree+0xb4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4013      	ands	r3, r2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10c      	bne.n	8004558 <vPortFree+0x48>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	b672      	cpsid	i
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	b662      	cpsie	i
 8004552:	60fb      	str	r3, [r7, #12]
}
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00c      	beq.n	800457a <vPortFree+0x6a>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	b672      	cpsid	i
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	b662      	cpsie	i
 8004574:	60bb      	str	r3, [r7, #8]
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <vPortFree+0xb4>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d019      	beq.n	80045bc <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d115      	bne.n	80045bc <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <vPortFree+0xb4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	43db      	mvns	r3, r3
 800459a:	401a      	ands	r2, r3
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80045a0:	f7ff f9f4 	bl	800398c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <vPortFree+0xb8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4413      	add	r3, r2
 80045ae:	4a06      	ldr	r2, [pc, #24]	; (80045c8 <vPortFree+0xb8>)
 80045b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80045b2:	6938      	ldr	r0, [r7, #16]
 80045b4:	f000 f86c 	bl	8004690 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80045b8:	f7ff f9f6 	bl	80039a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80045bc:	bf00      	nop
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20003fc8 	.word	0x20003fc8
 80045c8:	20003fc0 	.word	0x20003fc0

080045cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045d2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80045d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80045d8:	4b27      	ldr	r3, [pc, #156]	; (8004678 <prvHeapInit+0xac>)
 80045da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00c      	beq.n	8004600 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3307      	adds	r3, #7
 80045ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0307 	bic.w	r3, r3, #7
 80045f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	4a1f      	ldr	r2, [pc, #124]	; (8004678 <prvHeapInit+0xac>)
 80045fc:	4413      	add	r3, r2
 80045fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004604:	4a1d      	ldr	r2, [pc, #116]	; (800467c <prvHeapInit+0xb0>)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800460a:	4b1c      	ldr	r3, [pc, #112]	; (800467c <prvHeapInit+0xb0>)
 800460c:	2200      	movs	r2, #0
 800460e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	4413      	add	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004618:	2208      	movs	r2, #8
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0307 	bic.w	r3, r3, #7
 8004626:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4a15      	ldr	r2, [pc, #84]	; (8004680 <prvHeapInit+0xb4>)
 800462c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800462e:	4b14      	ldr	r3, [pc, #80]	; (8004680 <prvHeapInit+0xb4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <prvHeapInit+0xb4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	1ad2      	subs	r2, r2, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800464c:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <prvHeapInit+0xb4>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <prvHeapInit+0xb8>)
 800465a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	4a09      	ldr	r2, [pc, #36]	; (8004688 <prvHeapInit+0xbc>)
 8004662:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004664:	4b09      	ldr	r3, [pc, #36]	; (800468c <prvHeapInit+0xc0>)
 8004666:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800466a:	601a      	str	r2, [r3, #0]
}
 800466c:	bf00      	nop
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	200003b4 	.word	0x200003b4
 800467c:	20003fb4 	.word	0x20003fb4
 8004680:	20003fbc 	.word	0x20003fbc
 8004684:	20003fc4 	.word	0x20003fc4
 8004688:	20003fc0 	.word	0x20003fc0
 800468c:	20003fc8 	.word	0x20003fc8

08004690 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004698:	4b28      	ldr	r3, [pc, #160]	; (800473c <prvInsertBlockIntoFreeList+0xac>)
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	e002      	b.n	80046a4 <prvInsertBlockIntoFreeList+0x14>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d8f7      	bhi.n	800469e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	4413      	add	r3, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d108      	bne.n	80046d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	441a      	add	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	441a      	add	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d118      	bne.n	8004718 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b15      	ldr	r3, [pc, #84]	; (8004740 <prvInsertBlockIntoFreeList+0xb0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d00d      	beq.n	800470e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	441a      	add	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	e008      	b.n	8004720 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800470e:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <prvInsertBlockIntoFreeList+0xb0>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	e003      	b.n	8004720 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	429a      	cmp	r2, r3
 8004726:	d002      	beq.n	800472e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800472e:	bf00      	nop
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20003fb4 	.word	0x20003fb4
 8004740:	20003fbc 	.word	0x20003fbc

08004744 <__libc_init_array>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	4d0d      	ldr	r5, [pc, #52]	; (800477c <__libc_init_array+0x38>)
 8004748:	4c0d      	ldr	r4, [pc, #52]	; (8004780 <__libc_init_array+0x3c>)
 800474a:	1b64      	subs	r4, r4, r5
 800474c:	10a4      	asrs	r4, r4, #2
 800474e:	2600      	movs	r6, #0
 8004750:	42a6      	cmp	r6, r4
 8004752:	d109      	bne.n	8004768 <__libc_init_array+0x24>
 8004754:	4d0b      	ldr	r5, [pc, #44]	; (8004784 <__libc_init_array+0x40>)
 8004756:	4c0c      	ldr	r4, [pc, #48]	; (8004788 <__libc_init_array+0x44>)
 8004758:	f000 f820 	bl	800479c <_init>
 800475c:	1b64      	subs	r4, r4, r5
 800475e:	10a4      	asrs	r4, r4, #2
 8004760:	2600      	movs	r6, #0
 8004762:	42a6      	cmp	r6, r4
 8004764:	d105      	bne.n	8004772 <__libc_init_array+0x2e>
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	f855 3b04 	ldr.w	r3, [r5], #4
 800476c:	4798      	blx	r3
 800476e:	3601      	adds	r6, #1
 8004770:	e7ee      	b.n	8004750 <__libc_init_array+0xc>
 8004772:	f855 3b04 	ldr.w	r3, [r5], #4
 8004776:	4798      	blx	r3
 8004778:	3601      	adds	r6, #1
 800477a:	e7f2      	b.n	8004762 <__libc_init_array+0x1e>
 800477c:	0800487c 	.word	0x0800487c
 8004780:	0800487c 	.word	0x0800487c
 8004784:	0800487c 	.word	0x0800487c
 8004788:	08004880 	.word	0x08004880

0800478c <memset>:
 800478c:	4402      	add	r2, r0
 800478e:	4603      	mov	r3, r0
 8004790:	4293      	cmp	r3, r2
 8004792:	d100      	bne.n	8004796 <memset+0xa>
 8004794:	4770      	bx	lr
 8004796:	f803 1b01 	strb.w	r1, [r3], #1
 800479a:	e7f9      	b.n	8004790 <memset+0x4>

0800479c <_init>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	bf00      	nop
 80047a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a2:	bc08      	pop	{r3}
 80047a4:	469e      	mov	lr, r3
 80047a6:	4770      	bx	lr

080047a8 <_fini>:
 80047a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047aa:	bf00      	nop
 80047ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ae:	bc08      	pop	{r3}
 80047b0:	469e      	mov	lr, r3
 80047b2:	4770      	bx	lr
